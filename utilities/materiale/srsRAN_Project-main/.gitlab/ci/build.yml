#
# Copyright 2021-2023 Software Radio Systems Limited
#
# This file is part of srsRAN
#
# srsRAN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# srsRAN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# A copy of the GNU Affero General Public License can be found in
# the LICENSE file in the top-level directory of this distribution
# and at http://www.gnu.org/licenses/.
#

include:
  - project: softwareradiosystems/testing-tools
    ref: "45"
    file: .gitlab/ci-shared/setup/all.yml

stages:
  - build and unit tests

# Template job

.build_and_unit:
  image: ${CR_REGISTRY_URI}/${PROJECT}/srs-builder-gnb-${OS}:${DOCKER_BUILDER_VERSION}
  tags:
    - ${SRS_INFRASTRUCTURE_TAG}-${PLATFORM}
  stage: build and unit tests
  variables:
    DOCKER_BUILDER_VERSION: "1.7.4"
    # General
    OS: ubuntu-22.04
    # Build
    COMPILER: gcc
    UHD_VERSION: "" # Empty for OS default
    BUILD_TYPE: "" # Empty for cmake default
    ASSERT_LEVEL: "" # Empty for cmake default
    ENABLE_EXPORT: "" # Empty for cmake default
    ENABLE_FFTW: "" # Empty for cmake default
    ENABLE_UHD: "" # Empty for cmake default
    ENABLE_ZERO_MQ: "" # Empty for cmake default
    ENABLE_ASAN: "" # Empty for cmake default
    ENABLE_TSAN: "" # Empty for cmake default
    ENABLE_GCOV: "" # Empty for cmake default
    AUTO_DETECT_ISA: "False"
    PLATFORM: "amd64"
    PROJECT: "testing-tools"
    # Test
    TEST_MODE: none # default, coverage, asan, tsan, valgrind, none
  needs: []
  before_script:
    - |
      build_srsgnb() {
        if [ -n "${UHD_VERSION}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -u ${UHD_VERSION}"
        fi
        if [ -n "${BUILD_TYPE}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
        fi
        if [ -n "${ASSERT_LEVEL}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DASSERT_LEVEL=${ASSERT_LEVEL}"
        fi
        if [ -n "${AUTO_DETECT_ISA}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DAUTO_DETECT_ISA=${AUTO_DETECT_ISA}"
        fi
        if [ -n "${ENABLE_EXPORT}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_EXPORT=${ENABLE_EXPORT}"
        fi
        if [ -n "${ENABLE_FFTW}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_FFTW=${ENABLE_FFTW}"
        fi
        if [ -n "${ENABLE_UHD}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_UHD=${ENABLE_UHD}"
        fi
        if [ -n "${ENABLE_ZERO_MQ}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_ZERO_MQ=${ENABLE_ZERO_MQ}"
        fi
        if [ -n "${ENABLE_ASAN}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_ASAN=${ENABLE_ASAN}"
        fi
        if [ -n "${ENABLE_TSAN}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_TSAN=${ENABLE_TSAN}"
        fi
        if [ -n "${ENABLE_GCOV}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_GCOV=${ENABLE_GCOV}"
        fi
        if [ -n "${ENABLE_AVX2}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_AVX2=${ENABLE_AVX2}"
        fi
        if [ -n "${ENABLE_AVX512}" ]; then
          BUILD_ARGS="${BUILD_ARGS} -DENABLE_AVX512=${ENABLE_AVX512}"
        fi
        if [[ $TEST_MODE = "none" ]]; then
          BUILD_ARGS="${BUILD_ARGS} -DBUILD_TESTS=False"
        fi

        BUILD_CMD="builder.sh -c ${COMPILER} ${BUILD_ARGS} ."
        echo "${BUILD_CMD}"
        echo "============================================================================================="
        $BUILD_CMD
      }
    - |
      launch_tests() {
        cd ${CI_PROJECT_DIR}/build
        case $TEST_MODE in
          none)
            echo "Tests skipped"
            exit 0
            ;;
          tsan)
            ctest_extra="-L tsan"
            ;;
          valgrind)
            cp DartConfiguration.tcl ${test_folder}/
            sed -i "s/${CI_PROJECT_DIR//\//\\/}\/build/${CI_PROJECT_DIR//\//\\/}\/build\/${test_folder//\//\\/}/" ${test_folder}/DartConfiguration.tcl
            sed -i "s/MemoryCheckCommandOptions: /MemoryCheckCommandOptions: --verbose --trace-children=yes --time-stamp=yes --leak-check=full --show-leak-kinds=all --show-reachable=yes/" ${test_folder}/DartConfiguration.tcl
            G_DEBUG=gc-friendly G_SLICE=always-malloc
            ctest_extra="-T memcheck --timeout 10800"
            ;;
        esac
        CTEST_CMD="ctest -j "$(nproc --all)" $ctest_extra --schedule-random --output-on-failure --output-junit xunit.xml"
        echo "${CTEST_CMD}"
        echo "============================================================================================="
        $CTEST_CMD && ret=0 || ret=1

        if [[ $TEST_MODE = "coverage" ]]; then 
          gcovr --xml --print-summary -j "$(nproc --all)" --exclude-unreachable-branches \
            --gcov-ignore-parse-errors \
            --exclude "${CI_PROJECT_DIR}/tests/*" \
            --exclude "${CI_PROJECT_DIR}/benchmarks/*" \
            --exclude "${CI_PROJECT_DIR}/apps/examples/*" \
            --exclude "${CI_PROJECT_DIR}/external/*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/e1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/e2ap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/f1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/ngap/.*" \
            --exclude "${CI_PROJECT_DIR}/include/srsgnb/asn1/rrc_nr/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/e1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/e2ap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/f1ap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/ngap/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/asn1/rrc_nr/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs/.*" \
            --exclude "${CI_PROJECT_DIR}/lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs/.*" \
            --exclude-lines-by-pattern ".*srsgnb_assert.*|.*srsgnb_sanity_check.*" \
            --root ${CI_PROJECT_DIR} \
            -o coverage.xml

          filesize=$(stat -c%s coverage.xml)
          maxsize=$((10*1204*1024))
          (( filesize > maxsize )) && echo "coverage.xml is greater than 10MB, over gitlab limit" && exit 1
        fi
        exit $ret
      }
  script:
    - build_srsgnb
    - launch_tests
  after_script:
    - mv ${CI_PROJECT_DIR}/build/xunit.xml         ${CI_PROJECT_DIR}/${CI_JOB_ID}_xunit.xml               || true
    - mv ${CI_PROJECT_DIR}/build/coverage.xml      ${CI_PROJECT_DIR}/${CI_JOB_ID}_coverage.xml            || true
    - mv ${CI_PROJECT_DIR}/build/Testing/Temporary ${CI_PROJECT_DIR}/build/Testing/Temporary_${CI_JOB_ID} || true
  timeout: 2h
  artifacts:
    when: always
    reports:
      junit: ${CI_JOB_ID}_xunit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${CI_JOB_ID}_coverage.xml
    paths:
      - ${CI_JOB_ID}_xunit.xml
      - ${CI_JOB_ID}_coverage.xml
      - build/Testing/Temporary_${CI_JOB_ID}
      - build/apps/gnb/gnb
    expire_in: 10 minutes
  cache: &build_cache
    key: ${OS}-${DOCKER_BUILDER_VERSION}-${COMPILER}
    paths:
      - ccache
    policy: pull

.build_and_unit_big:
  extends: .build_and_unit
  variables:
    KUBERNETES_CPU_REQUEST: 7
    KUBERNETES_MEMORY_REQUEST: 13Gi

# Main combinations

.build_and_unit_main:
  extends: .build_and_unit_big
  variables:
    ASSERT_LEVEL: PARANOID
  parallel:
    matrix:
      - OS: ubuntu-22.04
        TEST_MODE: coverage
        COMPILER: gcc
        BUILD_TYPE: Release
        ENABLE_GCOV: "True"
      - OS: archlinux-latest
        TEST_MODE: default
        COMPILER: gcc
        BUILD_TYPE: Release
      - OS: ubuntu-20.04
        TEST_MODE: default
        COMPILER: gcc
        BUILD_TYPE: Release
        ENABLE_EXPORT: "True"
      - OS: rhel8
        TEST_MODE: default
        COMPILER: gcc
        BUILD_TYPE: Release

build cached:
  extends: .build_and_unit_main
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
  cache:
    <<: *build_cache
    policy: pull

build update cache:
  extends: .build_and_unit_main
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $CI_DESCRIPTION =~ /Nightly/
  cache:
    <<: *build_cache
    policy: push

build clean:
  extends: .build_and_unit_main
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  cache: []

# Alt combinations

.build_and_unit_alt:
  extends: .build_and_unit
  variables:
    OS: "" # Need to be specified
    PLATFORM: "" # Need to be specified
    BUILD_TYPE: "" # Need to be specified
    TEST_MODE: default
    ENABLE_GCOV: "False"
    ENABLE_ASAN: "False"
    ENABLE_TSAN: "False"
  parallel:
    matrix:
      - COMPILER: [gcc, clang]
        ASSERT_LEVEL: [MINIMAL, NORMAL, PARANOID]
        ENABLE_EXPORT: ["True", "False"]

build alt [ubuntu-22.04, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    PLATFORM: amd64
    BUILD_TYPE: Debug
  cache: []

build alt [ubuntu-22.04, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    PLATFORM: amd64
    BUILD_TYPE: Release
  cache: []

build alt [ubuntu-22.04, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    PLATFORM: amd64
    BUILD_TYPE: RelWithDebInfo
  cache: []

build alt [ubuntu-22.04, arm64v8, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    PLATFORM: arm64
    BUILD_TYPE: Debug
  cache: []

build alt [ubuntu-22.04, arm64v8, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    PLATFORM: arm64
    BUILD_TYPE: Release
  cache: []

build alt [ubuntu-22.04, arm64v8, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    PLATFORM: arm64
    BUILD_TYPE: RelWithDebInfo
  cache: []

build alt [ubuntu-20.04, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-20.04
    PLATFORM: amd64
    BUILD_TYPE: Debug
  cache: []

build alt [ubuntu-20.04, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-20.04
    PLATFORM: amd64
    BUILD_TYPE: Release
  cache: []

build alt [ubuntu-20.04, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    PLATFORM: amd64
    BUILD_TYPE: RelWithDebInfo
  cache: []

build alt [ubuntu-20.04, arm64v8, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    PLATFORM: arm64
    BUILD_TYPE: Debug
  cache: []

build alt [ubuntu-20.04, arm64v8, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    PLATFORM: arm64
    BUILD_TYPE: Release
  cache: []

build alt [ubuntu-20.04, arm64v8, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-20.04
    PLATFORM: arm64
    BUILD_TYPE: RelWithDebInfo
  cache: []

build alt [archlinux-latest, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: archlinux-latest
    PLATFORM: amd64
    BUILD_TYPE: Debug
  cache: []

build alt [archlinux-latest, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: archlinux-latest
    PLATFORM: amd64
    BUILD_TYPE: Release
  cache: []

build alt [archlinux-latest, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: archlinux-latest
    PLATFORM: amd64
    BUILD_TYPE: RelWithDebInfo
  cache: []

build alt [rhel8, amd64, Debug]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: rhel8
    PLATFORM: amd64
    BUILD_TYPE: Debug
  cache: []

build alt [rhel8, amd64, Release]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: rhel8
    PLATFORM: amd64
    BUILD_TYPE: Release
  cache: []

build alt [rhel8, amd64, RelWithDebInfo]:
  extends: .build_and_unit_alt
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: rhel8
    PLATFORM: amd64
    BUILD_TYPE: RelWithDebInfo
  cache: []

# UHD

build uhd alt:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    TEST_MODE: none
    ASSERT_LEVEL: PARANOID
  parallel:
    matrix:
      - OS: ubuntu-22.04
        COMPILER: [gcc, clang]
        UHD_VERSION: "4.2.0.0"
      - OS: ubuntu-20.04
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.2.0.0", "4.1.0.5"]
  cache: []

# Sanitizers
sanitizers [asan]:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    TEST_MODE: asan
    COMPILER: gcc
    BUILD_TYPE: Debug
    ENABLE_ASAN: "True"
    ASSERT_LEVEL: PARANOID
  cache: []

sanitizers [tsan]:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    OS: ubuntu-22.04
    TEST_MODE: tsan
    COMPILER: clang
    BUILD_TYPE: Debug
    ENABLE_TSAN: "True"
    ASSERT_LEVEL: PARANOID
  cache: []

sanitizers [valgrind]:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  variables:
    OS: ubuntu-22.04
    TEST_MODE: valgrind
    COMPILER: gcc
    BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
  cache: []
  timeout: 4 hours # valgrind mode

# AVX

.avx:
  extends: .build_and_unit
  tags:
    - aws-demand-amd64-$CPU_FLAG
  variables:
    OS: ubuntu-22.04
    TEST_MODE: default
    COMPILER: gcc
    BUILD_TYPE: Release
    AUTO_DETECT_ISA: "True"

avx2 [basic]:
  extends: .avx
  rules:
    - if: $ON_MR
      when: manual
      allow_failure: true
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    CPU_FLAG: "avx2"
    ENABLE_AVX2: "True"
    ENABLE_AVX512: "False"

avx2 [tsan, cached]:
  extends: .avx
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $ON_MR
  variables:
    OS: ubuntu-22.04
    TEST_MODE: tsan
    COMPILER: clang
    BUILD_TYPE: Debug
    ENABLE_TSAN: "True"
    ASSERT_LEVEL: PARANOID
    CPU_FLAG: "avx2"
    ENABLE_AVX512: "False"
    ENABLE_AVX2: "True"
  cache:
    <<: *build_cache
    policy: pull

avx2 [tsan, update cache]:
  extends: "avx2 [tsan, cached]"
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
      when: never
    - if: $CI_DESCRIPTION =~ /Nightly/
  cache:
    <<: *build_cache
    policy: push

avx2 [tsan, clean]:
  extends: "avx2 [tsan, cached]"
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /no-cache/
  cache: []

# avx2 [asan]:
#   extends: .avx
#   rules:
#     - if: $CI_DESCRIPTION =~ /Nightly/
#   variables:
#     OS: ubuntu-22.04
#     TEST_MODE: asan
#     COMPILER: gcc
#     BUILD_TYPE: Debug
#     ENABLE_ASAN: "True"
#     ASSERT_LEVEL: PARANOID
#     CPU_FLAG: "avx2"
#     ENABLE_AVX512: "False"
#     ENABLE_AVX2: "True"

avx512:
  extends: .avx
  rules:
    - if: $ON_MR
      when: manual
      allow_failure: true
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    CPU_FLAG: "avx2-avx512"
    ENABLE_AVX2: "True"
    ENABLE_AVX512: "True"

avx extended:
  extends: .avx
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  parallel:
    matrix:
      - CPU_FLAG: ["avx2", "avx2-avx512"]
        AUTO_DETECT_ISA: ["True", "False"]
        ENABLE_AVX512: ["True", "False"]
        ENABLE_AVX2: ["True", "False"]

# Custom

custom build:
  tags:
    - aws-spot-${PLATFORM}
  extends: .build_and_unit
  rules:
    - if: $ON_MR
      when: manual
      allow_failure: true
  variables:
    # must be one of ubuntu-22.04, ubuntu-20.04, archlinux-latest
    OS: "ubuntu-22.04"
    # must be one of gcc, clang
    COMPILER: "gcc"
    # must be one of default, coverage, asan, tsan, valgrind, none
    TEST_MODE: "default"
    # it will be passed to cmake
    BUILD_ARGS: ""
    # must be one version supported in the specified OS
    UHD_VERSION: ""
  cache: []
  timeout: 4 hours # valgrind mode
  parallel:
    matrix:
      - PLATFORM: amd64
      - PLATFORM: arm64
