#
# Copyright 2021-2023 Software Radio Systems Limited
#
# This file is part of srsRAN
#
# srsRAN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# srsRAN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# A copy of the GNU Affero General Public License can be found in
# the LICENSE file in the top-level directory of this distribution
# and at http://www.gnu.org/licenses/.
#

# How to test nighlt/weekly schedules
# Generate a schedule for your branch whit a CI_DESCRIPTION variable
# that contains "Nightly"/"Weekly" and an extra word
# Ex: "Test Weekly", "Nighlty add feature"

include:
  - project: softwareradiosystems/testing-tools
    ref: "45"
    file: .gitlab/ci-shared/setup/all.yml
  - project: softwareradiosystems/testing-tools
    ref: "45"
    file: .gitlab/ci-shared/features/all.yml
  - project: softwareradiosystems/testing-tools
    ref: "45"
    file: .gitlab/ci-shared/tools/test_reporter.yml
  - local: .gitlab/ci/build.yml
  - local: .gitlab/ci/e2e.yml

stages:
  - ci
  - static
  - build and unit tests
  - e2e
  - documentation

################################################################################
## Static
################################################################################
include-guards:
  extends: .include-guards
  parallel:
    matrix:
      - INPUT_PATH: "include/srsran"
        INPUT_IGNORE: "/bundled/"
      - INPUT_PATH: "."
        INPUT_IGNORE: "^\\(include\\|docs\\|external\\)/.*"

.codechecker:
  image: $CR_REGISTRY_URI/testing-tools/codechecker-gnb:1.0.3
  stage: static
  needs: []
  tags:
    - ${SRS_INFRASTRUCTURE_TAG}-amd64
  variables:
    ANALYZER: ""
    ANALYZER_ARGS: ""
    ARTIFACT_EXTRA_PATH: ""
  rules:
    - if: $ON_MR
      variables:
        ARTIFACT_EXTRA_PATH: "/index.html"
    - if: $CI_DESCRIPTION =~ /Nightly/
  before_script:
    - |
      echo "
      -/usr/lib
      -*tests/unittests
      -*tests/integrationtests
      -*tests/benchmarks
      -*benchmarks
      -*apps/examples
      -*external
      -*lib/asn1
      -*lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs
      -*lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs" >/tmp/codechecker_skip
    - |
      export CC=/usr/bin/clang
      export CXX=/usr/bin/clang++
      mkdir -p build
      cd build || exit
      cmake -DASSERT_LEVEL=PARANOID -DAUTO_DETECT_ISA=False -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTS=False ..
      make srsran_build_info # needed to generate hashes.h
  script:
    - static-analyzer.sh -i /tmp/codechecker_skip --analyzers ${ANALYZER} ${ANALYZER_ARGS} $CI_PROJECT_DIR
  after_script:
    - mv codechecker_html codechecker-${ANALYZER}-html
  artifacts:
    reports:
      codequality: code-quality-report.json
    paths:
      - codechecker-${ANALYZER}-html${ARTIFACT_EXTRA_PATH}
    when: always
    expire_in: 10 minutes
  timeout: 8 hours # clangsa is slow

clang-tidy:
  extends: .codechecker
  variables:
    ANALYZER: clang-tidy
    ANALYZER_ARGS: --tidy-config .clang-tidy

cppcheck:
  extends: .codechecker
  rules:
    - if: $ON_MR
      when: manual
      allow_failure: true
      variables:
        ARTIFACT_EXTRA_PATH: "/index.html"
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    ANALYZER: cppcheck
    ANALYZER_ARGS: --cppcheck-max-template-recursion 10

clangsa:
  extends: .codechecker
  rules:
    - if: $ON_MR
      when: manual
      allow_failure: true
      variables:
        ARTIFACT_EXTRA_PATH: "/index.html"
    - if: $CI_DESCRIPTION =~ /Nightly/
      when: manual
      allow_failure: true
  variables:
    ANALYZER: clangsa
    ANALYZER_ARGS: --ctu

coverity:
  image: $CR_REGISTRY_URI/coverity_image/2022.6.0:1.0.0
  stage: static
  needs: []
  variables:
    KUBERNETES_CPU_REQUEST: 7
    KUBERNETES_MEMORY_REQUEST: 13Gi
  tags:
    - ${SRS_INFRASTRUCTURE_TAG}-amd64
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  script:
    - |
      mkdir -p build
      cd build
      cmake ..
      cov-build --dir cov-int make -j`nproc`
      tar czvf srsgnb.tgz cov-int
      ver=$(git rev-parse HEAD)

      curl --form token=$COVERITY_TOKEN \
        --form email=nils@srs.io \
        --form file=@srsgnb.tgz \
        --form version=$ver \
        --form description="srsGNB dev build" \
        https://scan.coverity.com/builds?project=srsRAN_5G

################################################################################
## Build + Unit Tests + Integration tests
################################################################################

# In build.yml

intermediate commits:
  extends: .build_and_unit_big
  rules:
    - if: $ON_MR
  variables:
    OS: ubuntu-22.04
    TEST_MODE: none
    COMPILER: gcc
    BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    ENABLE_EXPORT: "False"
    ENABLE_GCOV: "True"
  script:
    - DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends git git-lfs
    - git lfs install
    - git config advice.detachedHead false
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME --depth 20
    - |
      for rev in $(git rev-list --reverse origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME^1)
      do
        echo "##################################################"
        echo "#### $rev ####"
        echo "##################################################"
        git checkout $rev
        sed -i "s/-Wall -Werror/-Wall/" CMakeLists.txt
        build_srsgnb
        sed -i "s/-Wall/-Wall -Werror/" CMakeLists.txt
      done
  after_script:
    - rm -Rf build

################################################################################
# Doc generation
################################################################################
.depends on unit test jobs:
  # Here we handled how jobs in .gitlab-ci.yml depends on jobs inside build.yml
  # If unit tests related jobs change in build.yml, we'll need to change this one too
  needs:
    - job: build cached
      optional: true
      artifacts: true
    - job: build update cache
      optional: true
      artifacts: true
    - job: build clean
      optional: true
      artifacts: true

unit coverage:
  stage: documentation
  extends: .depends on unit test jobs
  image:
    name: $CR_REGISTRY_URI/testing-tools/report-generator:5.1.10
    entrypoint: ["/bin/sh", "-c"]
  rules:
    - if: $ON_MR
      variables:
        coverage_report: summary
      when: always # Even if previous stages/required jobs fail
    - if: $CI_DESCRIPTION =~ /Nightly/
      variables:
        coverage_report: full
      when: always # Even if previous stages/required jobs fail
  before_script:
    - PACKAGE_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/coverage/${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}/coverage_history.tar.gz
    # Download coverage history from the registry
    - |
      download_from_registry() {
        apk add curl
        
        cd ${CI_PROJECT_DIR}
        http_code=$(curl -w "%{http_code}" --header "PRIVATE-TOKEN: $CODEBOT_TOKEN" "${PACKAGE_URL}" -o output.tar.gz)
        if [[ $http_code == "200" ]]; then
          tar -xf output.tar.gz
        fi
      }
    # Publish coverage history folder to the registry
    - |
      publish_to_registry() {
        cd ${CI_PROJECT_DIR}
        tar -czf coverage_history.tar.gz coverage_history
        curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file coverage_history.tar.gz "${PACKAGE_URL}"
      }
  script:
    - |
      if [[ $coverage_report = "full" ]]; then
        download_from_registry
        HTML_TYPE=Html
        HISTORY=-historydir:coverage_history
      else
        HTML_TYPE=HtmlSummary
        HISTORY=
      fi
    - |
      ReportGenerator -reports:*coverage.xml -targetdir:coverage_html ${HISTORY} \
        -title:${CI_PROJECT_NAME} -tag:${CI_COMMIT_SHA} \
        -reporttypes:"${HTML_TYPE};TextSummary"
    - cat coverage_html/Summary.txt
    - |
      if [[ $coverage_report = "full" ]]; then
        publish_to_registry
      fi
  coverage: /^\s*Line coverage:\s*\d+.\d+\%/
  artifacts:
    paths:
      - coverage_html
    expire_in: 10 minutes

unit tests web:
  stage: documentation
  extends: .depends on unit test jobs
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
      when: always # Even if previous stages/required jobs fail
  image: python:3.9-alpine # sh entrypoint
  variables:
    GIT_STRATEGY: none
  before_script:
    - pip install junit2html
  script:
    - junit2html *xunit.xml --merge merged_xunit.xml
    - junit2html merged_xunit.xml ./test_report.html
  artifacts:
    paths:
      - test_report.html
    expire_in: 10 minutes

pages:
  stage: documentation
  rules:
    - if: $CI_DESCRIPTION == "Nightly"
      when: always # Even if previous stages/required jobs fail
  image: $CR_REGISTRY_URI/testing-tools/doxygen:1.5.0
  script:
    - ls
    - ls zmq
    - cat ./zmq/job.env
    - mkdir public
    - mv coverage_html public/
    - mv codechecker*html public/
    - mv test_report.html public/
    - mv docs/index.html public/index.html
    - doxygen_generator.sh
    - mv build/public/index.html build/public/index_doxygen.html
    - find build/public/ -name '*.*' -exec mv {} public/ \;

  after_script:
    - |
      if [ $CI_JOB_STATUS = "failed" ]; then
        mkdir -p public
        mv docs/fail.html public/index.html
      fi
    - mv docs/*.png public/
    - sed -i 's/commit_hash/'$CI_COMMIT_SHA'/' public/index.html
    - sed -i 's/zmq_job_id/'$( cat ./zmq/job.env  )'/' public/index.html
    - sed -i 's/zmq-tsan_job_id/'$( cat ./zmq-tsan/job.env  )'/' public/index.html
    # - sed -i 's/zmq-asan_job_id/'$( cat ./zmq-asan/job.env  )'/' public/index.html
    - sed -i 's/rf_job_id/'$( cat ./rf/job.env  )'/' public/index.html

  needs:
    - job: unit coverage
      artifacts: true
    - job: unit tests web
      artifacts: true
    - job: clang-tidy
      artifacts: true
    - job: cppcheck
      artifacts: true
    - job: zmq
      artifacts: true
    - job: zmq-tsan
      artifacts: true
    # - job: zmq-asan
    #   artifacts: true
    - job: rf
      artifacts: true
  artifacts:
    paths:
      - public
    expire_in: 10 minutes

################################################################################
# Git workflow graduation
################################################################################
promote code:
  stage: .post
  rules:
    - if: $GRADUATION_BRANCH
  variables:
    GIT_STRATEGY: none
  image: alpine:3.16.0 # sh entrypoint
  before_script:
    - apk add git git-lfs
    - git lfs install
  script:
    - git clone https://${CODEBOT_USERNAME}:${CODEBOT_TOKEN}@gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git /${CI_PROJECT_NAME}
    - cd /${CI_PROJECT_NAME}
    - git checkout -t origin/$GRADUATION_BRANCH
    - git rebase ${CI_COMMIT_SHA}
    - git push
