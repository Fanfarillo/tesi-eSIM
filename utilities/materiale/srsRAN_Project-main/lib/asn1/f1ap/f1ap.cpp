/*
 *
 * Copyright 2021-2023 Software Radio Systems Limited
 *
 * This file is part of srsRAN.
 *
 * srsRAN is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * srsRAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * A copy of the GNU Affero General Public License can be found in
 * the LICENSE file in the top-level directory of this distribution
 * and at http://www.gnu.org/licenses/.
 *
 */

#include "srsran/asn1/f1ap/f1ap.h"
#include <sstream>

using namespace asn1;
using namespace asn1::f1ap;

/*******************************************************************************
 *                                Struct Methods
 ******************************************************************************/

// AdditionalSIBMessageList-Item ::= SEQUENCE
SRSASN_CODE add_sib_msg_list_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(add_sib.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE add_sib_msg_list_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(add_sib.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void add_sib_msg_list_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("additionalSIB", add_sib.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Pre-emptionCapability ::= ENUMERATED
const char* pre_emption_cap_opts::to_string() const
{
  static const char* names[] = {"shall-not-trigger-pre-emption", "may-trigger-pre-emption"};
  return convert_enum_idx(names, 2, value, "pre_emption_cap_e");
}

// Pre-emptionVulnerability ::= ENUMERATED
const char* pre_emption_vulnerability_opts::to_string() const
{
  static const char* names[] = {"not-pre-emptable", "pre-emptable"};
  return convert_enum_idx(names, 2, value, "pre_emption_vulnerability_e");
}

// AllocationAndRetentionPriority ::= SEQUENCE
SRSASN_CODE alloc_and_retention_prio_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, prio_level, (uint8_t)0u, (uint8_t)15u, false, true));
  HANDLE_CODE(pre_emption_cap.pack(bref));
  HANDLE_CODE(pre_emption_vulnerability.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE alloc_and_retention_prio_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(prio_level, bref, (uint8_t)0u, (uint8_t)15u, false, true));
  HANDLE_CODE(pre_emption_cap.unpack(bref));
  HANDLE_CODE(pre_emption_vulnerability.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void alloc_and_retention_prio_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("priorityLevel", prio_level);
  j.write_str("pre-emptionCapability", pre_emption_cap.to_string());
  j.write_str("pre-emptionVulnerability", pre_emption_vulnerability.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// NRCGI ::= SEQUENCE
SRSASN_CODE nr_cgi_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.pack(bref));
  HANDLE_CODE(nr_cell_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_cgi_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.unpack(bref));
  HANDLE_CODE(nr_cell_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void nr_cgi_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("pLMN-Identity", plmn_id.to_string());
  j.write_str("nRCellIdentity", nr_cell_id.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Associated-SCell-Item ::= SEQUENCE
SRSASN_CODE associated_scell_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE associated_scell_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void associated_scell_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sCell-ID");
  scell_id.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Associated-SCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t associated_scell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {200};
  return map_enum_number(names, 1, idx, "id");
}
bool associated_scell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 200 == id;
}
crit_e associated_scell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 200) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
associated_scell_item_ies_o::value_c associated_scell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 200) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e associated_scell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 200) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void associated_scell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Associated-SCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE associated_scell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE associated_scell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* associated_scell_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Associated-SCell-Item"};
  return convert_enum_idx(names, 1, value, "associated_scell_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<associated_scell_item_ies_o>;

// AvailablePLMNList-Item ::= SEQUENCE
SRSASN_CODE available_plmn_list_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE available_plmn_list_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void available_plmn_list_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("pLMNIdentity", plmn_id.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// ExtendedAvailablePLMN-Item ::= SEQUENCE
SRSASN_CODE extended_available_plmn_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE extended_available_plmn_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void extended_available_plmn_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("pLMNIdentity", plmn_id.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// BPLMN-ID-Info-Item ::= SEQUENCE
SRSASN_CODE bplmn_id_info_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(extended_plmn_id_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(five_gs_tac_present, 1));
  HANDLE_CODE(bref.pack(ranac_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, plmn_id_list, 1, 6, true));
  if (extended_plmn_id_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, extended_plmn_id_list, 1, 6, true));
  }
  if (five_gs_tac_present) {
    HANDLE_CODE(five_gs_tac.pack(bref));
  }
  HANDLE_CODE(nr_cell_id.pack(bref));
  if (ranac_present) {
    HANDLE_CODE(pack_integer(bref, ranac, (uint16_t)0u, (uint16_t)255u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bplmn_id_info_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool extended_plmn_id_list_present;
  HANDLE_CODE(bref.unpack(extended_plmn_id_list_present, 1));
  HANDLE_CODE(bref.unpack(five_gs_tac_present, 1));
  HANDLE_CODE(bref.unpack(ranac_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(plmn_id_list, bref, 1, 6, true));
  if (extended_plmn_id_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(extended_plmn_id_list, bref, 1, 6, true));
  }
  if (five_gs_tac_present) {
    HANDLE_CODE(five_gs_tac.unpack(bref));
  }
  HANDLE_CODE(nr_cell_id.unpack(bref));
  if (ranac_present) {
    HANDLE_CODE(unpack_integer(ranac, bref, (uint16_t)0u, (uint16_t)255u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void bplmn_id_info_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("pLMN-Identity-List");
  for (const auto& e1 : plmn_id_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (extended_plmn_id_list.size() > 0) {
    j.start_array("extended-PLMN-Identity-List");
    for (const auto& e1 : extended_plmn_id_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (five_gs_tac_present) {
    j.write_str("fiveGS-TAC", five_gs_tac.to_string());
  }
  j.write_str("nr-cell-ID", nr_cell_id.to_string());
  if (ranac_present) {
    j.write_int("ranac", ranac);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Broadcast-To-Be-Cancelled-Item ::= SEQUENCE
SRSASN_CODE broadcast_to_be_cancelled_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_to_be_cancelled_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void broadcast_to_be_cancelled_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Broadcast-To-Be-Cancelled-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_to_be_cancelled_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {149};
  return map_enum_number(names, 1, idx, "id");
}
bool broadcast_to_be_cancelled_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 149 == id;
}
crit_e broadcast_to_be_cancelled_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 149) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
broadcast_to_be_cancelled_list_item_ies_o::value_c
broadcast_to_be_cancelled_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 149) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_to_be_cancelled_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 149) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void broadcast_to_be_cancelled_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Broadcast-To-Be-Cancelled-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE broadcast_to_be_cancelled_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_to_be_cancelled_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* broadcast_to_be_cancelled_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Broadcast-To-Be-Cancelled-Item"};
  return convert_enum_idx(names, 1, value, "broadcast_to_be_cancelled_list_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<broadcast_to_be_cancelled_list_item_ies_o>;

// CNUEPagingIdentity ::= CHOICE
void cn_ue_paging_id_c::destroy_()
{
  switch (type_) {
    case types::five_g_s_tmsi:
      c.destroy<fixed_bitstring<48, false, true>>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void cn_ue_paging_id_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::five_g_s_tmsi:
      c.init<fixed_bitstring<48, false, true>>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cn_ue_paging_id_c");
  }
}
cn_ue_paging_id_c::cn_ue_paging_id_c(const cn_ue_paging_id_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::five_g_s_tmsi:
      c.init(other.c.get<fixed_bitstring<48, false, true>>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cn_ue_paging_id_c");
  }
}
cn_ue_paging_id_c& cn_ue_paging_id_c::operator=(const cn_ue_paging_id_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::five_g_s_tmsi:
      c.set(other.c.get<fixed_bitstring<48, false, true>>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cn_ue_paging_id_c");
  }

  return *this;
}
fixed_bitstring<48, false, true>& cn_ue_paging_id_c::set_five_g_s_tmsi()
{
  set(types::five_g_s_tmsi);
  return c.get<fixed_bitstring<48, false, true>>();
}
protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>& cn_ue_paging_id_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>();
}
void cn_ue_paging_id_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::five_g_s_tmsi:
      j.write_str("fiveG-S-TMSI", c.get<fixed_bitstring<48, false, true>>().to_string());
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "cn_ue_paging_id_c");
  }
  j.end_obj();
}
SRSASN_CODE cn_ue_paging_id_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::five_g_s_tmsi:
      HANDLE_CODE((c.get<fixed_bitstring<48, false, true>>().pack(bref)));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cn_ue_paging_id_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cn_ue_paging_id_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::five_g_s_tmsi:
      HANDLE_CODE((c.get<fixed_bitstring<48, false, true>>().unpack(bref)));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<cn_ue_paging_id_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cn_ue_paging_id_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cn_ue_paging_id_c::types_opts::to_string() const
{
  static const char* names[] = {"fiveG-S-TMSI", "choice-extension"};
  return convert_enum_idx(names, 2, value, "cn_ue_paging_id_c::types");
}
uint8_t cn_ue_paging_id_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {5};
  return map_enum_number(numbers, 1, value, "cn_ue_paging_id_c::types");
}

// Endpoint-IP-address-and-port-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t endpoint_ip_address_and_port_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {230};
  return map_enum_number(names, 1, idx, "id");
}
bool endpoint_ip_address_and_port_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 230 == id;
}
crit_e endpoint_ip_address_and_port_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 230) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
endpoint_ip_address_and_port_ext_ies_o::ext_c endpoint_ip_address_and_port_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 230) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e endpoint_ip_address_and_port_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 230) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void endpoint_ip_address_and_port_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("BIT STRING", c.to_string());
  j.end_obj();
}
SRSASN_CODE endpoint_ip_address_and_port_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE endpoint_ip_address_and_port_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* endpoint_ip_address_and_port_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"BIT STRING"};
  return convert_enum_idx(names, 1, value, "endpoint_ip_address_and_port_ext_ies_o::ext_c::types");
}

// Endpoint-IP-address-and-port ::= SEQUENCE
SRSASN_CODE endpoint_ip_address_and_port_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(endpoint_ip_address.pack(bref));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE endpoint_ip_address_and_port_s::unpack(cbit_ref& bref)
{
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(endpoint_ip_address.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void endpoint_ip_address_and_port_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("endpointIPAddress", endpoint_ip_address.to_string());
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// CP-TransportLayerAddress ::= CHOICE
void cp_transport_layer_address_c::destroy_()
{
  switch (type_) {
    case types::endpoint_ip_address:
      c.destroy<bounded_bitstring<1, 160, true, true>>();
      break;
    case types::endpoint_ip_address_and_port:
      c.destroy<endpoint_ip_address_and_port_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void cp_transport_layer_address_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::endpoint_ip_address:
      c.init<bounded_bitstring<1, 160, true, true>>();
      break;
    case types::endpoint_ip_address_and_port:
      c.init<endpoint_ip_address_and_port_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cp_transport_layer_address_c");
  }
}
cp_transport_layer_address_c::cp_transport_layer_address_c(const cp_transport_layer_address_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::endpoint_ip_address:
      c.init(other.c.get<bounded_bitstring<1, 160, true, true>>());
      break;
    case types::endpoint_ip_address_and_port:
      c.init(other.c.get<endpoint_ip_address_and_port_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cp_transport_layer_address_c");
  }
}
cp_transport_layer_address_c& cp_transport_layer_address_c::operator=(const cp_transport_layer_address_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::endpoint_ip_address:
      c.set(other.c.get<bounded_bitstring<1, 160, true, true>>());
      break;
    case types::endpoint_ip_address_and_port:
      c.set(other.c.get<endpoint_ip_address_and_port_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cp_transport_layer_address_c");
  }

  return *this;
}
bounded_bitstring<1, 160, true, true>& cp_transport_layer_address_c::set_endpoint_ip_address()
{
  set(types::endpoint_ip_address);
  return c.get<bounded_bitstring<1, 160, true, true>>();
}
endpoint_ip_address_and_port_s& cp_transport_layer_address_c::set_endpoint_ip_address_and_port()
{
  set(types::endpoint_ip_address_and_port);
  return c.get<endpoint_ip_address_and_port_s>();
}
protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>& cp_transport_layer_address_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>();
}
void cp_transport_layer_address_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::endpoint_ip_address:
      j.write_str("endpoint-IP-address", c.get<bounded_bitstring<1, 160, true, true>>().to_string());
      break;
    case types::endpoint_ip_address_and_port:
      j.write_fieldname("endpoint-IP-address-and-port");
      c.get<endpoint_ip_address_and_port_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "cp_transport_layer_address_c");
  }
  j.end_obj();
}
SRSASN_CODE cp_transport_layer_address_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::endpoint_ip_address:
      HANDLE_CODE((c.get<bounded_bitstring<1, 160, true, true>>().pack(bref)));
      break;
    case types::endpoint_ip_address_and_port:
      HANDLE_CODE(c.get<endpoint_ip_address_and_port_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cp_transport_layer_address_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cp_transport_layer_address_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::endpoint_ip_address:
      HANDLE_CODE((c.get<bounded_bitstring<1, 160, true, true>>().unpack(bref)));
      break;
    case types::endpoint_ip_address_and_port:
      HANDLE_CODE(c.get<endpoint_ip_address_and_port_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<cp_transport_layer_address_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cp_transport_layer_address_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cp_transport_layer_address_c::types_opts::to_string() const
{
  static const char* names[] = {"endpoint-IP-address", "endpoint-IP-address-and-port", "choice-extension"};
  return convert_enum_idx(names, 3, value, "cp_transport_layer_address_c::types");
}

// CUtoDURRCInformation-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t cu_to_du_rrc_info_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {119, 173, 163, 214, 234};
  return map_enum_number(names, 5, idx, "id");
}
bool cu_to_du_rrc_info_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {119, 173, 163, 214, 234};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e cu_to_du_rrc_info_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 119:
      return crit_e::ignore;
    case 173:
      return crit_e::ignore;
    case 163:
      return crit_e::ignore;
    case 214:
      return crit_e::ignore;
    case 234:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
cu_to_du_rrc_info_ext_ies_o::ext_c cu_to_du_rrc_info_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 119:
      ret.set(ext_c::types::ho_prep_info);
      break;
    case 173:
      ret.set(ext_c::types::cell_group_cfg);
      break;
    case 163:
      ret.set(ext_c::types::meas_timing_cfg);
      break;
    case 214:
      ret.set(ext_c::types::ue_assist_info);
      break;
    case 234:
      ret.set(ext_c::types::cg_cfg);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cu_to_du_rrc_info_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 119:
      return presence_e::optional;
    case 173:
      return presence_e::optional;
    case 163:
      return presence_e::optional;
    case 214:
      return presence_e::optional;
    case 234:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void cu_to_du_rrc_info_ext_ies_o::ext_c::destroy_()
{
  switch (type_) {
    case types::ho_prep_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::cell_group_cfg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::meas_timing_cfg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::ue_assist_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::cg_cfg:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void cu_to_du_rrc_info_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ho_prep_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::cell_group_cfg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::meas_timing_cfg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::ue_assist_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::cg_cfg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_to_du_rrc_info_ext_ies_o::ext_c");
  }
}
cu_to_du_rrc_info_ext_ies_o::ext_c::ext_c(const cu_to_du_rrc_info_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ho_prep_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::cell_group_cfg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::meas_timing_cfg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ue_assist_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::cg_cfg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_to_du_rrc_info_ext_ies_o::ext_c");
  }
}
cu_to_du_rrc_info_ext_ies_o::ext_c&
cu_to_du_rrc_info_ext_ies_o::ext_c::operator=(const cu_to_du_rrc_info_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ho_prep_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::cell_group_cfg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::meas_timing_cfg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ue_assist_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::cg_cfg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_to_du_rrc_info_ext_ies_o::ext_c");
  }

  return *this;
}
unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::ho_prep_info()
{
  assert_choice_type(types::ho_prep_info, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::cell_group_cfg()
{
  assert_choice_type(types::cell_group_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::meas_timing_cfg()
{
  assert_choice_type(types::meas_timing_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::ue_assist_info()
{
  assert_choice_type(types::ue_assist_info, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::cg_cfg()
{
  assert_choice_type(types::cg_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::ho_prep_info() const
{
  assert_choice_type(types::ho_prep_info, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::cell_group_cfg() const
{
  assert_choice_type(types::cell_group_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::meas_timing_cfg() const
{
  assert_choice_type(types::meas_timing_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::ue_assist_info() const
{
  assert_choice_type(types::ue_assist_info, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& cu_to_du_rrc_info_ext_ies_o::ext_c::cg_cfg() const
{
  assert_choice_type(types::cg_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
void cu_to_du_rrc_info_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ho_prep_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::cell_group_cfg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::meas_timing_cfg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::ue_assist_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::cg_cfg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "cu_to_du_rrc_info_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE cu_to_du_rrc_info_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ho_prep_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::cell_group_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::meas_timing_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::ue_assist_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::cg_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cu_to_du_rrc_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cu_to_du_rrc_info_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ho_prep_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::cell_group_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::meas_timing_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::ue_assist_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::cg_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cu_to_du_rrc_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cu_to_du_rrc_info_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"OCTET STRING", "OCTET STRING", "OCTET STRING", "OCTET STRING", "OCTET STRING"};
  return convert_enum_idx(names, 5, value, "cu_to_du_rrc_info_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ext_field_s<cu_to_du_rrc_info_ext_ies_o>;

cu_to_du_rrc_info_ext_ies_container::cu_to_du_rrc_info_ext_ies_container() :
  ho_prep_info(119, crit_e::ignore),
  cell_group_cfg(173, crit_e::ignore),
  meas_timing_cfg(163, crit_e::ignore),
  ue_assist_info(214, crit_e::ignore),
  cg_cfg(234, crit_e::ignore)
{
}
SRSASN_CODE cu_to_du_rrc_info_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += ho_prep_info_present ? 1 : 0;
  nof_ies += cell_group_cfg_present ? 1 : 0;
  nof_ies += meas_timing_cfg_present ? 1 : 0;
  nof_ies += ue_assist_info_present ? 1 : 0;
  nof_ies += cg_cfg_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (ho_prep_info_present) {
    HANDLE_CODE(ho_prep_info.pack(bref));
  }
  if (cell_group_cfg_present) {
    HANDLE_CODE(cell_group_cfg.pack(bref));
  }
  if (meas_timing_cfg_present) {
    HANDLE_CODE(meas_timing_cfg.pack(bref));
  }
  if (ue_assist_info_present) {
    HANDLE_CODE(ue_assist_info.pack(bref));
  }
  if (cg_cfg_present) {
    HANDLE_CODE(cg_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cu_to_du_rrc_info_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 119: {
        ho_prep_info_present = true;
        ho_prep_info.id      = id;
        HANDLE_CODE(ho_prep_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ho_prep_info.ext.unpack(bref));
        break;
      }
      case 173: {
        cell_group_cfg_present = true;
        cell_group_cfg.id      = id;
        HANDLE_CODE(cell_group_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cell_group_cfg.ext.unpack(bref));
        break;
      }
      case 163: {
        meas_timing_cfg_present = true;
        meas_timing_cfg.id      = id;
        HANDLE_CODE(meas_timing_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_timing_cfg.ext.unpack(bref));
        break;
      }
      case 214: {
        ue_assist_info_present = true;
        ue_assist_info.id      = id;
        HANDLE_CODE(ue_assist_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_assist_info.ext.unpack(bref));
        break;
      }
      case 234: {
        cg_cfg_present = true;
        cg_cfg.id      = id;
        HANDLE_CODE(cg_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cg_cfg.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void cu_to_du_rrc_info_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (ho_prep_info_present) {
    j.write_fieldname("");
    ho_prep_info.to_json(j);
  }
  if (cell_group_cfg_present) {
    j.write_fieldname("");
    cell_group_cfg.to_json(j);
  }
  if (meas_timing_cfg_present) {
    j.write_fieldname("");
    meas_timing_cfg.to_json(j);
  }
  if (ue_assist_info_present) {
    j.write_fieldname("");
    ue_assist_info.to_json(j);
  }
  if (cg_cfg_present) {
    j.write_fieldname("");
    cg_cfg.to_json(j);
  }
  j.end_obj();
}

// CUtoDURRCInformation ::= SEQUENCE
SRSASN_CODE cu_to_du_rrc_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cg_cfg_info.size() > 0, 1));
  HANDLE_CODE(bref.pack(ue_cap_rat_container_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(meas_cfg.size() > 0, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  if (cg_cfg_info.size() > 0) {
    HANDLE_CODE(cg_cfg_info.pack(bref));
  }
  if (ue_cap_rat_container_list.size() > 0) {
    HANDLE_CODE(ue_cap_rat_container_list.pack(bref));
  }
  if (meas_cfg.size() > 0) {
    HANDLE_CODE(meas_cfg.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cu_to_du_rrc_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool cg_cfg_info_present;
  HANDLE_CODE(bref.unpack(cg_cfg_info_present, 1));
  bool ue_cap_rat_container_list_present;
  HANDLE_CODE(bref.unpack(ue_cap_rat_container_list_present, 1));
  bool meas_cfg_present;
  HANDLE_CODE(bref.unpack(meas_cfg_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  if (cg_cfg_info_present) {
    HANDLE_CODE(cg_cfg_info.unpack(bref));
  }
  if (ue_cap_rat_container_list_present) {
    HANDLE_CODE(ue_cap_rat_container_list.unpack(bref));
  }
  if (meas_cfg_present) {
    HANDLE_CODE(meas_cfg.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cu_to_du_rrc_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cg_cfg_info.size() > 0) {
    j.write_str("cG-ConfigInfo", cg_cfg_info.to_string());
  }
  if (ue_cap_rat_container_list.size() > 0) {
    j.write_str("uE-CapabilityRAT-ContainerList", ue_cap_rat_container_list.to_string());
  }
  if (meas_cfg.size() > 0) {
    j.write_str("measConfig", meas_cfg.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Candidate-SpCell-Item ::= SEQUENCE
SRSASN_CODE candidate_sp_cell_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(candidate_sp_cell_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE candidate_sp_cell_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(candidate_sp_cell_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void candidate_sp_cell_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("candidate-SpCell-ID");
  candidate_sp_cell_id.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Candidate-SpCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t candidate_sp_cell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {91};
  return map_enum_number(names, 1, idx, "id");
}
bool candidate_sp_cell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 91 == id;
}
crit_e candidate_sp_cell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 91) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
candidate_sp_cell_item_ies_o::value_c candidate_sp_cell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 91) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e candidate_sp_cell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 91) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void candidate_sp_cell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Candidate-SpCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE candidate_sp_cell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE candidate_sp_cell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* candidate_sp_cell_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Candidate-SpCell-Item"};
  return convert_enum_idx(names, 1, value, "candidate_sp_cell_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<candidate_sp_cell_item_ies_o>;

// CauseMisc ::= ENUMERATED
const char* cause_misc_opts::to_string() const
{
  static const char* names[] = {"control-processing-overload",
                                "not-enough-user-plane-processing-resources",
                                "hardware-failure",
                                "om-intervention",
                                "unspecified"};
  return convert_enum_idx(names, 5, value, "cause_misc_e");
}

// CauseProtocol ::= ENUMERATED
const char* cause_protocol_opts::to_string() const
{
  static const char* names[] = {"transfer-syntax-error",
                                "abstract-syntax-error-reject",
                                "abstract-syntax-error-ignore-and-notify",
                                "message-not-compatible-with-receiver-state",
                                "semantic-error",
                                "abstract-syntax-error-falsely-constructed-message",
                                "unspecified"};
  return convert_enum_idx(names, 7, value, "cause_protocol_e");
}

// CauseRadioNetwork ::= ENUMERATED
const char* cause_radio_network_opts::to_string() const
{
  static const char* names[] = {"unspecified",
                                "rl-failure-rlc",
                                "unknown-or-already-allocated-gnb-cu-ue-f1ap-id",
                                "unknown-or-already-allocated-gnb-du-ue-f1ap-id",
                                "unknown-or-inconsistent-pair-of-ue-f1ap-id",
                                "interaction-with-other-procedure",
                                "not-supported-qci-Value",
                                "action-desirable-for-radio-reasons",
                                "no-radio-resources-available",
                                "procedure-cancelled",
                                "normal-release",
                                "cell-not-available",
                                "rl-failure-others",
                                "ue-rejection",
                                "resources-not-available-for-the-slice",
                                "amf-initiated-abnormal-release",
                                "release-due-to-pre-emption",
                                "plmn-not-served-by-the-gNB-CU",
                                "multiple-drb-id-instances",
                                "unknown-drb-id"};
  return convert_enum_idx(names, 20, value, "cause_radio_network_e");
}

// CauseTransport ::= ENUMERATED
const char* cause_transport_opts::to_string() const
{
  static const char* names[] = {"unspecified", "transport-resource-unavailable"};
  return convert_enum_idx(names, 2, value, "cause_transport_e");
}

// Cause ::= CHOICE
void cause_c::destroy_()
{
  switch (type_) {
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<cause_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void cause_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::radio_network:
      break;
    case types::transport:
      break;
    case types::protocol:
      break;
    case types::misc:
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<cause_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cause_c");
  }
}
cause_c::cause_c(const cause_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::radio_network:
      c.init(other.c.get<cause_radio_network_e>());
      break;
    case types::transport:
      c.init(other.c.get<cause_transport_e>());
      break;
    case types::protocol:
      c.init(other.c.get<cause_protocol_e>());
      break;
    case types::misc:
      c.init(other.c.get<cause_misc_e>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<cause_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cause_c");
  }
}
cause_c& cause_c::operator=(const cause_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::radio_network:
      c.set(other.c.get<cause_radio_network_e>());
      break;
    case types::transport:
      c.set(other.c.get<cause_transport_e>());
      break;
    case types::protocol:
      c.set(other.c.get<cause_protocol_e>());
      break;
    case types::misc:
      c.set(other.c.get<cause_misc_e>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<cause_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cause_c");
  }

  return *this;
}
cause_radio_network_e& cause_c::set_radio_network()
{
  set(types::radio_network);
  return c.get<cause_radio_network_e>();
}
cause_transport_e& cause_c::set_transport()
{
  set(types::transport);
  return c.get<cause_transport_e>();
}
cause_protocol_e& cause_c::set_protocol()
{
  set(types::protocol);
  return c.get<cause_protocol_e>();
}
cause_misc_e& cause_c::set_misc()
{
  set(types::misc);
  return c.get<cause_misc_e>();
}
protocol_ie_single_container_s<cause_ext_ies_o>& cause_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<cause_ext_ies_o>>();
}
void cause_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::radio_network:
      j.write_str("radioNetwork", c.get<cause_radio_network_e>().to_string());
      break;
    case types::transport:
      j.write_str("transport", c.get<cause_transport_e>().to_string());
      break;
    case types::protocol:
      j.write_str("protocol", c.get<cause_protocol_e>().to_string());
      break;
    case types::misc:
      j.write_str("misc", c.get<cause_misc_e>().to_string());
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<cause_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "cause_c");
  }
  j.end_obj();
}
SRSASN_CODE cause_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::radio_network:
      HANDLE_CODE(c.get<cause_radio_network_e>().pack(bref));
      break;
    case types::transport:
      HANDLE_CODE(c.get<cause_transport_e>().pack(bref));
      break;
    case types::protocol:
      HANDLE_CODE(c.get<cause_protocol_e>().pack(bref));
      break;
    case types::misc:
      HANDLE_CODE(c.get<cause_misc_e>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<cause_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cause_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cause_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::radio_network:
      HANDLE_CODE(c.get<cause_radio_network_e>().unpack(bref));
      break;
    case types::transport:
      HANDLE_CODE(c.get<cause_transport_e>().unpack(bref));
      break;
    case types::protocol:
      HANDLE_CODE(c.get<cause_protocol_e>().unpack(bref));
      break;
    case types::misc:
      HANDLE_CODE(c.get<cause_misc_e>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<cause_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cause_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cause_c::types_opts::to_string() const
{
  static const char* names[] = {"radioNetwork", "transport", "protocol", "misc", "choice-extension"};
  return convert_enum_idx(names, 5, value, "cause_c::types");
}
uint8_t cause_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {2};
  return map_enum_number(numbers, 1, value, "cause_c::types");
}

// CellSize ::= ENUMERATED
const char* cell_size_opts::to_string() const
{
  static const char* names[] = {"verysmall", "small", "medium", "large"};
  return convert_enum_idx(names, 4, value, "cell_size_e");
}

// CellType ::= SEQUENCE
SRSASN_CODE cell_type_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(cell_size.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_type_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(cell_size.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cell_type_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("cellSize", cell_size.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-Broadcast-Cancelled-Item ::= SEQUENCE
SRSASN_CODE cells_broadcast_cancelled_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(pack_integer(bref, nof_broadcasts, (uint32_t)0u, (uint32_t)65535u, false, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_broadcast_cancelled_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  HANDLE_CODE(unpack_integer(nof_broadcasts, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_broadcast_cancelled_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  j.write_int("numberOfBroadcasts", nof_broadcasts);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-Broadcast-Cancelled-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_broadcast_cancelled_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {151};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_broadcast_cancelled_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 151 == id;
}
crit_e cells_broadcast_cancelled_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 151) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_broadcast_cancelled_list_item_ies_o::value_c
cells_broadcast_cancelled_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 151) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_broadcast_cancelled_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 151) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_broadcast_cancelled_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Broadcast-Cancelled-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_broadcast_cancelled_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_broadcast_cancelled_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_broadcast_cancelled_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-Broadcast-Cancelled-Item"};
  return convert_enum_idx(names, 1, value, "cells_broadcast_cancelled_list_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_broadcast_cancelled_list_item_ies_o>;

// Cells-Broadcast-Completed-Item ::= SEQUENCE
SRSASN_CODE cells_broadcast_completed_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_broadcast_completed_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_broadcast_completed_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-Broadcast-Completed-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_broadcast_completed_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {147};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_broadcast_completed_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 147 == id;
}
crit_e cells_broadcast_completed_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 147) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_broadcast_completed_list_item_ies_o::value_c
cells_broadcast_completed_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 147) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_broadcast_completed_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 147) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_broadcast_completed_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Broadcast-Completed-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_broadcast_completed_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_broadcast_completed_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_broadcast_completed_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-Broadcast-Completed-Item"};
  return convert_enum_idx(names, 1, value, "cells_broadcast_completed_list_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_broadcast_completed_list_item_ies_o>;

// Cells-Failed-to-be-Activated-List-Item ::= SEQUENCE
SRSASN_CODE cells_failed_to_be_activ_list_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_failed_to_be_activ_list_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  HANDLE_CODE(cause.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_failed_to_be_activ_list_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  j.write_fieldname("cause");
  cause.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-Failed-to-be-Activated-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_failed_to_be_activ_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {2};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_failed_to_be_activ_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 2 == id;
}
crit_e cells_failed_to_be_activ_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 2) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_failed_to_be_activ_list_item_ies_o::value_c
cells_failed_to_be_activ_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 2) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_failed_to_be_activ_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 2) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_failed_to_be_activ_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Failed-to-be-Activated-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_failed_to_be_activ_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_failed_to_be_activ_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_failed_to_be_activ_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-Failed-to-be-Activated-List-Item"};
  return convert_enum_idx(names, 1, value, "cells_failed_to_be_activ_list_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_failed_to_be_activ_list_item_ies_o>;

// Service-State ::= ENUMERATED
const char* service_state_opts::to_string() const
{
  static const char* names[] = {"in-service", "out-of-service"};
  return convert_enum_idx(names, 2, value, "service_state_e");
}

// Service-Status ::= SEQUENCE
SRSASN_CODE service_status_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(switching_off_ongoing_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(service_state.pack(bref));
  if (switching_off_ongoing_present) {
    HANDLE_CODE(switching_off_ongoing.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE service_status_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(switching_off_ongoing_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(service_state.unpack(bref));
  if (switching_off_ongoing_present) {
    HANDLE_CODE(switching_off_ongoing.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void service_status_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("service-state", service_state.to_string());
  if (switching_off_ongoing_present) {
    j.write_str("switchingOffOngoing", "true");
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

const char* service_status_s::switching_off_ongoing_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "service_status_s::switching_off_ongoing_e_");
}

// Cells-Status-Item ::= SEQUENCE
SRSASN_CODE cells_status_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(service_status.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_status_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  HANDLE_CODE(service_status.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_status_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  j.write_fieldname("service-status");
  service_status.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-Status-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_status_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {88};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_status_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 88 == id;
}
crit_e cells_status_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 88) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_status_item_ies_o::value_c cells_status_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 88) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_status_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 88) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_status_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-Status-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_status_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_status_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_status_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-Status-Item"};
  return convert_enum_idx(names, 1, value, "cells_status_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_status_item_ies_o>;

// Cells-To-Be-Broadcast-Item ::= SEQUENCE
SRSASN_CODE cells_to_be_broadcast_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_broadcast_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_to_be_broadcast_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-To-Be-Broadcast-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_broadcast_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {145};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_broadcast_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 145 == id;
}
crit_e cells_to_be_broadcast_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 145) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_broadcast_list_item_ies_o::value_c cells_to_be_broadcast_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 145) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_broadcast_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 145) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_broadcast_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-To-Be-Broadcast-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_broadcast_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_broadcast_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_to_be_broadcast_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-To-Be-Broadcast-Item"};
  return convert_enum_idx(names, 1, value, "cells_to_be_broadcast_list_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_broadcast_list_item_ies_o>;

// AreaScope ::= ENUMERATED
const char* area_scope_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "area_scope_e");
}

// SibtypetobeupdatedListItem-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t sibtypetobeupd_list_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {240};
  return map_enum_number(names, 1, idx, "id");
}
bool sibtypetobeupd_list_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 240 == id;
}
crit_e sibtypetobeupd_list_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 240) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
sibtypetobeupd_list_item_ext_ies_o::ext_c sibtypetobeupd_list_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 240) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sibtypetobeupd_list_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 240) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void sibtypetobeupd_list_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("AreaScope", "true");
  j.end_obj();
}
SRSASN_CODE sibtypetobeupd_list_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE sibtypetobeupd_list_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* sibtypetobeupd_list_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"AreaScope"};
  return convert_enum_idx(names, 1, value, "sibtypetobeupd_list_item_ext_ies_o::ext_c::types");
}

// GNB-CUSystemInformation-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t gnb_cu_sys_info_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {239};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_sys_info_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 239 == id;
}
crit_e gnb_cu_sys_info_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 239) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_sys_info_ext_ies_o::ext_c gnb_cu_sys_info_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 239) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_sys_info_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 239) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void gnb_cu_sys_info_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("BIT STRING", c.to_string());
  j.end_obj();
}
SRSASN_CODE gnb_cu_sys_info_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_sys_info_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_cu_sys_info_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"BIT STRING"};
  return convert_enum_idx(names, 1, value, "gnb_cu_sys_info_ext_ies_o::ext_c::types");
}

// SibtypetobeupdatedListItem ::= SEQUENCE
SRSASN_CODE sibtypetobeupd_list_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, sib_type, (uint8_t)2u, (uint8_t)32u, true, true));
  HANDLE_CODE(sib_msg.pack(bref));
  HANDLE_CODE(pack_integer(bref, value_tag, (uint8_t)0u, (uint8_t)31u, true, true));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sibtypetobeupd_list_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(sib_type, bref, (uint8_t)2u, (uint8_t)32u, true, true));
  HANDLE_CODE(sib_msg.unpack(bref));
  HANDLE_CODE(unpack_integer(value_tag, bref, (uint8_t)0u, (uint8_t)31u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void sibtypetobeupd_list_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sIBtype", sib_type);
  j.write_str("sIBmessage", sib_msg.to_string());
  j.write_int("valueTag", value_tag);
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// GNB-CUSystemInformation ::= SEQUENCE
SRSASN_CODE gnb_cu_sys_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, sibtypetobeupdlist, 1, 32, true));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_sys_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(sibtypetobeupdlist, bref, 1, 32, true));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void gnb_cu_sys_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("sibtypetobeupdatedlist");
  for (const auto& e1 : sibtypetobeupdlist) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// Cells-to-be-Activated-List-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t cells_to_be_activ_list_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {118, 179, 197};
  return map_enum_number(names, 3, idx, "id");
}
bool cells_to_be_activ_list_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {118, 179, 197};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e cells_to_be_activ_list_item_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 118:
      return crit_e::reject;
    case 179:
      return crit_e::ignore;
    case 197:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
cells_to_be_activ_list_item_ext_ies_o::ext_c cells_to_be_activ_list_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 118:
      ret.set(ext_c::types::gnb_cu_sys_info);
      break;
    case 179:
      ret.set(ext_c::types::available_plmn_list);
      break;
    case 197:
      ret.set(ext_c::types::extended_available_plmn_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_activ_list_item_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 118:
      return presence_e::optional;
    case 179:
      return presence_e::optional;
    case 197:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void cells_to_be_activ_list_item_ext_ies_o::ext_c::destroy_()
{
  switch (type_) {
    case types::gnb_cu_sys_info:
      c.destroy<gnb_cu_sys_info_s>();
      break;
    case types::available_plmn_list:
      c.destroy<available_plmn_list_l>();
      break;
    case types::extended_available_plmn_list:
      c.destroy<extended_available_plmn_list_l>();
      break;
    default:
      break;
  }
}
void cells_to_be_activ_list_item_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_sys_info:
      c.init<gnb_cu_sys_info_s>();
      break;
    case types::available_plmn_list:
      c.init<available_plmn_list_l>();
      break;
    case types::extended_available_plmn_list:
      c.init<extended_available_plmn_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cells_to_be_activ_list_item_ext_ies_o::ext_c");
  }
}
cells_to_be_activ_list_item_ext_ies_o::ext_c::ext_c(const cells_to_be_activ_list_item_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_sys_info:
      c.init(other.c.get<gnb_cu_sys_info_s>());
      break;
    case types::available_plmn_list:
      c.init(other.c.get<available_plmn_list_l>());
      break;
    case types::extended_available_plmn_list:
      c.init(other.c.get<extended_available_plmn_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cells_to_be_activ_list_item_ext_ies_o::ext_c");
  }
}
cells_to_be_activ_list_item_ext_ies_o::ext_c&
cells_to_be_activ_list_item_ext_ies_o::ext_c::operator=(const cells_to_be_activ_list_item_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_sys_info:
      c.set(other.c.get<gnb_cu_sys_info_s>());
      break;
    case types::available_plmn_list:
      c.set(other.c.get<available_plmn_list_l>());
      break;
    case types::extended_available_plmn_list:
      c.set(other.c.get<extended_available_plmn_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cells_to_be_activ_list_item_ext_ies_o::ext_c");
  }

  return *this;
}
gnb_cu_sys_info_s& cells_to_be_activ_list_item_ext_ies_o::ext_c::gnb_cu_sys_info()
{
  assert_choice_type(types::gnb_cu_sys_info, type_, "Extension");
  return c.get<gnb_cu_sys_info_s>();
}
available_plmn_list_l& cells_to_be_activ_list_item_ext_ies_o::ext_c::available_plmn_list()
{
  assert_choice_type(types::available_plmn_list, type_, "Extension");
  return c.get<available_plmn_list_l>();
}
extended_available_plmn_list_l& cells_to_be_activ_list_item_ext_ies_o::ext_c::extended_available_plmn_list()
{
  assert_choice_type(types::extended_available_plmn_list, type_, "Extension");
  return c.get<extended_available_plmn_list_l>();
}
const gnb_cu_sys_info_s& cells_to_be_activ_list_item_ext_ies_o::ext_c::gnb_cu_sys_info() const
{
  assert_choice_type(types::gnb_cu_sys_info, type_, "Extension");
  return c.get<gnb_cu_sys_info_s>();
}
const available_plmn_list_l& cells_to_be_activ_list_item_ext_ies_o::ext_c::available_plmn_list() const
{
  assert_choice_type(types::available_plmn_list, type_, "Extension");
  return c.get<available_plmn_list_l>();
}
const extended_available_plmn_list_l& cells_to_be_activ_list_item_ext_ies_o::ext_c::extended_available_plmn_list() const
{
  assert_choice_type(types::extended_available_plmn_list, type_, "Extension");
  return c.get<extended_available_plmn_list_l>();
}
void cells_to_be_activ_list_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_sys_info:
      j.write_fieldname("GNB-CUSystemInformation");
      c.get<gnb_cu_sys_info_s>().to_json(j);
      break;
    case types::available_plmn_list:
      j.start_array("AvailablePLMNList");
      for (const auto& e1 : c.get<available_plmn_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::extended_available_plmn_list:
      j.start_array("ExtendedAvailablePLMN-List");
      for (const auto& e1 : c.get<extended_available_plmn_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "cells_to_be_activ_list_item_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE cells_to_be_activ_list_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_sys_info:
      HANDLE_CODE(c.get<gnb_cu_sys_info_s>().pack(bref));
      break;
    case types::available_plmn_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<available_plmn_list_l>(), 1, 6, true));
      break;
    case types::extended_available_plmn_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<extended_available_plmn_list_l>(), 1, 6, true));
      break;
    default:
      log_invalid_choice_id(type_, "cells_to_be_activ_list_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_activ_list_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_sys_info:
      HANDLE_CODE(c.get<gnb_cu_sys_info_s>().unpack(bref));
      break;
    case types::available_plmn_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<available_plmn_list_l>(), bref, 1, 6, true));
      break;
    case types::extended_available_plmn_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<extended_available_plmn_list_l>(), bref, 1, 6, true));
      break;
    default:
      log_invalid_choice_id(type_, "cells_to_be_activ_list_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* cells_to_be_activ_list_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-CUSystemInformation", "AvailablePLMNList", "ExtendedAvailablePLMN-List"};
  return convert_enum_idx(names, 3, value, "cells_to_be_activ_list_item_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ext_field_s<cells_to_be_activ_list_item_ext_ies_o>;

cells_to_be_activ_list_item_ext_ies_container::cells_to_be_activ_list_item_ext_ies_container() :
  gnb_cu_sys_info(118, crit_e::reject),
  available_plmn_list(179, crit_e::ignore),
  extended_available_plmn_list(197, crit_e::ignore)
{
}
SRSASN_CODE cells_to_be_activ_list_item_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += gnb_cu_sys_info_present ? 1 : 0;
  nof_ies += available_plmn_list_present ? 1 : 0;
  nof_ies += extended_available_plmn_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (gnb_cu_sys_info_present) {
    HANDLE_CODE(gnb_cu_sys_info.pack(bref));
  }
  if (available_plmn_list_present) {
    HANDLE_CODE(available_plmn_list.pack(bref));
  }
  if (extended_available_plmn_list_present) {
    HANDLE_CODE(extended_available_plmn_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_activ_list_item_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 118: {
        gnb_cu_sys_info_present = true;
        gnb_cu_sys_info.id      = id;
        HANDLE_CODE(gnb_cu_sys_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_sys_info.ext.unpack(bref));
        break;
      }
      case 179: {
        available_plmn_list_present = true;
        available_plmn_list.id      = id;
        HANDLE_CODE(available_plmn_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(available_plmn_list.ext.unpack(bref));
        break;
      }
      case 197: {
        extended_available_plmn_list_present = true;
        extended_available_plmn_list.id      = id;
        HANDLE_CODE(extended_available_plmn_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_available_plmn_list.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void cells_to_be_activ_list_item_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (gnb_cu_sys_info_present) {
    j.write_fieldname("");
    gnb_cu_sys_info.to_json(j);
  }
  if (available_plmn_list_present) {
    j.write_fieldname("");
    available_plmn_list.to_json(j);
  }
  if (extended_available_plmn_list_present) {
    j.write_fieldname("");
    extended_available_plmn_list.to_json(j);
  }
  j.end_obj();
}

// Cells-to-be-Activated-List-Item ::= SEQUENCE
SRSASN_CODE cells_to_be_activ_list_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(nr_pci_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  if (nr_pci_present) {
    HANDLE_CODE(pack_integer(bref, nr_pci, (uint16_t)0u, (uint16_t)1007u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_activ_list_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(nr_pci_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  if (nr_pci_present) {
    HANDLE_CODE(unpack_integer(nr_pci, bref, (uint16_t)0u, (uint16_t)1007u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_to_be_activ_list_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (nr_pci_present) {
    j.write_int("nRPCI", nr_pci);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-to-be-Activated-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_activ_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {4};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_activ_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 4 == id;
}
crit_e cells_to_be_activ_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 4) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_activ_list_item_ies_o::value_c cells_to_be_activ_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 4) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_activ_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 4) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_activ_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-to-be-Activated-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_activ_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_activ_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_to_be_activ_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-to-be-Activated-List-Item"};
  return convert_enum_idx(names, 1, value, "cells_to_be_activ_list_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_activ_list_item_ies_o>;

// CellBarred ::= ENUMERATED
const char* cell_barred_opts::to_string() const
{
  static const char* names[] = {"barred", "not-barred"};
  return convert_enum_idx(names, 2, value, "cell_barred_e");
}

// Cells-to-be-Barred-Item ::= SEQUENCE
SRSASN_CODE cells_to_be_barred_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(cell_barred.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_barred_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  HANDLE_CODE(cell_barred.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_to_be_barred_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  j.write_str("cellBarred", cell_barred.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-to-be-Barred-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_barred_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {130};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_barred_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 130 == id;
}
crit_e cells_to_be_barred_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 130) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_barred_item_ies_o::value_c cells_to_be_barred_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 130) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_barred_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 130) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_barred_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-to-be-Barred-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_barred_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_barred_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_to_be_barred_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-to-be-Barred-Item"};
  return convert_enum_idx(names, 1, value, "cells_to_be_barred_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_barred_item_ies_o>;

// Cells-to-be-Deactivated-List-Item ::= SEQUENCE
SRSASN_CODE cells_to_be_deactiv_list_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_deactiv_list_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void cells_to_be_deactiv_list_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cells-to-be-Deactivated-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cells_to_be_deactiv_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {6};
  return map_enum_number(names, 1, idx, "id");
}
bool cells_to_be_deactiv_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 6 == id;
}
crit_e cells_to_be_deactiv_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 6) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
cells_to_be_deactiv_list_item_ies_o::value_c cells_to_be_deactiv_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 6) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cells_to_be_deactiv_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 6) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void cells_to_be_deactiv_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Cells-to-be-Deactivated-List-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE cells_to_be_deactiv_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE cells_to_be_deactiv_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* cells_to_be_deactiv_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Cells-to-be-Deactivated-List-Item"};
  return convert_enum_idx(names, 1, value, "cells_to_be_deactiv_list_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<cells_to_be_deactiv_list_item_ies_o>;

// TypeOfError ::= ENUMERATED
const char* type_of_error_opts::to_string() const
{
  static const char* names[] = {"not-understood", "missing"};
  return convert_enum_idx(names, 2, value, "type_of_error_e");
}

// CriticalityDiagnostics-IE-Item ::= SEQUENCE
SRSASN_CODE crit_diagnostics_ie_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(ie_crit.pack(bref));
  HANDLE_CODE(pack_integer(bref, ie_id, (uint32_t)0u, (uint32_t)65535u, false, true));
  HANDLE_CODE(type_of_error.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE crit_diagnostics_ie_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(ie_crit.unpack(bref));
  HANDLE_CODE(unpack_integer(ie_id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
  HANDLE_CODE(type_of_error.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void crit_diagnostics_ie_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("iECriticality", ie_crit.to_string());
  j.write_int("iE-ID", ie_id);
  j.write_str("typeOfError", type_of_error.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// TriggeringMessage ::= ENUMERATED
const char* trigger_msg_opts::to_string() const
{
  static const char* names[] = {"initiating-message", "successful-outcome", "unsuccessful-outcome"};
  return convert_enum_idx(names, 3, value, "trigger_msg_e");
}

// CriticalityDiagnostics ::= SEQUENCE
SRSASN_CODE crit_diagnostics_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(proc_code_present, 1));
  HANDLE_CODE(bref.pack(trigger_msg_present, 1));
  HANDLE_CODE(bref.pack(proc_crit_present, 1));
  HANDLE_CODE(bref.pack(transaction_id_present, 1));
  HANDLE_CODE(bref.pack(ies_crit_diagnostics.size() > 0, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  if (proc_code_present) {
    HANDLE_CODE(pack_integer(bref, proc_code, (uint16_t)0u, (uint16_t)255u, false, true));
  }
  if (trigger_msg_present) {
    HANDLE_CODE(trigger_msg.pack(bref));
  }
  if (proc_crit_present) {
    HANDLE_CODE(proc_crit.pack(bref));
  }
  if (transaction_id_present) {
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (ies_crit_diagnostics.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ies_crit_diagnostics, 1, 256, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE crit_diagnostics_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(proc_code_present, 1));
  HANDLE_CODE(bref.unpack(trigger_msg_present, 1));
  HANDLE_CODE(bref.unpack(proc_crit_present, 1));
  HANDLE_CODE(bref.unpack(transaction_id_present, 1));
  bool ies_crit_diagnostics_present;
  HANDLE_CODE(bref.unpack(ies_crit_diagnostics_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  if (proc_code_present) {
    HANDLE_CODE(unpack_integer(proc_code, bref, (uint16_t)0u, (uint16_t)255u, false, true));
  }
  if (trigger_msg_present) {
    HANDLE_CODE(trigger_msg.unpack(bref));
  }
  if (proc_crit_present) {
    HANDLE_CODE(proc_crit.unpack(bref));
  }
  if (transaction_id_present) {
    HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (ies_crit_diagnostics_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ies_crit_diagnostics, bref, 1, 256, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void crit_diagnostics_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (proc_code_present) {
    j.write_int("procedureCode", proc_code);
  }
  if (trigger_msg_present) {
    j.write_str("triggeringMessage", trigger_msg.to_string());
  }
  if (proc_crit_present) {
    j.write_str("procedureCriticality", proc_crit.to_string());
  }
  if (transaction_id_present) {
    j.write_int("transactionID", transaction_id);
  }
  if (ies_crit_diagnostics.size() > 0) {
    j.start_array("iEsCriticalityDiagnostics");
    for (const auto& e1 : ies_crit_diagnostics) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// ExecuteDuplication ::= ENUMERATED
const char* execute_dupl_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "execute_dupl_e");
}

// RAT-FrequencyPriorityInformation ::= CHOICE
void rat_freq_prio_info_c::destroy_()
{
  switch (type_) {
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void rat_freq_prio_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::endc:
      break;
    case types::ngran:
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rat_freq_prio_info_c");
  }
}
rat_freq_prio_info_c::rat_freq_prio_info_c(const rat_freq_prio_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::endc:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ngran:
      c.init(other.c.get<uint16_t>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rat_freq_prio_info_c");
  }
}
rat_freq_prio_info_c& rat_freq_prio_info_c::operator=(const rat_freq_prio_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::endc:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ngran:
      c.set(other.c.get<uint16_t>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rat_freq_prio_info_c");
  }

  return *this;
}
uint16_t& rat_freq_prio_info_c::set_endc()
{
  set(types::endc);
  return c.get<uint16_t>();
}
uint16_t& rat_freq_prio_info_c::set_ngran()
{
  set(types::ngran);
  return c.get<uint16_t>();
}
protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>& rat_freq_prio_info_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>();
}
void rat_freq_prio_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::endc:
      j.write_int("eNDC", c.get<uint16_t>());
      break;
    case types::ngran:
      j.write_int("nGRAN", c.get<uint16_t>());
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "rat_freq_prio_info_c");
  }
  j.end_obj();
}
SRSASN_CODE rat_freq_prio_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::endc:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ngran:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rat_freq_prio_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rat_freq_prio_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::endc:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ngran:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<rat_freq_prio_info_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "rat_freq_prio_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rat_freq_prio_info_c::types_opts::to_string() const
{
  static const char* names[] = {"eNDC", "nGRAN", "choice-extension"};
  return convert_enum_idx(names, 3, value, "rat_freq_prio_info_c::types");
}

// RRCDeliveryStatusRequest ::= ENUMERATED
const char* rrc_delivery_status_request_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "rrc_delivery_status_request_e");
}

// UEContextNotRetrievable ::= ENUMERATED
const char* ue_context_not_retrievable_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "ue_context_not_retrievable_e");
}

// DLRRCMessageTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t dl_rrc_msg_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 47, 64, 109, 50, 108, 184, 222, 218, 221, 217};
  return map_enum_number(names, 12, idx, "id");
}
bool dl_rrc_msg_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 47, 64, 109, 50, 108, 184, 222, 218, 221, 217};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e dl_rrc_msg_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 47:
      return crit_e::reject;
    case 64:
      return crit_e::reject;
    case 109:
      return crit_e::ignore;
    case 50:
      return crit_e::reject;
    case 108:
      return crit_e::reject;
    case 184:
      return crit_e::ignore;
    case 222:
      return crit_e::reject;
    case 218:
      return crit_e::reject;
    case 221:
      return crit_e::ignore;
    case 217:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
dl_rrc_msg_transfer_ies_o::value_c dl_rrc_msg_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 47:
      ret.set(value_c::types::old_gnb_du_ue_f1ap_id);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 108:
      ret.set(value_c::types::rat_freq_prio_info);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    case 222:
      ret.set(value_c::types::ue_context_not_retrievable);
      break;
    case 218:
      ret.set(value_c::types::redirected_rrc_msg);
      break;
    case 221:
      ret.set(value_c::types::plmn_assist_info_for_net_shar);
      break;
    case 217:
      ret.set(value_c::types::new_gnb_cu_ue_f1ap_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e dl_rrc_msg_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 47:
      return presence_e::optional;
    case 64:
      return presence_e::mandatory;
    case 109:
      return presence_e::optional;
    case 50:
      return presence_e::mandatory;
    case 108:
      return presence_e::optional;
    case 184:
      return presence_e::optional;
    case 222:
      return presence_e::optional;
    case 218:
      return presence_e::optional;
    case 221:
      return presence_e::optional;
    case 217:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void dl_rrc_msg_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::rat_freq_prio_info:
      c.destroy<rat_freq_prio_info_c>();
      break;
    case types::redirected_rrc_msg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::plmn_assist_info_for_net_shar:
      c.destroy<fixed_octstring<3, true>>();
      break;
    default:
      break;
  }
}
void dl_rrc_msg_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::old_gnb_du_ue_f1ap_id:
      break;
    case types::srb_id:
      break;
    case types::execute_dupl:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::rat_freq_prio_info:
      c.init<rat_freq_prio_info_c>();
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::ue_context_not_retrievable:
      break;
    case types::redirected_rrc_msg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::plmn_assist_info_for_net_shar:
      c.init<fixed_octstring<3, true>>();
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }
}
dl_rrc_msg_transfer_ies_o::value_c::value_c(const dl_rrc_msg_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rat_freq_prio_info:
      c.init(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::ue_context_not_retrievable:
      c.init(other.c.get<ue_context_not_retrievable_e>());
      break;
    case types::redirected_rrc_msg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::plmn_assist_info_for_net_shar:
      c.init(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }
}
dl_rrc_msg_transfer_ies_o::value_c&
dl_rrc_msg_transfer_ies_o::value_c::operator=(const dl_rrc_msg_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rat_freq_prio_info:
      c.set(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::ue_context_not_retrievable:
      c.set(other.c.get<ue_context_not_retrievable_e>());
      break;
    case types::redirected_rrc_msg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::plmn_assist_info_for_net_shar:
      c.set(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::old_gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& dl_rrc_msg_transfer_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
execute_dupl_e& dl_rrc_msg_transfer_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
rat_freq_prio_info_c& dl_rrc_msg_transfer_ies_o::value_c::rat_freq_prio_info()
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
rrc_delivery_status_request_e& dl_rrc_msg_transfer_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
ue_context_not_retrievable_e& dl_rrc_msg_transfer_ies_o::value_c::ue_context_not_retrievable()
{
  assert_choice_type(types::ue_context_not_retrievable, type_, "Value");
  return c.get<ue_context_not_retrievable_e>();
}
unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::redirected_rrc_msg()
{
  assert_choice_type(types::redirected_rrc_msg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
fixed_octstring<3, true>& dl_rrc_msg_transfer_ies_o::value_c::plmn_assist_info_for_net_shar()
{
  assert_choice_type(types::plmn_assist_info_for_net_shar, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
uint64_t& dl_rrc_msg_transfer_ies_o::value_c::new_gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::old_gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& dl_rrc_msg_transfer_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const execute_dupl_e& dl_rrc_msg_transfer_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const rat_freq_prio_info_c& dl_rrc_msg_transfer_ies_o::value_c::rat_freq_prio_info() const
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
const rrc_delivery_status_request_e& dl_rrc_msg_transfer_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const ue_context_not_retrievable_e& dl_rrc_msg_transfer_ies_o::value_c::ue_context_not_retrievable() const
{
  assert_choice_type(types::ue_context_not_retrievable, type_, "Value");
  return c.get<ue_context_not_retrievable_e>();
}
const unbounded_octstring<true>& dl_rrc_msg_transfer_ies_o::value_c::redirected_rrc_msg() const
{
  assert_choice_type(types::redirected_rrc_msg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const fixed_octstring<3, true>& dl_rrc_msg_transfer_ies_o::value_c::plmn_assist_info_for_net_shar() const
{
  assert_choice_type(types::plmn_assist_info_for_net_shar, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
const uint64_t& dl_rrc_msg_transfer_ies_o::value_c::new_gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
void dl_rrc_msg_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::rat_freq_prio_info:
      j.write_fieldname("RAT-FrequencyPriorityInformation");
      c.get<rat_freq_prio_info_c>().to_json(j);
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    case types::ue_context_not_retrievable:
      j.write_str("UEContextNotRetrievable", "true");
      break;
    case types::redirected_rrc_msg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::plmn_assist_info_for_net_shar:
      j.write_str("OCTET STRING", c.get<fixed_octstring<3, true>>().to_string());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE dl_rrc_msg_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().pack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    case types::ue_context_not_retrievable:
      HANDLE_CODE(c.get<ue_context_not_retrievable_e>().pack(bref));
      break;
    case types::redirected_rrc_msg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::plmn_assist_info_for_net_shar:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().pack(bref)));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_rrc_msg_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().unpack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    case types::ue_context_not_retrievable:
      HANDLE_CODE(c.get<ue_context_not_retrievable_e>().unpack(bref));
      break;
    case types::redirected_rrc_msg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::plmn_assist_info_for_net_shar:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().unpack(bref)));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "dl_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* dl_rrc_msg_transfer_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "INTEGER (0..3,...)",
                                "ExecuteDuplication",
                                "OCTET STRING",
                                "RAT-FrequencyPriorityInformation",
                                "RRCDeliveryStatusRequest",
                                "UEContextNotRetrievable",
                                "OCTET STRING",
                                "OCTET STRING",
                                "INTEGER (0..4294967295)"};
  return convert_enum_idx(names, 12, value, "dl_rrc_msg_transfer_ies_o::value_c::types");
}

template struct asn1::protocol_ie_field_s<dl_rrc_msg_transfer_ies_o>;

dl_rrc_msg_transfer_ies_container::dl_rrc_msg_transfer_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  old_gnb_du_ue_f1ap_id(47, crit_e::reject),
  srb_id(64, crit_e::reject),
  execute_dupl(109, crit_e::ignore),
  rrc_container(50, crit_e::reject),
  rat_freq_prio_info(108, crit_e::reject),
  rrc_delivery_status_request(184, crit_e::ignore),
  ue_context_not_retrievable(222, crit_e::reject),
  redirected_rrc_msg(218, crit_e::reject),
  plmn_assist_info_for_net_shar(221, crit_e::ignore),
  new_gnb_cu_ue_f1ap_id(217, crit_e::reject)
{
}
SRSASN_CODE dl_rrc_msg_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += old_gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += rat_freq_prio_info_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  nof_ies += ue_context_not_retrievable_present ? 1 : 0;
  nof_ies += redirected_rrc_msg_present ? 1 : 0;
  nof_ies += plmn_assist_info_for_net_shar_present ? 1 : 0;
  nof_ies += new_gnb_cu_ue_f1ap_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (old_gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(old_gnb_du_ue_f1ap_id.pack(bref));
  }
  HANDLE_CODE(srb_id.pack(bref));
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  HANDLE_CODE(rrc_container.pack(bref));
  if (rat_freq_prio_info_present) {
    HANDLE_CODE(rat_freq_prio_info.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }
  if (ue_context_not_retrievable_present) {
    HANDLE_CODE(ue_context_not_retrievable.pack(bref));
  }
  if (redirected_rrc_msg_present) {
    HANDLE_CODE(redirected_rrc_msg.pack(bref));
  }
  if (plmn_assist_info_for_net_shar_present) {
    HANDLE_CODE(plmn_assist_info_for_net_shar.pack(bref));
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(new_gnb_cu_ue_f1ap_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_rrc_msg_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 47: {
        old_gnb_du_ue_f1ap_id_present = true;
        old_gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 64: {
        nof_mandatory_ies--;
        srb_id.id = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 50: {
        nof_mandatory_ies--;
        rrc_container.id = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 108: {
        rat_freq_prio_info_present = true;
        rat_freq_prio_info.id      = id;
        HANDLE_CODE(rat_freq_prio_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rat_freq_prio_info.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      case 222: {
        ue_context_not_retrievable_present = true;
        ue_context_not_retrievable.id      = id;
        HANDLE_CODE(ue_context_not_retrievable.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_context_not_retrievable.value.unpack(bref));
        break;
      }
      case 218: {
        redirected_rrc_msg_present = true;
        redirected_rrc_msg.id      = id;
        HANDLE_CODE(redirected_rrc_msg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(redirected_rrc_msg.value.unpack(bref));
        break;
      }
      case 221: {
        plmn_assist_info_for_net_shar_present = true;
        plmn_assist_info_for_net_shar.id      = id;
        HANDLE_CODE(plmn_assist_info_for_net_shar.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(plmn_assist_info_for_net_shar.value.unpack(bref));
        break;
      }
      case 217: {
        new_gnb_cu_ue_f1ap_id_present = true;
        new_gnb_cu_ue_f1ap_id.id      = id;
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void dl_rrc_msg_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (old_gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    old_gnb_du_ue_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  srb_id.to_json(j);
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  j.write_fieldname("");
  rrc_container.to_json(j);
  if (rat_freq_prio_info_present) {
    j.write_fieldname("");
    rat_freq_prio_info.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  if (ue_context_not_retrievable_present) {
    j.write_fieldname("");
    ue_context_not_retrievable.to_json(j);
  }
  if (redirected_rrc_msg_present) {
    j.write_fieldname("");
    redirected_rrc_msg.to_json(j);
  }
  if (plmn_assist_info_for_net_shar_present) {
    j.write_fieldname("");
    plmn_assist_info_for_net_shar.to_json(j);
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    j.write_fieldname("");
    new_gnb_cu_ue_f1ap_id.to_json(j);
  }
  j.end_obj();
}

// GTPTunnel ::= SEQUENCE
SRSASN_CODE gtp_tunnel_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(transport_layer_address.pack(bref));
  HANDLE_CODE(gtp_teid.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gtp_tunnel_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(transport_layer_address.unpack(bref));
  HANDLE_CODE(gtp_teid.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gtp_tunnel_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("transportLayerAddress", transport_layer_address.to_string());
  j.write_str("gTP-TEID", gtp_teid.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// UPTransportLayerInformation ::= CHOICE
void up_transport_layer_info_c::destroy_()
{
  switch (type_) {
    case types::gtp_tunnel:
      c.destroy<gtp_tunnel_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void up_transport_layer_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gtp_tunnel:
      c.init<gtp_tunnel_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "up_transport_layer_info_c");
  }
}
up_transport_layer_info_c::up_transport_layer_info_c(const up_transport_layer_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gtp_tunnel:
      c.init(other.c.get<gtp_tunnel_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "up_transport_layer_info_c");
  }
}
up_transport_layer_info_c& up_transport_layer_info_c::operator=(const up_transport_layer_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gtp_tunnel:
      c.set(other.c.get<gtp_tunnel_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "up_transport_layer_info_c");
  }

  return *this;
}
gtp_tunnel_s& up_transport_layer_info_c::set_gtp_tunnel()
{
  set(types::gtp_tunnel);
  return c.get<gtp_tunnel_s>();
}
protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>& up_transport_layer_info_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>();
}
void up_transport_layer_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gtp_tunnel:
      j.write_fieldname("gTPTunnel");
      c.get<gtp_tunnel_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "up_transport_layer_info_c");
  }
  j.end_obj();
}
SRSASN_CODE up_transport_layer_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::gtp_tunnel:
      HANDLE_CODE(c.get<gtp_tunnel_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "up_transport_layer_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE up_transport_layer_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::gtp_tunnel:
      HANDLE_CODE(c.get<gtp_tunnel_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<up_transport_layer_info_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "up_transport_layer_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* up_transport_layer_info_c::types_opts::to_string() const
{
  static const char* names[] = {"gTPTunnel", "choice-extension"};
  return convert_enum_idx(names, 2, value, "up_transport_layer_info_c::types");
}

// DLUPTNLInformation-ToBeSetup-Item ::= SEQUENCE
SRSASN_CODE dl_up_tnl_info_to_be_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(dl_up_tnl_info.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dl_up_tnl_info_to_be_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(dl_up_tnl_info.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dl_up_tnl_info_to_be_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("dLUPTNLInformation");
  dl_up_tnl_info.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRB-Activity ::= ENUMERATED
const char* drb_activity_opts::to_string() const
{
  static const char* names[] = {"active", "not-active"};
  return convert_enum_idx(names, 2, value, "drb_activity_e");
}

// DRB-Activity-Item ::= SEQUENCE
SRSASN_CODE drb_activity_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(drb_activity_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (drb_activity_present) {
    HANDLE_CODE(drb_activity.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_activity_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(drb_activity_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (drb_activity_present) {
    HANDLE_CODE(drb_activity.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drb_activity_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (drb_activity_present) {
    j.write_str("dRB-Activity", drb_activity.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRB-Activity-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drb_activity_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {99};
  return map_enum_number(names, 1, idx, "id");
}
bool drb_activity_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 99 == id;
}
crit_e drb_activity_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 99) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drb_activity_item_ies_o::value_c drb_activity_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 99) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drb_activity_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 99) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drb_activity_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRB-Activity-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drb_activity_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_activity_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drb_activity_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRB-Activity-Item"};
  return convert_enum_idx(names, 1, value, "drb_activity_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drb_activity_item_ies_o>;

// PacketErrorRate ::= SEQUENCE
SRSASN_CODE packet_error_rate_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, per_scalar, (uint8_t)0u, (uint8_t)9u, true, true));
  HANDLE_CODE(pack_integer(bref, per_exponent, (uint8_t)0u, (uint8_t)9u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE packet_error_rate_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(per_scalar, bref, (uint8_t)0u, (uint8_t)9u, true, true));
  HANDLE_CODE(unpack_integer(per_exponent, bref, (uint8_t)0u, (uint8_t)9u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void packet_error_rate_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pER-Scalar", per_scalar);
  j.write_int("pER-Exponent", per_exponent);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Dynamic5QIDescriptor ::= SEQUENCE
SRSASN_CODE dyn_5qi_descriptor_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(five_qi_present, 1));
  HANDLE_CODE(bref.pack(delay_crit_present, 1));
  HANDLE_CODE(bref.pack(averaging_win_present, 1));
  HANDLE_CODE(bref.pack(max_data_burst_volume_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, qos_prio_level, (uint8_t)1u, (uint8_t)127u, false, true));
  HANDLE_CODE(pack_integer(bref, packet_delay_budget, (uint16_t)0u, (uint16_t)1023u, true, true));
  HANDLE_CODE(packet_error_rate.pack(bref));
  if (five_qi_present) {
    HANDLE_CODE(pack_integer(bref, five_qi, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (delay_crit_present) {
    HANDLE_CODE(delay_crit.pack(bref));
  }
  if (averaging_win_present) {
    HANDLE_CODE(pack_integer(bref, averaging_win, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (max_data_burst_volume_present) {
    HANDLE_CODE(pack_integer(bref, max_data_burst_volume, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE dyn_5qi_descriptor_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(five_qi_present, 1));
  HANDLE_CODE(bref.unpack(delay_crit_present, 1));
  HANDLE_CODE(bref.unpack(averaging_win_present, 1));
  HANDLE_CODE(bref.unpack(max_data_burst_volume_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(qos_prio_level, bref, (uint8_t)1u, (uint8_t)127u, false, true));
  HANDLE_CODE(unpack_integer(packet_delay_budget, bref, (uint16_t)0u, (uint16_t)1023u, true, true));
  HANDLE_CODE(packet_error_rate.unpack(bref));
  if (five_qi_present) {
    HANDLE_CODE(unpack_integer(five_qi, bref, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (delay_crit_present) {
    HANDLE_CODE(delay_crit.unpack(bref));
  }
  if (averaging_win_present) {
    HANDLE_CODE(unpack_integer(averaging_win, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (max_data_burst_volume_present) {
    HANDLE_CODE(unpack_integer(max_data_burst_volume, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void dyn_5qi_descriptor_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("qoSPriorityLevel", qos_prio_level);
  j.write_int("packetDelayBudget", packet_delay_budget);
  j.write_fieldname("packetErrorRate");
  packet_error_rate.to_json(j);
  if (five_qi_present) {
    j.write_int("fiveQI", five_qi);
  }
  if (delay_crit_present) {
    j.write_str("delayCritical", delay_crit.to_string());
  }
  if (averaging_win_present) {
    j.write_int("averagingWindow", averaging_win);
  }
  if (max_data_burst_volume_present) {
    j.write_int("maxDataBurstVolume", max_data_burst_volume);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

const char* dyn_5qi_descriptor_s::delay_crit_opts::to_string() const
{
  static const char* names[] = {"delay-critical", "non-delay-critical"};
  return convert_enum_idx(names, 2, value, "dyn_5qi_descriptor_s::delay_crit_e_");
}

// NonDynamic5QIDescriptor ::= SEQUENCE
SRSASN_CODE non_dyn_5qi_descriptor_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(qos_prio_level_present, 1));
  HANDLE_CODE(bref.pack(averaging_win_present, 1));
  HANDLE_CODE(bref.pack(max_data_burst_volume_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, five_qi, (uint16_t)0u, (uint16_t)255u, true, true));
  if (qos_prio_level_present) {
    HANDLE_CODE(pack_integer(bref, qos_prio_level, (uint8_t)1u, (uint8_t)127u, false, true));
  }
  if (averaging_win_present) {
    HANDLE_CODE(pack_integer(bref, averaging_win, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (max_data_burst_volume_present) {
    HANDLE_CODE(pack_integer(bref, max_data_burst_volume, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE non_dyn_5qi_descriptor_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(qos_prio_level_present, 1));
  HANDLE_CODE(bref.unpack(averaging_win_present, 1));
  HANDLE_CODE(bref.unpack(max_data_burst_volume_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(five_qi, bref, (uint16_t)0u, (uint16_t)255u, true, true));
  if (qos_prio_level_present) {
    HANDLE_CODE(unpack_integer(qos_prio_level, bref, (uint8_t)1u, (uint8_t)127u, false, true));
  }
  if (averaging_win_present) {
    HANDLE_CODE(unpack_integer(averaging_win, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (max_data_burst_volume_present) {
    HANDLE_CODE(unpack_integer(max_data_burst_volume, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void non_dyn_5qi_descriptor_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("fiveQI", five_qi);
  if (qos_prio_level_present) {
    j.write_int("qoSPriorityLevel", qos_prio_level);
  }
  if (averaging_win_present) {
    j.write_int("averagingWindow", averaging_win);
  }
  if (max_data_burst_volume_present) {
    j.write_int("maxDataBurstVolume", max_data_burst_volume);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// GBR-QoSFlowInformation ::= SEQUENCE
SRSASN_CODE gbr_qos_flow_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(max_packet_loss_rate_dl_present, 1));
  HANDLE_CODE(bref.pack(max_packet_loss_rate_ul_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, max_flow_bit_rate_dl, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(pack_integer(bref, max_flow_bit_rate_ul, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(pack_integer(bref, guaranteed_flow_bit_rate_dl, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(pack_integer(bref, guaranteed_flow_bit_rate_ul, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  if (max_packet_loss_rate_dl_present) {
    HANDLE_CODE(pack_integer(bref, max_packet_loss_rate_dl, (uint16_t)0u, (uint16_t)1000u, false, true));
  }
  if (max_packet_loss_rate_ul_present) {
    HANDLE_CODE(pack_integer(bref, max_packet_loss_rate_ul, (uint16_t)0u, (uint16_t)1000u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gbr_qos_flow_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(max_packet_loss_rate_dl_present, 1));
  HANDLE_CODE(bref.unpack(max_packet_loss_rate_ul_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(max_flow_bit_rate_dl, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(unpack_integer(max_flow_bit_rate_ul, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(unpack_integer(guaranteed_flow_bit_rate_dl, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(unpack_integer(guaranteed_flow_bit_rate_ul, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  if (max_packet_loss_rate_dl_present) {
    HANDLE_CODE(unpack_integer(max_packet_loss_rate_dl, bref, (uint16_t)0u, (uint16_t)1000u, false, true));
  }
  if (max_packet_loss_rate_ul_present) {
    HANDLE_CODE(unpack_integer(max_packet_loss_rate_ul, bref, (uint16_t)0u, (uint16_t)1000u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gbr_qos_flow_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxFlowBitRateDownlink", max_flow_bit_rate_dl);
  j.write_int("maxFlowBitRateUplink", max_flow_bit_rate_ul);
  j.write_int("guaranteedFlowBitRateDownlink", guaranteed_flow_bit_rate_dl);
  j.write_int("guaranteedFlowBitRateUplink", guaranteed_flow_bit_rate_ul);
  if (max_packet_loss_rate_dl_present) {
    j.write_int("maxPacketLossRateDownlink", max_packet_loss_rate_dl);
  }
  if (max_packet_loss_rate_ul_present) {
    j.write_int("maxPacketLossRateUplink", max_packet_loss_rate_ul);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// NGRANAllocationAndRetentionPriority ::= SEQUENCE
SRSASN_CODE ngran_alloc_and_retention_prio_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, prio_level, (uint8_t)0u, (uint8_t)15u, false, true));
  HANDLE_CODE(pre_emption_cap.pack(bref));
  HANDLE_CODE(pre_emption_vulnerability.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ngran_alloc_and_retention_prio_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(prio_level, bref, (uint8_t)0u, (uint8_t)15u, false, true));
  HANDLE_CODE(pre_emption_cap.unpack(bref));
  HANDLE_CODE(pre_emption_vulnerability.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ngran_alloc_and_retention_prio_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("priorityLevel", prio_level);
  j.write_str("pre-emptionCapability", pre_emption_cap.to_string());
  j.write_str("pre-emptionVulnerability", pre_emption_vulnerability.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// QoS-Characteristics ::= CHOICE
void qos_characteristics_c::destroy_()
{
  switch (type_) {
    case types::non_dyn_5qi:
      c.destroy<non_dyn_5qi_descriptor_s>();
      break;
    case types::dyn_5qi:
      c.destroy<dyn_5qi_descriptor_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void qos_characteristics_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::non_dyn_5qi:
      c.init<non_dyn_5qi_descriptor_s>();
      break;
    case types::dyn_5qi:
      c.init<dyn_5qi_descriptor_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_characteristics_c");
  }
}
qos_characteristics_c::qos_characteristics_c(const qos_characteristics_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::non_dyn_5qi:
      c.init(other.c.get<non_dyn_5qi_descriptor_s>());
      break;
    case types::dyn_5qi:
      c.init(other.c.get<dyn_5qi_descriptor_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_characteristics_c");
  }
}
qos_characteristics_c& qos_characteristics_c::operator=(const qos_characteristics_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::non_dyn_5qi:
      c.set(other.c.get<non_dyn_5qi_descriptor_s>());
      break;
    case types::dyn_5qi:
      c.set(other.c.get<dyn_5qi_descriptor_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_characteristics_c");
  }

  return *this;
}
non_dyn_5qi_descriptor_s& qos_characteristics_c::set_non_dyn_5qi()
{
  set(types::non_dyn_5qi);
  return c.get<non_dyn_5qi_descriptor_s>();
}
dyn_5qi_descriptor_s& qos_characteristics_c::set_dyn_5qi()
{
  set(types::dyn_5qi);
  return c.get<dyn_5qi_descriptor_s>();
}
protocol_ie_single_container_s<qos_characteristics_ext_ies_o>& qos_characteristics_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>();
}
void qos_characteristics_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::non_dyn_5qi:
      j.write_fieldname("non-Dynamic-5QI");
      c.get<non_dyn_5qi_descriptor_s>().to_json(j);
      break;
    case types::dyn_5qi:
      j.write_fieldname("dynamic-5QI");
      c.get<dyn_5qi_descriptor_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "qos_characteristics_c");
  }
  j.end_obj();
}
SRSASN_CODE qos_characteristics_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::non_dyn_5qi:
      HANDLE_CODE(c.get<non_dyn_5qi_descriptor_s>().pack(bref));
      break;
    case types::dyn_5qi:
      HANDLE_CODE(c.get<dyn_5qi_descriptor_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qos_characteristics_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE qos_characteristics_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::non_dyn_5qi:
      HANDLE_CODE(c.get<non_dyn_5qi_descriptor_s>().unpack(bref));
      break;
    case types::dyn_5qi:
      HANDLE_CODE(c.get<dyn_5qi_descriptor_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<qos_characteristics_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qos_characteristics_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* qos_characteristics_c::types_opts::to_string() const
{
  static const char* names[] = {"non-Dynamic-5QI", "dynamic-5QI", "choice-extension"};
  return convert_enum_idx(names, 3, value, "qos_characteristics_c::types");
}

// QoSFlowLevelQoSParameters-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t qos_flow_level_qos_params_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {180, 181};
  return map_enum_number(names, 2, idx, "id");
}
bool qos_flow_level_qos_params_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {180, 181};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e qos_flow_level_qos_params_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 180:
      return crit_e::ignore;
    case 181:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
qos_flow_level_qos_params_ext_ies_o::ext_c qos_flow_level_qos_params_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 180:
      ret.set(ext_c::types::pdu_session_id);
      break;
    case 181:
      ret.set(ext_c::types::ul_pdu_session_aggr_max_bit_rate);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e qos_flow_level_qos_params_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 180:
      return presence_e::optional;
    case 181:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void qos_flow_level_qos_params_ext_ies_o::ext_c::destroy_() {}
void qos_flow_level_qos_params_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
qos_flow_level_qos_params_ext_ies_o::ext_c::ext_c(const qos_flow_level_qos_params_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::pdu_session_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ul_pdu_session_aggr_max_bit_rate:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_flow_level_qos_params_ext_ies_o::ext_c");
  }
}
qos_flow_level_qos_params_ext_ies_o::ext_c&
qos_flow_level_qos_params_ext_ies_o::ext_c::operator=(const qos_flow_level_qos_params_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::pdu_session_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ul_pdu_session_aggr_max_bit_rate:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_flow_level_qos_params_ext_ies_o::ext_c");
  }

  return *this;
}
uint16_t& qos_flow_level_qos_params_ext_ies_o::ext_c::pdu_session_id()
{
  assert_choice_type(types::pdu_session_id, type_, "Extension");
  return c.get<uint16_t>();
}
uint64_t& qos_flow_level_qos_params_ext_ies_o::ext_c::ul_pdu_session_aggr_max_bit_rate()
{
  assert_choice_type(types::ul_pdu_session_aggr_max_bit_rate, type_, "Extension");
  return c.get<uint64_t>();
}
const uint16_t& qos_flow_level_qos_params_ext_ies_o::ext_c::pdu_session_id() const
{
  assert_choice_type(types::pdu_session_id, type_, "Extension");
  return c.get<uint16_t>();
}
const uint64_t& qos_flow_level_qos_params_ext_ies_o::ext_c::ul_pdu_session_aggr_max_bit_rate() const
{
  assert_choice_type(types::ul_pdu_session_aggr_max_bit_rate, type_, "Extension");
  return c.get<uint64_t>();
}
void qos_flow_level_qos_params_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::pdu_session_id:
      j.write_int("INTEGER (0..255)", c.get<uint16_t>());
      break;
    case types::ul_pdu_session_aggr_max_bit_rate:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "qos_flow_level_qos_params_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE qos_flow_level_qos_params_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::pdu_session_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, false, true));
      break;
    case types::ul_pdu_session_aggr_max_bit_rate:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "qos_flow_level_qos_params_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE qos_flow_level_qos_params_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::pdu_session_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, false, true));
      break;
    case types::ul_pdu_session_aggr_max_bit_rate:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "qos_flow_level_qos_params_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* qos_flow_level_qos_params_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255)", "INTEGER (0..4000000000000,...)"};
  return convert_enum_idx(names, 2, value, "qos_flow_level_qos_params_ext_ies_o::ext_c::types");
}

// QoSFlowMappingIndication ::= ENUMERATED
const char* qos_flow_map_ind_opts::to_string() const
{
  static const char* names[] = {"ul", "dl"};
  return convert_enum_idx(names, 2, value, "qos_flow_map_ind_e");
}

// Flows-Mapped-To-DRB-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t flows_mapped_to_drb_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {183};
  return map_enum_number(names, 1, idx, "id");
}
bool flows_mapped_to_drb_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 183 == id;
}
crit_e flows_mapped_to_drb_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 183) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
flows_mapped_to_drb_item_ext_ies_o::ext_c flows_mapped_to_drb_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 183) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e flows_mapped_to_drb_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 183) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void flows_mapped_to_drb_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("QoSFlowMappingIndication", c.to_string());
  j.end_obj();
}
SRSASN_CODE flows_mapped_to_drb_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE flows_mapped_to_drb_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* flows_mapped_to_drb_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"QoSFlowMappingIndication"};
  return convert_enum_idx(names, 1, value, "flows_mapped_to_drb_item_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ext_field_s<qos_flow_level_qos_params_ext_ies_o>;

qos_flow_level_qos_params_ext_ies_container::qos_flow_level_qos_params_ext_ies_container() :
  pdu_session_id(180, crit_e::ignore), ul_pdu_session_aggr_max_bit_rate(181, crit_e::ignore)
{
}
SRSASN_CODE qos_flow_level_qos_params_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += pdu_session_id_present ? 1 : 0;
  nof_ies += ul_pdu_session_aggr_max_bit_rate_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (pdu_session_id_present) {
    HANDLE_CODE(pdu_session_id.pack(bref));
  }
  if (ul_pdu_session_aggr_max_bit_rate_present) {
    HANDLE_CODE(ul_pdu_session_aggr_max_bit_rate.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE qos_flow_level_qos_params_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 180: {
        pdu_session_id_present = true;
        pdu_session_id.id      = id;
        HANDLE_CODE(pdu_session_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdu_session_id.ext.unpack(bref));
        break;
      }
      case 181: {
        ul_pdu_session_aggr_max_bit_rate_present = true;
        ul_pdu_session_aggr_max_bit_rate.id      = id;
        HANDLE_CODE(ul_pdu_session_aggr_max_bit_rate.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_pdu_session_aggr_max_bit_rate.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void qos_flow_level_qos_params_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdu_session_id_present) {
    j.write_fieldname("");
    pdu_session_id.to_json(j);
  }
  if (ul_pdu_session_aggr_max_bit_rate_present) {
    j.write_fieldname("");
    ul_pdu_session_aggr_max_bit_rate.to_json(j);
  }
  j.end_obj();
}

// QoSFlowLevelQoSParameters ::= SEQUENCE
SRSASN_CODE qos_flow_level_qos_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(gbr_qos_flow_info_present, 1));
  HANDLE_CODE(bref.pack(reflective_qos_attribute_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(qos_characteristics.pack(bref));
  HANDLE_CODE(ngra_nalloc_retention_prio.pack(bref));
  if (gbr_qos_flow_info_present) {
    HANDLE_CODE(gbr_qos_flow_info.pack(bref));
  }
  if (reflective_qos_attribute_present) {
    HANDLE_CODE(reflective_qos_attribute.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE qos_flow_level_qos_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(gbr_qos_flow_info_present, 1));
  HANDLE_CODE(bref.unpack(reflective_qos_attribute_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(qos_characteristics.unpack(bref));
  HANDLE_CODE(ngra_nalloc_retention_prio.unpack(bref));
  if (gbr_qos_flow_info_present) {
    HANDLE_CODE(gbr_qos_flow_info.unpack(bref));
  }
  if (reflective_qos_attribute_present) {
    HANDLE_CODE(reflective_qos_attribute.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void qos_flow_level_qos_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("qoS-Characteristics");
  qos_characteristics.to_json(j);
  j.write_fieldname("nGRANallocationRetentionPriority");
  ngra_nalloc_retention_prio.to_json(j);
  if (gbr_qos_flow_info_present) {
    j.write_fieldname("gBR-QoS-Flow-Information");
    gbr_qos_flow_info.to_json(j);
  }
  if (reflective_qos_attribute_present) {
    j.write_str("reflective-QoS-Attribute", "subject-to");
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

const char* qos_flow_level_qos_params_s::reflective_qos_attribute_opts::to_string() const
{
  static const char* names[] = {"subject-to"};
  return convert_enum_idx(names, 1, value, "qos_flow_level_qos_params_s::reflective_qos_attribute_e_");
}

// Flows-Mapped-To-DRB-Item ::= SEQUENCE
SRSASN_CODE flows_mapped_to_drb_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, qos_flow_id, (uint8_t)0u, (uint8_t)63u, false, true));
  HANDLE_CODE(qos_flow_level_qos_params.pack(bref));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE flows_mapped_to_drb_item_s::unpack(cbit_ref& bref)
{
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(qos_flow_id, bref, (uint8_t)0u, (uint8_t)63u, false, true));
  HANDLE_CODE(qos_flow_level_qos_params.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void flows_mapped_to_drb_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("qoSFlowIdentifier", qos_flow_id);
  j.write_fieldname("qoSFlowLevelQoSParameters");
  qos_flow_level_qos_params.to_json(j);
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// NotificationControl ::= ENUMERATED
const char* notif_ctrl_opts::to_string() const
{
  static const char* names[] = {"active", "not-active"};
  return convert_enum_idx(names, 2, value, "notif_ctrl_e");
}

// SNSSAI ::= SEQUENCE
SRSASN_CODE snssai_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sd_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(sst.pack(bref));
  if (sd_present) {
    HANDLE_CODE(sd.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE snssai_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sd_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(sst.unpack(bref));
  if (sd_present) {
    HANDLE_CODE(sd.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void snssai_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("sST", sst.to_string());
  if (sd_present) {
    j.write_str("sD", sd.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRB-Information ::= SEQUENCE
SRSASN_CODE drb_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(notif_ctrl_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(drb_qos.pack(bref));
  HANDLE_CODE(snssai.pack(bref));
  if (notif_ctrl_present) {
    HANDLE_CODE(notif_ctrl.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, flows_mapped_to_drb_list, 1, 64, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(notif_ctrl_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(drb_qos.unpack(bref));
  HANDLE_CODE(snssai.unpack(bref));
  if (notif_ctrl_present) {
    HANDLE_CODE(notif_ctrl.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(flows_mapped_to_drb_list, bref, 1, 64, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drb_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("dRB-QoS");
  drb_qos.to_json(j);
  j.write_fieldname("sNSSAI");
  snssai.to_json(j);
  if (notif_ctrl_present) {
    j.write_str("notificationControl", notif_ctrl.to_string());
  }
  j.start_array("flows-Mapped-To-DRB-List");
  for (const auto& e1 : flows_mapped_to_drb_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Notification-Cause ::= ENUMERATED
const char* notif_cause_opts::to_string() const
{
  static const char* names[] = {"fulfilled", "not-fulfilled"};
  return convert_enum_idx(names, 2, value, "notif_cause_e");
}

// DRB-Notify-Item ::= SEQUENCE
SRSASN_CODE drb_notify_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(notif_cause.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_notify_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(notif_cause.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drb_notify_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  j.write_str("notification-Cause", notif_cause.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRB-Notify-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drb_notify_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {136};
  return map_enum_number(names, 1, idx, "id");
}
bool drb_notify_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 136 == id;
}
crit_e drb_notify_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 136) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drb_notify_item_ies_o::value_c drb_notify_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 136) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drb_notify_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 136) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drb_notify_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRB-Notify-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drb_notify_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drb_notify_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drb_notify_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRB-Notify-Item"};
  return convert_enum_idx(names, 1, value, "drb_notify_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drb_notify_item_ies_o>;

// DRBs-FailedToBeModified-Item ::= SEQUENCE
SRSASN_CODE drbs_failed_to_be_modified_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cause_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_modified_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cause_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_failed_to_be_modified_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (cause_present) {
    j.write_fieldname("cause");
    cause.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-FailedToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_failed_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {12};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_failed_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 12 == id;
}
crit_e drbs_failed_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 12) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_failed_to_be_modified_item_ies_o::value_c drbs_failed_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 12) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_failed_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 12) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_failed_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-FailedToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_failed_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_failed_to_be_modified_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-FailedToBeModified-Item"};
  return convert_enum_idx(names, 1, value, "drbs_failed_to_be_modified_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_failed_to_be_modified_item_ies_o>;

// DRBs-FailedToBeSetup-Item ::= SEQUENCE
SRSASN_CODE drbs_failed_to_be_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cause_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cause_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_failed_to_be_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (cause_present) {
    j.write_fieldname("cause");
    cause.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {14};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 14 == id;
}
crit_e drbs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 14) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_failed_to_be_setup_item_ies_o::value_c drbs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 14) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 14) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_failed_to_be_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-FailedToBeSetup-Item"};
  return convert_enum_idx(names, 1, value, "drbs_failed_to_be_setup_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_failed_to_be_setup_item_ies_o>;

// DRBs-FailedToBeSetupMod-Item ::= SEQUENCE
SRSASN_CODE drbs_failed_to_be_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cause_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cause_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_failed_to_be_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (cause_present) {
    j.write_fieldname("cause");
    cause.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {16};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 16 == id;
}
crit_e drbs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 16) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_failed_to_be_setup_mod_item_ies_o::value_c drbs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 16) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 16) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_failed_to_be_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-FailedToBeSetupMod-Item"};
  return convert_enum_idx(names, 1, value, "drbs_failed_to_be_setup_mod_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_failed_to_be_setup_mod_item_ies_o>;

// Reestablishment-Indication ::= ENUMERATED
const char* reest_ind_opts::to_string() const
{
  static const char* names[] = {"reestablished"};
  return convert_enum_idx(names, 1, value, "reest_ind_e");
}

// RLC-Status ::= SEQUENCE
SRSASN_CODE rlc_status_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(reest_ind.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_status_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(reest_ind.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rlc_status_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("reestablishment-Indication", "reestablished");
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-Modified-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t drbs_modified_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {160};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_modified_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 160 == id;
}
crit_e drbs_modified_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 160) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_modified_item_ext_ies_o::ext_c drbs_modified_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 160) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_modified_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 160) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void drbs_modified_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("RLC-Status");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_modified_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_modified_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_modified_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"RLC-Status"};
  return convert_enum_idx(names, 1, value, "drbs_modified_item_ext_ies_o::ext_c::types");
}

// DRBs-Modified-Item ::= SEQUENCE
SRSASN_CODE drbs_modified_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(lcid_present, 1));
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (lcid_present) {
    HANDLE_CODE(pack_integer(bref, lcid, (uint8_t)1u, (uint8_t)32u, true, true));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, dl_up_tnl_info_to_be_setup_list, 1, 2, true));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_modified_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(lcid_present, 1));
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (lcid_present) {
    HANDLE_CODE(unpack_integer(lcid, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  }
  HANDLE_CODE(unpack_dyn_seq_of(dl_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void drbs_modified_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (lcid_present) {
    j.write_int("lCID", lcid);
  }
  j.start_array("dLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : dl_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// DRBs-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {20};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 20 == id;
}
crit_e drbs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 20) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_modified_item_ies_o::value_c drbs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 20) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 20) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_modified_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-Modified-Item"};
  return convert_enum_idx(names, 1, value, "drbs_modified_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_modified_item_ies_o>;

// ULUPTNLInformation-ToBeSetup-Item ::= SEQUENCE
SRSASN_CODE ul_up_tnl_info_to_be_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(ul_up_tnl_info.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_up_tnl_info_to_be_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(ul_up_tnl_info.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_up_tnl_info_to_be_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("uLUPTNLInformation");
  ul_up_tnl_info.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-ModifiedConf-Item ::= SEQUENCE
SRSASN_CODE drbs_modified_conf_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(pack_dyn_seq_of(bref, ul_up_tnl_info_to_be_setup_list, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_modified_conf_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(unpack_dyn_seq_of(ul_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_modified_conf_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  j.start_array("uLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : ul_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-ModifiedConf-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_modified_conf_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {18};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_modified_conf_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 18 == id;
}
crit_e drbs_modified_conf_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 18) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_modified_conf_item_ies_o::value_c drbs_modified_conf_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 18) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_modified_conf_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 18) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_modified_conf_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ModifiedConf-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_modified_conf_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_modified_conf_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_modified_conf_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-ModifiedConf-Item"};
  return convert_enum_idx(names, 1, value, "drbs_modified_conf_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_modified_conf_item_ies_o>;

// DRBs-Required-ToBeModified-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t drbs_required_to_be_modified_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {160};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_required_to_be_modified_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 160 == id;
}
crit_e drbs_required_to_be_modified_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 160) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_required_to_be_modified_item_ext_ies_o::ext_c
drbs_required_to_be_modified_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 160) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_required_to_be_modified_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 160) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void drbs_required_to_be_modified_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("RLC-Status");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_required_to_be_modified_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_required_to_be_modified_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_required_to_be_modified_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"RLC-Status"};
  return convert_enum_idx(names, 1, value, "drbs_required_to_be_modified_item_ext_ies_o::ext_c::types");
}

// DRBs-Required-ToBeModified-Item ::= SEQUENCE
SRSASN_CODE drbs_required_to_be_modified_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(pack_dyn_seq_of(bref, dl_up_tnl_info_to_be_setup_list, 1, 2, true));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_required_to_be_modified_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(unpack_dyn_seq_of(dl_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void drbs_required_to_be_modified_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  j.start_array("dLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : dl_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// DRBs-Required-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_required_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {22};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_required_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 22 == id;
}
crit_e drbs_required_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 22) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_required_to_be_modified_item_ies_o::value_c drbs_required_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 22) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_required_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 22) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_required_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Required-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_required_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_required_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_required_to_be_modified_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-Required-ToBeModified-Item"};
  return convert_enum_idx(names, 1, value, "drbs_required_to_be_modified_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_required_to_be_modified_item_ies_o>;

// DRBs-Required-ToBeReleased-Item ::= SEQUENCE
SRSASN_CODE drbs_required_to_be_released_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_required_to_be_released_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_required_to_be_released_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-Required-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_required_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {24};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_required_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 24 == id;
}
crit_e drbs_required_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 24) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_required_to_be_released_item_ies_o::value_c drbs_required_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 24) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_required_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 24) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_required_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Required-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_required_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_required_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_required_to_be_released_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-Required-ToBeReleased-Item"};
  return convert_enum_idx(names, 1, value, "drbs_required_to_be_released_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_required_to_be_released_item_ies_o>;

// DRBs-Setup-Item ::= SEQUENCE
SRSASN_CODE drbs_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(lcid_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (lcid_present) {
    HANDLE_CODE(pack_integer(bref, lcid, (uint8_t)1u, (uint8_t)32u, true, true));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, dl_up_tnl_info_to_be_setup_list, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(lcid_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (lcid_present) {
    HANDLE_CODE(unpack_integer(lcid, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  }
  HANDLE_CODE(unpack_dyn_seq_of(dl_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (lcid_present) {
    j.write_int("lCID", lcid);
  }
  j.start_array("dLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : dl_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {26};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 26 == id;
}
crit_e drbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 26) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_setup_item_ies_o::value_c drbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 26) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 26) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-Setup-Item"};
  return convert_enum_idx(names, 1, value, "drbs_setup_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_setup_item_ies_o>;

// DRBs-SetupMod-Item ::= SEQUENCE
SRSASN_CODE drbs_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(lcid_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (lcid_present) {
    HANDLE_CODE(pack_integer(bref, lcid, (uint8_t)1u, (uint8_t)32u, true, true));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, dl_up_tnl_info_to_be_setup_list, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(lcid_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (lcid_present) {
    HANDLE_CODE(unpack_integer(lcid, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  }
  HANDLE_CODE(unpack_dyn_seq_of(dl_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (lcid_present) {
    j.write_int("lCID", lcid);
  }
  j.start_array("dLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : dl_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {28};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 28 == id;
}
crit_e drbs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 28) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_setup_mod_item_ies_o::value_c drbs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 28) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 28) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-SetupMod-Item"};
  return convert_enum_idx(names, 1, value, "drbs_setup_mod_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_setup_mod_item_ies_o>;

// GBR-QosInformation ::= SEQUENCE
SRSASN_CODE gbr_qos_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, erab_max_bitrate_dl, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(pack_integer(bref, erab_max_bitrate_ul, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(pack_integer(bref, erab_guaranteed_bitrate_dl, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(pack_integer(bref, erab_guaranteed_bitrate_ul, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gbr_qos_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(erab_max_bitrate_dl, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(unpack_integer(erab_max_bitrate_ul, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(unpack_integer(erab_guaranteed_bitrate_dl, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  HANDLE_CODE(unpack_integer(erab_guaranteed_bitrate_ul, bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gbr_qos_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("e-RAB-MaximumBitrateDL", erab_max_bitrate_dl);
  j.write_int("e-RAB-MaximumBitrateUL", erab_max_bitrate_ul);
  j.write_int("e-RAB-GuaranteedBitrateDL", erab_guaranteed_bitrate_dl);
  j.write_int("e-RAB-GuaranteedBitrateUL", erab_guaranteed_bitrate_ul);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// BearerTypeChange ::= ENUMERATED
const char* bearer_type_change_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "bearer_type_change_e");
}

// DCBasedDuplicationConfigured ::= ENUMERATED
const char* dc_based_dupl_cfg_opts::to_string() const
{
  static const char* names[] = {"true", "false"};
  return convert_enum_idx(names, 2, value, "dc_based_dupl_cfg_e");
}

// DuplicationActivation ::= ENUMERATED
const char* dupl_activation_opts::to_string() const
{
  static const char* names[] = {"active", "inactive"};
  return convert_enum_idx(names, 2, value, "dupl_activation_e");
}

// EUTRANQoS ::= SEQUENCE
SRSASN_CODE eutran_qos_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gbr_qos_info_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, qci, (uint16_t)0u, (uint16_t)255u, false, true));
  HANDLE_CODE(alloc_and_retention_prio.pack(bref));
  if (gbr_qos_info_present) {
    HANDLE_CODE(gbr_qos_info.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutran_qos_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gbr_qos_info_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(qci, bref, (uint16_t)0u, (uint16_t)255u, false, true));
  HANDLE_CODE(alloc_and_retention_prio.unpack(bref));
  if (gbr_qos_info_present) {
    HANDLE_CODE(gbr_qos_info.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutran_qos_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("qCI", qci);
  j.write_fieldname("allocationAndRetentionPriority");
  alloc_and_retention_prio.to_json(j);
  if (gbr_qos_info_present) {
    j.write_fieldname("gbrQosInformation");
    gbr_qos_info.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// PDCPSNLength ::= ENUMERATED
const char* pdcp_sn_len_opts::to_string() const
{
  static const char* names[] = {"twelve-bits", "eighteen-bits"};
  return convert_enum_idx(names, 2, value, "pdcp_sn_len_e");
}
uint8_t pdcp_sn_len_opts::to_number() const
{
  if (value == eighteen_bits) {
    return 8;
  }
  invalid_enum_number(value, "pdcp_sn_len_e");
  return 0;
}

// QoSInformation-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t qos_info_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {164};
  return map_enum_number(names, 1, idx, "id");
}
bool qos_info_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 164 == id;
}
crit_e qos_info_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 164) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
qos_info_ext_ies_o::value_c qos_info_ext_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 164) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e qos_info_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 164) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void qos_info_ext_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRB-Information");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE qos_info_ext_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE qos_info_ext_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* qos_info_ext_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRB-Information"};
  return convert_enum_idx(names, 1, value, "qos_info_ext_ies_o::value_c::types");
}

// RLCMode ::= ENUMERATED
const char* rlc_mode_opts::to_string() const
{
  static const char* names[] = {
      "rlc-am", "rlc-um-bidirectional", "rlc-um-unidirectional-ul", "rlc-um-unidirectional-dl"};
  return convert_enum_idx(names, 4, value, "rlc_mode_e");
}

// ULUEConfiguration ::= ENUMERATED
const char* ul_ue_cfg_opts::to_string() const
{
  static const char* names[] = {"no-data", "shared", "only"};
  return convert_enum_idx(names, 3, value, "ul_ue_cfg_e");
}

// DRBs-ToBeModified-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t drbs_to_be_modified_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {161, 192, 186, 187, 188, 176, 177};
  return map_enum_number(names, 7, idx, "id");
}
bool drbs_to_be_modified_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {161, 192, 186, 187, 188, 176, 177};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e drbs_to_be_modified_item_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 161:
      return crit_e::ignore;
    case 192:
      return crit_e::ignore;
    case 186:
      return crit_e::ignore;
    case 187:
      return crit_e::ignore;
    case 188:
      return crit_e::reject;
    case 176:
      return crit_e::reject;
    case 177:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
drbs_to_be_modified_item_ext_ies_o::ext_c drbs_to_be_modified_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 161:
      ret.set(ext_c::types::dl_pdcp_sn_len);
      break;
    case 192:
      ret.set(ext_c::types::ul_pdcp_sn_len);
      break;
    case 186:
      ret.set(ext_c::types::bearer_type_change);
      break;
    case 187:
      ret.set(ext_c::types::rlc_mode);
      break;
    case 188:
      ret.set(ext_c::types::dupl_activation);
      break;
    case 176:
      ret.set(ext_c::types::dc_based_dupl_cfg);
      break;
    case 177:
      ret.set(ext_c::types::dc_based_dupl_activation);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_modified_item_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 161:
      return presence_e::optional;
    case 192:
      return presence_e::optional;
    case 186:
      return presence_e::optional;
    case 187:
      return presence_e::optional;
    case 188:
      return presence_e::optional;
    case 176:
      return presence_e::optional;
    case 177:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void drbs_to_be_modified_item_ext_ies_o::ext_c::destroy_() {}
void drbs_to_be_modified_item_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
drbs_to_be_modified_item_ext_ies_o::ext_c::ext_c(const drbs_to_be_modified_item_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::dl_pdcp_sn_len:
      c.init(other.c.get<pdcp_sn_len_e>());
      break;
    case types::ul_pdcp_sn_len:
      c.init(other.c.get<pdcp_sn_len_e>());
      break;
    case types::bearer_type_change:
      c.init(other.c.get<bearer_type_change_e>());
      break;
    case types::rlc_mode:
      c.init(other.c.get<rlc_mode_e>());
      break;
    case types::dupl_activation:
      c.init(other.c.get<dupl_activation_e>());
      break;
    case types::dc_based_dupl_cfg:
      c.init(other.c.get<dc_based_dupl_cfg_e>());
      break;
    case types::dc_based_dupl_activation:
      c.init(other.c.get<dupl_activation_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_modified_item_ext_ies_o::ext_c");
  }
}
drbs_to_be_modified_item_ext_ies_o::ext_c&
drbs_to_be_modified_item_ext_ies_o::ext_c::operator=(const drbs_to_be_modified_item_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::dl_pdcp_sn_len:
      c.set(other.c.get<pdcp_sn_len_e>());
      break;
    case types::ul_pdcp_sn_len:
      c.set(other.c.get<pdcp_sn_len_e>());
      break;
    case types::bearer_type_change:
      c.set(other.c.get<bearer_type_change_e>());
      break;
    case types::rlc_mode:
      c.set(other.c.get<rlc_mode_e>());
      break;
    case types::dupl_activation:
      c.set(other.c.get<dupl_activation_e>());
      break;
    case types::dc_based_dupl_cfg:
      c.set(other.c.get<dc_based_dupl_cfg_e>());
      break;
    case types::dc_based_dupl_activation:
      c.set(other.c.get<dupl_activation_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_modified_item_ext_ies_o::ext_c");
  }

  return *this;
}
pdcp_sn_len_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dl_pdcp_sn_len()
{
  assert_choice_type(types::dl_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
pdcp_sn_len_e& drbs_to_be_modified_item_ext_ies_o::ext_c::ul_pdcp_sn_len()
{
  assert_choice_type(types::ul_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
bearer_type_change_e& drbs_to_be_modified_item_ext_ies_o::ext_c::bearer_type_change()
{
  assert_choice_type(types::bearer_type_change, type_, "Extension");
  return c.get<bearer_type_change_e>();
}
rlc_mode_e& drbs_to_be_modified_item_ext_ies_o::ext_c::rlc_mode()
{
  assert_choice_type(types::rlc_mode, type_, "Extension");
  return c.get<rlc_mode_e>();
}
dupl_activation_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dupl_activation()
{
  assert_choice_type(types::dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
dc_based_dupl_cfg_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dc_based_dupl_cfg()
{
  assert_choice_type(types::dc_based_dupl_cfg, type_, "Extension");
  return c.get<dc_based_dupl_cfg_e>();
}
dupl_activation_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dc_based_dupl_activation()
{
  assert_choice_type(types::dc_based_dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
const pdcp_sn_len_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dl_pdcp_sn_len() const
{
  assert_choice_type(types::dl_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
const pdcp_sn_len_e& drbs_to_be_modified_item_ext_ies_o::ext_c::ul_pdcp_sn_len() const
{
  assert_choice_type(types::ul_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
const bearer_type_change_e& drbs_to_be_modified_item_ext_ies_o::ext_c::bearer_type_change() const
{
  assert_choice_type(types::bearer_type_change, type_, "Extension");
  return c.get<bearer_type_change_e>();
}
const rlc_mode_e& drbs_to_be_modified_item_ext_ies_o::ext_c::rlc_mode() const
{
  assert_choice_type(types::rlc_mode, type_, "Extension");
  return c.get<rlc_mode_e>();
}
const dupl_activation_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dupl_activation() const
{
  assert_choice_type(types::dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
const dc_based_dupl_cfg_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dc_based_dupl_cfg() const
{
  assert_choice_type(types::dc_based_dupl_cfg, type_, "Extension");
  return c.get<dc_based_dupl_cfg_e>();
}
const dupl_activation_e& drbs_to_be_modified_item_ext_ies_o::ext_c::dc_based_dupl_activation() const
{
  assert_choice_type(types::dc_based_dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
void drbs_to_be_modified_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::dl_pdcp_sn_len:
      j.write_str("PDCPSNLength", c.get<pdcp_sn_len_e>().to_string());
      break;
    case types::ul_pdcp_sn_len:
      j.write_str("PDCPSNLength", c.get<pdcp_sn_len_e>().to_string());
      break;
    case types::bearer_type_change:
      j.write_str("BearerTypeChange", "true");
      break;
    case types::rlc_mode:
      j.write_str("RLCMode", c.get<rlc_mode_e>().to_string());
      break;
    case types::dupl_activation:
      j.write_str("DuplicationActivation", c.get<dupl_activation_e>().to_string());
      break;
    case types::dc_based_dupl_cfg:
      j.write_str("DCBasedDuplicationConfigured", c.get<dc_based_dupl_cfg_e>().to_string());
      break;
    case types::dc_based_dupl_activation:
      j.write_str("DuplicationActivation", c.get<dupl_activation_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_modified_item_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE drbs_to_be_modified_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::dl_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().pack(bref));
      break;
    case types::ul_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().pack(bref));
      break;
    case types::bearer_type_change:
      HANDLE_CODE(c.get<bearer_type_change_e>().pack(bref));
      break;
    case types::rlc_mode:
      HANDLE_CODE(c.get<rlc_mode_e>().pack(bref));
      break;
    case types::dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().pack(bref));
      break;
    case types::dc_based_dupl_cfg:
      HANDLE_CODE(c.get<dc_based_dupl_cfg_e>().pack(bref));
      break;
    case types::dc_based_dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_modified_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_modified_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::dl_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().unpack(bref));
      break;
    case types::ul_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().unpack(bref));
      break;
    case types::bearer_type_change:
      HANDLE_CODE(c.get<bearer_type_change_e>().unpack(bref));
      break;
    case types::rlc_mode:
      HANDLE_CODE(c.get<rlc_mode_e>().unpack(bref));
      break;
    case types::dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().unpack(bref));
      break;
    case types::dc_based_dupl_cfg:
      HANDLE_CODE(c.get<dc_based_dupl_cfg_e>().unpack(bref));
      break;
    case types::dc_based_dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_modified_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drbs_to_be_modified_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"PDCPSNLength",
                                "PDCPSNLength",
                                "BearerTypeChange",
                                "RLCMode",
                                "DuplicationActivation",
                                "DCBasedDuplicationConfigured",
                                "DuplicationActivation"};
  return convert_enum_idx(names, 7, value, "drbs_to_be_modified_item_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ie_single_container_s<qos_info_ext_ies_o>;

// QoSInformation ::= CHOICE
void qos_info_c::destroy_()
{
  switch (type_) {
    case types::eutran_qos:
      c.destroy<eutran_qos_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<qos_info_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void qos_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::eutran_qos:
      c.init<eutran_qos_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<qos_info_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_info_c");
  }
}
qos_info_c::qos_info_c(const qos_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::eutran_qos:
      c.init(other.c.get<eutran_qos_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<qos_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_info_c");
  }
}
qos_info_c& qos_info_c::operator=(const qos_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::eutran_qos:
      c.set(other.c.get<eutran_qos_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<qos_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qos_info_c");
  }

  return *this;
}
eutran_qos_s& qos_info_c::set_eutran_qos()
{
  set(types::eutran_qos);
  return c.get<eutran_qos_s>();
}
protocol_ie_single_container_s<qos_info_ext_ies_o>& qos_info_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<qos_info_ext_ies_o>>();
}
void qos_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutran_qos:
      j.write_fieldname("eUTRANQoS");
      c.get<eutran_qos_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<qos_info_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "qos_info_c");
  }
  j.end_obj();
}
SRSASN_CODE qos_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutran_qos:
      HANDLE_CODE(c.get<eutran_qos_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<qos_info_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qos_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE qos_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutran_qos:
      HANDLE_CODE(c.get<eutran_qos_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<qos_info_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qos_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* qos_info_c::types_opts::to_string() const
{
  static const char* names[] = {"eUTRANQoS", "choice-extension"};
  return convert_enum_idx(names, 2, value, "qos_info_c::types");
}

// ULConfiguration ::= SEQUENCE
SRSASN_CODE ul_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(ul_ue_cfg.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(ul_ue_cfg.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("uLUEConfiguration", ul_ue_cfg.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ext_field_s<drbs_to_be_modified_item_ext_ies_o>;

drbs_to_be_modified_item_ext_ies_container::drbs_to_be_modified_item_ext_ies_container() :
  dl_pdcp_sn_len(161, crit_e::ignore),
  ul_pdcp_sn_len(192, crit_e::ignore),
  bearer_type_change(186, crit_e::ignore),
  rlc_mode(187, crit_e::ignore),
  dupl_activation(188, crit_e::reject),
  dc_based_dupl_cfg(176, crit_e::reject),
  dc_based_dupl_activation(177, crit_e::reject)
{
}
SRSASN_CODE drbs_to_be_modified_item_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += dl_pdcp_sn_len_present ? 1 : 0;
  nof_ies += ul_pdcp_sn_len_present ? 1 : 0;
  nof_ies += bearer_type_change_present ? 1 : 0;
  nof_ies += rlc_mode_present ? 1 : 0;
  nof_ies += dupl_activation_present ? 1 : 0;
  nof_ies += dc_based_dupl_cfg_present ? 1 : 0;
  nof_ies += dc_based_dupl_activation_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (dl_pdcp_sn_len_present) {
    HANDLE_CODE(dl_pdcp_sn_len.pack(bref));
  }
  if (ul_pdcp_sn_len_present) {
    HANDLE_CODE(ul_pdcp_sn_len.pack(bref));
  }
  if (bearer_type_change_present) {
    HANDLE_CODE(bearer_type_change.pack(bref));
  }
  if (rlc_mode_present) {
    HANDLE_CODE(rlc_mode.pack(bref));
  }
  if (dupl_activation_present) {
    HANDLE_CODE(dupl_activation.pack(bref));
  }
  if (dc_based_dupl_cfg_present) {
    HANDLE_CODE(dc_based_dupl_cfg.pack(bref));
  }
  if (dc_based_dupl_activation_present) {
    HANDLE_CODE(dc_based_dupl_activation.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_modified_item_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 161: {
        dl_pdcp_sn_len_present = true;
        dl_pdcp_sn_len.id      = id;
        HANDLE_CODE(dl_pdcp_sn_len.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dl_pdcp_sn_len.ext.unpack(bref));
        break;
      }
      case 192: {
        ul_pdcp_sn_len_present = true;
        ul_pdcp_sn_len.id      = id;
        HANDLE_CODE(ul_pdcp_sn_len.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_pdcp_sn_len.ext.unpack(bref));
        break;
      }
      case 186: {
        bearer_type_change_present = true;
        bearer_type_change.id      = id;
        HANDLE_CODE(bearer_type_change.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bearer_type_change.ext.unpack(bref));
        break;
      }
      case 187: {
        rlc_mode_present = true;
        rlc_mode.id      = id;
        HANDLE_CODE(rlc_mode.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rlc_mode.ext.unpack(bref));
        break;
      }
      case 188: {
        dupl_activation_present = true;
        dupl_activation.id      = id;
        HANDLE_CODE(dupl_activation.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dupl_activation.ext.unpack(bref));
        break;
      }
      case 176: {
        dc_based_dupl_cfg_present = true;
        dc_based_dupl_cfg.id      = id;
        HANDLE_CODE(dc_based_dupl_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dc_based_dupl_cfg.ext.unpack(bref));
        break;
      }
      case 177: {
        dc_based_dupl_activation_present = true;
        dc_based_dupl_activation.id      = id;
        HANDLE_CODE(dc_based_dupl_activation.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dc_based_dupl_activation.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void drbs_to_be_modified_item_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_pdcp_sn_len_present) {
    j.write_fieldname("");
    dl_pdcp_sn_len.to_json(j);
  }
  if (ul_pdcp_sn_len_present) {
    j.write_fieldname("");
    ul_pdcp_sn_len.to_json(j);
  }
  if (bearer_type_change_present) {
    j.write_fieldname("");
    bearer_type_change.to_json(j);
  }
  if (rlc_mode_present) {
    j.write_fieldname("");
    rlc_mode.to_json(j);
  }
  if (dupl_activation_present) {
    j.write_fieldname("");
    dupl_activation.to_json(j);
  }
  if (dc_based_dupl_cfg_present) {
    j.write_fieldname("");
    dc_based_dupl_cfg.to_json(j);
  }
  if (dc_based_dupl_activation_present) {
    j.write_fieldname("");
    dc_based_dupl_activation.to_json(j);
  }
  j.end_obj();
}

// DRBs-ToBeModified-Item ::= SEQUENCE
SRSASN_CODE drbs_to_be_modified_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(qos_info_present, 1));
  HANDLE_CODE(bref.pack(ul_cfg_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (qos_info_present) {
    HANDLE_CODE(qos_info.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, ul_up_tnl_info_to_be_setup_list, 1, 2, true));
  if (ul_cfg_present) {
    HANDLE_CODE(ul_cfg.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_modified_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(qos_info_present, 1));
  HANDLE_CODE(bref.unpack(ul_cfg_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (qos_info_present) {
    HANDLE_CODE(qos_info.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(ul_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  if (ul_cfg_present) {
    HANDLE_CODE(ul_cfg.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_to_be_modified_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (qos_info_present) {
    j.write_fieldname("qoSInformation");
    qos_info.to_json(j);
  }
  j.start_array("uLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : ul_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ul_cfg_present) {
    j.write_fieldname("uLConfiguration");
    ul_cfg.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-ToBeModified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {30};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 30 == id;
}
crit_e drbs_to_be_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 30) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_modified_item_ies_o::value_c drbs_to_be_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 30) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 30) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeModified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_to_be_modified_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-ToBeModified-Item"};
  return convert_enum_idx(names, 1, value, "drbs_to_be_modified_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_modified_item_ies_o>;

// DRBs-ToBeReleased-Item ::= SEQUENCE
SRSASN_CODE drbs_to_be_released_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_released_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_to_be_released_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {32};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 32 == id;
}
crit_e drbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 32) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_released_item_ies_o::value_c drbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 32) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 32) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_to_be_released_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-ToBeReleased-Item"};
  return convert_enum_idx(names, 1, value, "drbs_to_be_released_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_released_item_ies_o>;

// DRBs-ToBeSetup-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t drbs_to_be_setup_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {176, 177, 161, 192};
  return map_enum_number(names, 4, idx, "id");
}
bool drbs_to_be_setup_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {176, 177, 161, 192};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e drbs_to_be_setup_item_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 176:
      return crit_e::reject;
    case 177:
      return crit_e::reject;
    case 161:
      return crit_e::ignore;
    case 192:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
drbs_to_be_setup_item_ext_ies_o::ext_c drbs_to_be_setup_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 176:
      ret.set(ext_c::types::dc_based_dupl_cfg);
      break;
    case 177:
      ret.set(ext_c::types::dc_based_dupl_activation);
      break;
    case 161:
      ret.set(ext_c::types::dl_pdcp_sn_len);
      break;
    case 192:
      ret.set(ext_c::types::ul_pdcp_sn_len);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_setup_item_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 176:
      return presence_e::optional;
    case 177:
      return presence_e::optional;
    case 161:
      return presence_e::mandatory;
    case 192:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void drbs_to_be_setup_item_ext_ies_o::ext_c::destroy_() {}
void drbs_to_be_setup_item_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
drbs_to_be_setup_item_ext_ies_o::ext_c::ext_c(const drbs_to_be_setup_item_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::dc_based_dupl_cfg:
      c.init(other.c.get<dc_based_dupl_cfg_e>());
      break;
    case types::dc_based_dupl_activation:
      c.init(other.c.get<dupl_activation_e>());
      break;
    case types::dl_pdcp_sn_len:
      c.init(other.c.get<pdcp_sn_len_e>());
      break;
    case types::ul_pdcp_sn_len:
      c.init(other.c.get<pdcp_sn_len_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_item_ext_ies_o::ext_c");
  }
}
drbs_to_be_setup_item_ext_ies_o::ext_c&
drbs_to_be_setup_item_ext_ies_o::ext_c::operator=(const drbs_to_be_setup_item_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::dc_based_dupl_cfg:
      c.set(other.c.get<dc_based_dupl_cfg_e>());
      break;
    case types::dc_based_dupl_activation:
      c.set(other.c.get<dupl_activation_e>());
      break;
    case types::dl_pdcp_sn_len:
      c.set(other.c.get<pdcp_sn_len_e>());
      break;
    case types::ul_pdcp_sn_len:
      c.set(other.c.get<pdcp_sn_len_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_item_ext_ies_o::ext_c");
  }

  return *this;
}
dc_based_dupl_cfg_e& drbs_to_be_setup_item_ext_ies_o::ext_c::dc_based_dupl_cfg()
{
  assert_choice_type(types::dc_based_dupl_cfg, type_, "Extension");
  return c.get<dc_based_dupl_cfg_e>();
}
dupl_activation_e& drbs_to_be_setup_item_ext_ies_o::ext_c::dc_based_dupl_activation()
{
  assert_choice_type(types::dc_based_dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
pdcp_sn_len_e& drbs_to_be_setup_item_ext_ies_o::ext_c::dl_pdcp_sn_len()
{
  assert_choice_type(types::dl_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
pdcp_sn_len_e& drbs_to_be_setup_item_ext_ies_o::ext_c::ul_pdcp_sn_len()
{
  assert_choice_type(types::ul_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
const dc_based_dupl_cfg_e& drbs_to_be_setup_item_ext_ies_o::ext_c::dc_based_dupl_cfg() const
{
  assert_choice_type(types::dc_based_dupl_cfg, type_, "Extension");
  return c.get<dc_based_dupl_cfg_e>();
}
const dupl_activation_e& drbs_to_be_setup_item_ext_ies_o::ext_c::dc_based_dupl_activation() const
{
  assert_choice_type(types::dc_based_dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
const pdcp_sn_len_e& drbs_to_be_setup_item_ext_ies_o::ext_c::dl_pdcp_sn_len() const
{
  assert_choice_type(types::dl_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
const pdcp_sn_len_e& drbs_to_be_setup_item_ext_ies_o::ext_c::ul_pdcp_sn_len() const
{
  assert_choice_type(types::ul_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
void drbs_to_be_setup_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::dc_based_dupl_cfg:
      j.write_str("DCBasedDuplicationConfigured", c.get<dc_based_dupl_cfg_e>().to_string());
      break;
    case types::dc_based_dupl_activation:
      j.write_str("DuplicationActivation", c.get<dupl_activation_e>().to_string());
      break;
    case types::dl_pdcp_sn_len:
      j.write_str("PDCPSNLength", c.get<pdcp_sn_len_e>().to_string());
      break;
    case types::ul_pdcp_sn_len:
      j.write_str("PDCPSNLength", c.get<pdcp_sn_len_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_item_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE drbs_to_be_setup_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::dc_based_dupl_cfg:
      HANDLE_CODE(c.get<dc_based_dupl_cfg_e>().pack(bref));
      break;
    case types::dc_based_dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().pack(bref));
      break;
    case types::dl_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().pack(bref));
      break;
    case types::ul_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::dc_based_dupl_cfg:
      HANDLE_CODE(c.get<dc_based_dupl_cfg_e>().unpack(bref));
      break;
    case types::dc_based_dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().unpack(bref));
      break;
    case types::dl_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().unpack(bref));
      break;
    case types::ul_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drbs_to_be_setup_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {
      "DCBasedDuplicationConfigured", "DuplicationActivation", "PDCPSNLength", "PDCPSNLength"};
  return convert_enum_idx(names, 4, value, "drbs_to_be_setup_item_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ext_field_s<drbs_to_be_setup_item_ext_ies_o>;

drbs_to_be_setup_item_ext_ies_container::drbs_to_be_setup_item_ext_ies_container() :
  dc_based_dupl_cfg(176, crit_e::reject),
  dc_based_dupl_activation(177, crit_e::reject),
  dl_pdcp_sn_len(161, crit_e::ignore),
  ul_pdcp_sn_len(192, crit_e::ignore)
{
}
SRSASN_CODE drbs_to_be_setup_item_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += dc_based_dupl_cfg_present ? 1 : 0;
  nof_ies += dc_based_dupl_activation_present ? 1 : 0;
  nof_ies += ul_pdcp_sn_len_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (dc_based_dupl_cfg_present) {
    HANDLE_CODE(dc_based_dupl_cfg.pack(bref));
  }
  if (dc_based_dupl_activation_present) {
    HANDLE_CODE(dc_based_dupl_activation.pack(bref));
  }
  HANDLE_CODE(dl_pdcp_sn_len.pack(bref));
  if (ul_pdcp_sn_len_present) {
    HANDLE_CODE(ul_pdcp_sn_len.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_item_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 176: {
        dc_based_dupl_cfg_present = true;
        dc_based_dupl_cfg.id      = id;
        HANDLE_CODE(dc_based_dupl_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dc_based_dupl_cfg.ext.unpack(bref));
        break;
      }
      case 177: {
        dc_based_dupl_activation_present = true;
        dc_based_dupl_activation.id      = id;
        HANDLE_CODE(dc_based_dupl_activation.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dc_based_dupl_activation.ext.unpack(bref));
        break;
      }
      case 161: {
        nof_mandatory_ies--;
        dl_pdcp_sn_len.id = id;
        HANDLE_CODE(dl_pdcp_sn_len.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dl_pdcp_sn_len.ext.unpack(bref));
        break;
      }
      case 192: {
        ul_pdcp_sn_len_present = true;
        ul_pdcp_sn_len.id      = id;
        HANDLE_CODE(ul_pdcp_sn_len.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_pdcp_sn_len.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void drbs_to_be_setup_item_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (dc_based_dupl_cfg_present) {
    j.write_fieldname("");
    dc_based_dupl_cfg.to_json(j);
  }
  if (dc_based_dupl_activation_present) {
    j.write_fieldname("");
    dc_based_dupl_activation.to_json(j);
  }
  j.write_fieldname("");
  dl_pdcp_sn_len.to_json(j);
  if (ul_pdcp_sn_len_present) {
    j.write_fieldname("");
    ul_pdcp_sn_len.to_json(j);
  }
  j.end_obj();
}

// DRBs-ToBeSetup-Item ::= SEQUENCE
SRSASN_CODE drbs_to_be_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ul_cfg_present, 1));
  HANDLE_CODE(bref.pack(dupl_activation_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(qos_info.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, ul_up_tnl_info_to_be_setup_list, 1, 2, true));
  HANDLE_CODE(rlc_mode.pack(bref));
  if (ul_cfg_present) {
    HANDLE_CODE(ul_cfg.pack(bref));
  }
  if (dupl_activation_present) {
    HANDLE_CODE(dupl_activation.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ul_cfg_present, 1));
  HANDLE_CODE(bref.unpack(dupl_activation_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(qos_info.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(ul_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  HANDLE_CODE(rlc_mode.unpack(bref));
  if (ul_cfg_present) {
    HANDLE_CODE(ul_cfg.unpack(bref));
  }
  if (dupl_activation_present) {
    HANDLE_CODE(dupl_activation.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_to_be_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  j.write_fieldname("qoSInformation");
  qos_info.to_json(j);
  j.start_array("uLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : ul_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("rLCMode", rlc_mode.to_string());
  if (ul_cfg_present) {
    j.write_fieldname("uLConfiguration");
    ul_cfg.to_json(j);
  }
  if (dupl_activation_present) {
    j.write_str("duplicationActivation", dupl_activation.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {34};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 34 == id;
}
crit_e drbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 34) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_setup_item_ies_o::value_c drbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 34) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 34) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_to_be_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-ToBeSetup-Item"};
  return convert_enum_idx(names, 1, value, "drbs_to_be_setup_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_setup_item_ies_o>;

// DRBs-ToBeSetupMod-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t drbs_to_be_setup_mod_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {176, 177, 161, 192};
  return map_enum_number(names, 4, idx, "id");
}
bool drbs_to_be_setup_mod_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {176, 177, 161, 192};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e drbs_to_be_setup_mod_item_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 176:
      return crit_e::reject;
    case 177:
      return crit_e::reject;
    case 161:
      return crit_e::ignore;
    case 192:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
drbs_to_be_setup_mod_item_ext_ies_o::ext_c drbs_to_be_setup_mod_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 176:
      ret.set(ext_c::types::dc_based_dupl_cfg);
      break;
    case 177:
      ret.set(ext_c::types::dc_based_dupl_activation);
      break;
    case 161:
      ret.set(ext_c::types::dl_pdcp_sn_len);
      break;
    case 192:
      ret.set(ext_c::types::ul_pdcp_sn_len);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_setup_mod_item_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 176:
      return presence_e::optional;
    case 177:
      return presence_e::optional;
    case 161:
      return presence_e::optional;
    case 192:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void drbs_to_be_setup_mod_item_ext_ies_o::ext_c::destroy_() {}
void drbs_to_be_setup_mod_item_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
drbs_to_be_setup_mod_item_ext_ies_o::ext_c::ext_c(const drbs_to_be_setup_mod_item_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::dc_based_dupl_cfg:
      c.init(other.c.get<dc_based_dupl_cfg_e>());
      break;
    case types::dc_based_dupl_activation:
      c.init(other.c.get<dupl_activation_e>());
      break;
    case types::dl_pdcp_sn_len:
      c.init(other.c.get<pdcp_sn_len_e>());
      break;
    case types::ul_pdcp_sn_len:
      c.init(other.c.get<pdcp_sn_len_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_mod_item_ext_ies_o::ext_c");
  }
}
drbs_to_be_setup_mod_item_ext_ies_o::ext_c&
drbs_to_be_setup_mod_item_ext_ies_o::ext_c::operator=(const drbs_to_be_setup_mod_item_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::dc_based_dupl_cfg:
      c.set(other.c.get<dc_based_dupl_cfg_e>());
      break;
    case types::dc_based_dupl_activation:
      c.set(other.c.get<dupl_activation_e>());
      break;
    case types::dl_pdcp_sn_len:
      c.set(other.c.get<pdcp_sn_len_e>());
      break;
    case types::ul_pdcp_sn_len:
      c.set(other.c.get<pdcp_sn_len_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_mod_item_ext_ies_o::ext_c");
  }

  return *this;
}
dc_based_dupl_cfg_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::dc_based_dupl_cfg()
{
  assert_choice_type(types::dc_based_dupl_cfg, type_, "Extension");
  return c.get<dc_based_dupl_cfg_e>();
}
dupl_activation_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::dc_based_dupl_activation()
{
  assert_choice_type(types::dc_based_dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
pdcp_sn_len_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::dl_pdcp_sn_len()
{
  assert_choice_type(types::dl_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
pdcp_sn_len_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::ul_pdcp_sn_len()
{
  assert_choice_type(types::ul_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
const dc_based_dupl_cfg_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::dc_based_dupl_cfg() const
{
  assert_choice_type(types::dc_based_dupl_cfg, type_, "Extension");
  return c.get<dc_based_dupl_cfg_e>();
}
const dupl_activation_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::dc_based_dupl_activation() const
{
  assert_choice_type(types::dc_based_dupl_activation, type_, "Extension");
  return c.get<dupl_activation_e>();
}
const pdcp_sn_len_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::dl_pdcp_sn_len() const
{
  assert_choice_type(types::dl_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
const pdcp_sn_len_e& drbs_to_be_setup_mod_item_ext_ies_o::ext_c::ul_pdcp_sn_len() const
{
  assert_choice_type(types::ul_pdcp_sn_len, type_, "Extension");
  return c.get<pdcp_sn_len_e>();
}
void drbs_to_be_setup_mod_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::dc_based_dupl_cfg:
      j.write_str("DCBasedDuplicationConfigured", c.get<dc_based_dupl_cfg_e>().to_string());
      break;
    case types::dc_based_dupl_activation:
      j.write_str("DuplicationActivation", c.get<dupl_activation_e>().to_string());
      break;
    case types::dl_pdcp_sn_len:
      j.write_str("PDCPSNLength", c.get<pdcp_sn_len_e>().to_string());
      break;
    case types::ul_pdcp_sn_len:
      j.write_str("PDCPSNLength", c.get<pdcp_sn_len_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_mod_item_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE drbs_to_be_setup_mod_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::dc_based_dupl_cfg:
      HANDLE_CODE(c.get<dc_based_dupl_cfg_e>().pack(bref));
      break;
    case types::dc_based_dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().pack(bref));
      break;
    case types::dl_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().pack(bref));
      break;
    case types::ul_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_mod_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_mod_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::dc_based_dupl_cfg:
      HANDLE_CODE(c.get<dc_based_dupl_cfg_e>().unpack(bref));
      break;
    case types::dc_based_dupl_activation:
      HANDLE_CODE(c.get<dupl_activation_e>().unpack(bref));
      break;
    case types::dl_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().unpack(bref));
      break;
    case types::ul_pdcp_sn_len:
      HANDLE_CODE(c.get<pdcp_sn_len_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "drbs_to_be_setup_mod_item_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* drbs_to_be_setup_mod_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {
      "DCBasedDuplicationConfigured", "DuplicationActivation", "PDCPSNLength", "PDCPSNLength"};
  return convert_enum_idx(names, 4, value, "drbs_to_be_setup_mod_item_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ext_field_s<drbs_to_be_setup_mod_item_ext_ies_o>;

drbs_to_be_setup_mod_item_ext_ies_container::drbs_to_be_setup_mod_item_ext_ies_container() :
  dc_based_dupl_cfg(176, crit_e::reject),
  dc_based_dupl_activation(177, crit_e::reject),
  dl_pdcp_sn_len(161, crit_e::ignore),
  ul_pdcp_sn_len(192, crit_e::ignore)
{
}
SRSASN_CODE drbs_to_be_setup_mod_item_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += dc_based_dupl_cfg_present ? 1 : 0;
  nof_ies += dc_based_dupl_activation_present ? 1 : 0;
  nof_ies += dl_pdcp_sn_len_present ? 1 : 0;
  nof_ies += ul_pdcp_sn_len_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (dc_based_dupl_cfg_present) {
    HANDLE_CODE(dc_based_dupl_cfg.pack(bref));
  }
  if (dc_based_dupl_activation_present) {
    HANDLE_CODE(dc_based_dupl_activation.pack(bref));
  }
  if (dl_pdcp_sn_len_present) {
    HANDLE_CODE(dl_pdcp_sn_len.pack(bref));
  }
  if (ul_pdcp_sn_len_present) {
    HANDLE_CODE(ul_pdcp_sn_len.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_mod_item_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 176: {
        dc_based_dupl_cfg_present = true;
        dc_based_dupl_cfg.id      = id;
        HANDLE_CODE(dc_based_dupl_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dc_based_dupl_cfg.ext.unpack(bref));
        break;
      }
      case 177: {
        dc_based_dupl_activation_present = true;
        dc_based_dupl_activation.id      = id;
        HANDLE_CODE(dc_based_dupl_activation.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dc_based_dupl_activation.ext.unpack(bref));
        break;
      }
      case 161: {
        dl_pdcp_sn_len_present = true;
        dl_pdcp_sn_len.id      = id;
        HANDLE_CODE(dl_pdcp_sn_len.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(dl_pdcp_sn_len.ext.unpack(bref));
        break;
      }
      case 192: {
        ul_pdcp_sn_len_present = true;
        ul_pdcp_sn_len.id      = id;
        HANDLE_CODE(ul_pdcp_sn_len.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_pdcp_sn_len.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void drbs_to_be_setup_mod_item_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (dc_based_dupl_cfg_present) {
    j.write_fieldname("");
    dc_based_dupl_cfg.to_json(j);
  }
  if (dc_based_dupl_activation_present) {
    j.write_fieldname("");
    dc_based_dupl_activation.to_json(j);
  }
  if (dl_pdcp_sn_len_present) {
    j.write_fieldname("");
    dl_pdcp_sn_len.to_json(j);
  }
  if (ul_pdcp_sn_len_present) {
    j.write_fieldname("");
    ul_pdcp_sn_len.to_json(j);
  }
  j.end_obj();
}

// DRBs-ToBeSetupMod-Item ::= SEQUENCE
SRSASN_CODE drbs_to_be_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ul_cfg_present, 1));
  HANDLE_CODE(bref.pack(dupl_activation_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, drb_id, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(qos_info.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, ul_up_tnl_info_to_be_setup_list, 1, 2, true));
  HANDLE_CODE(rlc_mode.pack(bref));
  if (ul_cfg_present) {
    HANDLE_CODE(ul_cfg.pack(bref));
  }
  if (dupl_activation_present) {
    HANDLE_CODE(dupl_activation.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ul_cfg_present, 1));
  HANDLE_CODE(bref.unpack(dupl_activation_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(drb_id, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  HANDLE_CODE(qos_info.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(ul_up_tnl_info_to_be_setup_list, bref, 1, 2, true));
  HANDLE_CODE(rlc_mode.unpack(bref));
  if (ul_cfg_present) {
    HANDLE_CODE(ul_cfg.unpack(bref));
  }
  if (dupl_activation_present) {
    HANDLE_CODE(dupl_activation.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drbs_to_be_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("dRBID", drb_id);
  j.write_fieldname("qoSInformation");
  qos_info.to_json(j);
  j.start_array("uLUPTNLInformation-ToBeSetup-List");
  for (const auto& e1 : ul_up_tnl_info_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("rLCMode", rlc_mode.to_string());
  if (ul_cfg_present) {
    j.write_fieldname("uLConfiguration");
    ul_cfg.to_json(j);
  }
  if (dupl_activation_present) {
    j.write_str("duplicationActivation", dupl_activation.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DRBs-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t drbs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {36};
  return map_enum_number(names, 1, idx, "id");
}
bool drbs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 36 == id;
}
crit_e drbs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 36) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
drbs_to_be_setup_mod_item_ies_o::value_c drbs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 36) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e drbs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 36) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void drbs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("DRBs-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE drbs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE drbs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* drbs_to_be_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"DRBs-ToBeSetupMod-Item"};
  return convert_enum_idx(names, 1, value, "drbs_to_be_setup_mod_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<drbs_to_be_setup_mod_item_ies_o>;

// LongDRXCycleLength ::= ENUMERATED
const char* long_drx_cycle_len_opts::to_string() const
{
  static const char* names[] = {"ms10",   "ms20",   "ms32",   "ms40",   "ms60",   "ms64",   "ms70",
                                "ms80",   "ms128",  "ms160",  "ms256",  "ms320",  "ms512",  "ms640",
                                "ms1024", "ms1280", "ms2048", "ms2560", "ms5120", "ms10240"};
  return convert_enum_idx(names, 20, value, "long_drx_cycle_len_e");
}
uint16_t long_drx_cycle_len_opts::to_number() const
{
  static const uint16_t numbers[] = {10,  20,  32,  40,  60,   64,   70,   80,   128,  160,
                                     256, 320, 512, 640, 1024, 1280, 2048, 2560, 5120, 10240};
  return map_enum_number(numbers, 20, value, "long_drx_cycle_len_e");
}

// ShortDRXCycleLength ::= ENUMERATED
const char* short_drx_cycle_len_opts::to_string() const
{
  static const char* names[] = {"ms2",  "ms3",   "ms4",   "ms5",   "ms6",   "ms7",   "ms8",  "ms10",
                                "ms14", "ms16",  "ms20",  "ms30",  "ms32",  "ms35",  "ms40", "ms64",
                                "ms80", "ms128", "ms160", "ms256", "ms320", "ms512", "ms640"};
  return convert_enum_idx(names, 23, value, "short_drx_cycle_len_e");
}
uint16_t short_drx_cycle_len_opts::to_number() const
{
  static const uint16_t numbers[] = {2,  3,  4,  5,  6,  7,   8,   10,  14,  16,  20, 30,
                                     32, 35, 40, 64, 80, 128, 160, 256, 320, 512, 640};
  return map_enum_number(numbers, 23, value, "short_drx_cycle_len_e");
}

// DRXCycle ::= SEQUENCE
SRSASN_CODE drx_cycle_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(short_drx_cycle_len_present, 1));
  HANDLE_CODE(bref.pack(short_drx_cycle_timer_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(long_drx_cycle_len.pack(bref));
  if (short_drx_cycle_len_present) {
    HANDLE_CODE(short_drx_cycle_len.pack(bref));
  }
  if (short_drx_cycle_timer_present) {
    HANDLE_CODE(pack_integer(bref, short_drx_cycle_timer, (uint8_t)1u, (uint8_t)16u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE drx_cycle_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(short_drx_cycle_len_present, 1));
  HANDLE_CODE(bref.unpack(short_drx_cycle_timer_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(long_drx_cycle_len.unpack(bref));
  if (short_drx_cycle_len_present) {
    HANDLE_CODE(short_drx_cycle_len.unpack(bref));
  }
  if (short_drx_cycle_timer_present) {
    HANDLE_CODE(unpack_integer(short_drx_cycle_timer, bref, (uint8_t)1u, (uint8_t)16u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void drx_cycle_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("longDRXCycleLength", long_drx_cycle_len.to_string());
  if (short_drx_cycle_len_present) {
    j.write_str("shortDRXCycleLength", short_drx_cycle_len.to_string());
  }
  if (short_drx_cycle_timer_present) {
    j.write_int("shortDRXCycleTimer", short_drx_cycle_timer);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// DUtoCURRCInformation-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t du_to_cu_rrc_info_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {191, 193, 194, 208, 209, 210, 211, 212, 235, 236, 237, 238};
  return map_enum_number(names, 12, idx, "id");
}
bool du_to_cu_rrc_info_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {191, 193, 194, 208, 209, 210, 211, 212, 235, 236, 237, 238};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e du_to_cu_rrc_info_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 191:
      return crit_e::ignore;
    case 193:
      return crit_e::ignore;
    case 194:
      return crit_e::ignore;
    case 208:
      return crit_e::ignore;
    case 209:
      return crit_e::ignore;
    case 210:
      return crit_e::ignore;
    case 211:
      return crit_e::ignore;
    case 212:
      return crit_e::ignore;
    case 235:
      return crit_e::ignore;
    case 236:
      return crit_e::ignore;
    case 237:
      return crit_e::ignore;
    case 238:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
du_to_cu_rrc_info_ext_ies_o::ext_c du_to_cu_rrc_info_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 191:
      ret.set(ext_c::types::drx_long_cycle_start_offset);
      break;
    case 193:
      ret.set(ext_c::types::sel_band_combination_idx);
      break;
    case 194:
      ret.set(ext_c::types::sel_feature_set_entry_idx);
      break;
    case 208:
      ret.set(ext_c::types::ph_info_scg);
      break;
    case 209:
      ret.set(ext_c::types::requested_band_combination_idx);
      break;
    case 210:
      ret.set(ext_c::types::requested_feature_set_entry_idx);
      break;
    case 211:
      ret.set(ext_c::types::requested_p_max_fr2);
      break;
    case 212:
      ret.set(ext_c::types::drx_cfg);
      break;
    case 235:
      ret.set(ext_c::types::pdcch_blind_detection_scg);
      break;
    case 236:
      ret.set(ext_c::types::requested_pdcch_blind_detection_scg);
      break;
    case 237:
      ret.set(ext_c::types::ph_info_mcg);
      break;
    case 238:
      ret.set(ext_c::types::meas_gap_sharing_cfg);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e du_to_cu_rrc_info_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 191:
      return presence_e::optional;
    case 193:
      return presence_e::optional;
    case 194:
      return presence_e::optional;
    case 208:
      return presence_e::optional;
    case 209:
      return presence_e::optional;
    case 210:
      return presence_e::optional;
    case 211:
      return presence_e::optional;
    case 212:
      return presence_e::optional;
    case 235:
      return presence_e::optional;
    case 236:
      return presence_e::optional;
    case 237:
      return presence_e::optional;
    case 238:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void du_to_cu_rrc_info_ext_ies_o::ext_c::destroy_()
{
  switch (type_) {
    case types::sel_band_combination_idx:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::sel_feature_set_entry_idx:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::ph_info_scg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::requested_band_combination_idx:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::requested_feature_set_entry_idx:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::requested_p_max_fr2:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::drx_cfg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::pdcch_blind_detection_scg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::requested_pdcch_blind_detection_scg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::ph_info_mcg:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::meas_gap_sharing_cfg:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void du_to_cu_rrc_info_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::drx_long_cycle_start_offset:
      break;
    case types::sel_band_combination_idx:
      c.init<unbounded_octstring<true>>();
      break;
    case types::sel_feature_set_entry_idx:
      c.init<unbounded_octstring<true>>();
      break;
    case types::ph_info_scg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::requested_band_combination_idx:
      c.init<unbounded_octstring<true>>();
      break;
    case types::requested_feature_set_entry_idx:
      c.init<unbounded_octstring<true>>();
      break;
    case types::requested_p_max_fr2:
      c.init<unbounded_octstring<true>>();
      break;
    case types::drx_cfg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::pdcch_blind_detection_scg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::requested_pdcch_blind_detection_scg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::ph_info_mcg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::meas_gap_sharing_cfg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_to_cu_rrc_info_ext_ies_o::ext_c");
  }
}
du_to_cu_rrc_info_ext_ies_o::ext_c::ext_c(const du_to_cu_rrc_info_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::drx_long_cycle_start_offset:
      c.init(other.c.get<uint16_t>());
      break;
    case types::sel_band_combination_idx:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sel_feature_set_entry_idx:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ph_info_scg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_band_combination_idx:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_feature_set_entry_idx:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_p_max_fr2:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::drx_cfg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::pdcch_blind_detection_scg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_pdcch_blind_detection_scg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ph_info_mcg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::meas_gap_sharing_cfg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_to_cu_rrc_info_ext_ies_o::ext_c");
  }
}
du_to_cu_rrc_info_ext_ies_o::ext_c&
du_to_cu_rrc_info_ext_ies_o::ext_c::operator=(const du_to_cu_rrc_info_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::drx_long_cycle_start_offset:
      c.set(other.c.get<uint16_t>());
      break;
    case types::sel_band_combination_idx:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sel_feature_set_entry_idx:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ph_info_scg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_band_combination_idx:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_feature_set_entry_idx:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_p_max_fr2:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::drx_cfg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::pdcch_blind_detection_scg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::requested_pdcch_blind_detection_scg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ph_info_mcg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::meas_gap_sharing_cfg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_to_cu_rrc_info_ext_ies_o::ext_c");
  }

  return *this;
}
uint16_t& du_to_cu_rrc_info_ext_ies_o::ext_c::drx_long_cycle_start_offset()
{
  assert_choice_type(types::drx_long_cycle_start_offset, type_, "Extension");
  return c.get<uint16_t>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::sel_band_combination_idx()
{
  assert_choice_type(types::sel_band_combination_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::sel_feature_set_entry_idx()
{
  assert_choice_type(types::sel_feature_set_entry_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::ph_info_scg()
{
  assert_choice_type(types::ph_info_scg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_band_combination_idx()
{
  assert_choice_type(types::requested_band_combination_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_feature_set_entry_idx()
{
  assert_choice_type(types::requested_feature_set_entry_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_p_max_fr2()
{
  assert_choice_type(types::requested_p_max_fr2, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::drx_cfg()
{
  assert_choice_type(types::drx_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::pdcch_blind_detection_scg()
{
  assert_choice_type(types::pdcch_blind_detection_scg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_pdcch_blind_detection_scg()
{
  assert_choice_type(types::requested_pdcch_blind_detection_scg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::ph_info_mcg()
{
  assert_choice_type(types::ph_info_mcg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::meas_gap_sharing_cfg()
{
  assert_choice_type(types::meas_gap_sharing_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const uint16_t& du_to_cu_rrc_info_ext_ies_o::ext_c::drx_long_cycle_start_offset() const
{
  assert_choice_type(types::drx_long_cycle_start_offset, type_, "Extension");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::sel_band_combination_idx() const
{
  assert_choice_type(types::sel_band_combination_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::sel_feature_set_entry_idx() const
{
  assert_choice_type(types::sel_feature_set_entry_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::ph_info_scg() const
{
  assert_choice_type(types::ph_info_scg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_band_combination_idx() const
{
  assert_choice_type(types::requested_band_combination_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_feature_set_entry_idx() const
{
  assert_choice_type(types::requested_feature_set_entry_idx, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_p_max_fr2() const
{
  assert_choice_type(types::requested_p_max_fr2, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::drx_cfg() const
{
  assert_choice_type(types::drx_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::pdcch_blind_detection_scg() const
{
  assert_choice_type(types::pdcch_blind_detection_scg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::requested_pdcch_blind_detection_scg() const
{
  assert_choice_type(types::requested_pdcch_blind_detection_scg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::ph_info_mcg() const
{
  assert_choice_type(types::ph_info_mcg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& du_to_cu_rrc_info_ext_ies_o::ext_c::meas_gap_sharing_cfg() const
{
  assert_choice_type(types::meas_gap_sharing_cfg, type_, "Extension");
  return c.get<unbounded_octstring<true>>();
}
void du_to_cu_rrc_info_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::drx_long_cycle_start_offset:
      j.write_int("INTEGER (0..10239)", c.get<uint16_t>());
      break;
    case types::sel_band_combination_idx:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::sel_feature_set_entry_idx:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::ph_info_scg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::requested_band_combination_idx:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::requested_feature_set_entry_idx:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::requested_p_max_fr2:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::drx_cfg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::pdcch_blind_detection_scg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::requested_pdcch_blind_detection_scg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::ph_info_mcg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::meas_gap_sharing_cfg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "du_to_cu_rrc_info_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE du_to_cu_rrc_info_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::drx_long_cycle_start_offset:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)10239u, false, true));
      break;
    case types::sel_band_combination_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::sel_feature_set_entry_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::ph_info_scg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::requested_band_combination_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::requested_feature_set_entry_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::requested_p_max_fr2:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::drx_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::pdcch_blind_detection_scg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::requested_pdcch_blind_detection_scg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::ph_info_mcg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::meas_gap_sharing_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "du_to_cu_rrc_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE du_to_cu_rrc_info_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::drx_long_cycle_start_offset:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)10239u, false, true));
      break;
    case types::sel_band_combination_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::sel_feature_set_entry_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::ph_info_scg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::requested_band_combination_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::requested_feature_set_entry_idx:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::requested_p_max_fr2:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::drx_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::pdcch_blind_detection_scg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::requested_pdcch_blind_detection_scg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::ph_info_mcg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::meas_gap_sharing_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "du_to_cu_rrc_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* du_to_cu_rrc_info_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..10239)",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING",
                                "OCTET STRING"};
  return convert_enum_idx(names, 12, value, "du_to_cu_rrc_info_ext_ies_o::ext_c::types");
}
uint8_t du_to_cu_rrc_info_ext_ies_o::ext_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "du_to_cu_rrc_info_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ext_field_s<du_to_cu_rrc_info_ext_ies_o>;

du_to_cu_rrc_info_ext_ies_container::du_to_cu_rrc_info_ext_ies_container() :
  drx_long_cycle_start_offset(191, crit_e::ignore),
  sel_band_combination_idx(193, crit_e::ignore),
  sel_feature_set_entry_idx(194, crit_e::ignore),
  ph_info_scg(208, crit_e::ignore),
  requested_band_combination_idx(209, crit_e::ignore),
  requested_feature_set_entry_idx(210, crit_e::ignore),
  requested_p_max_fr2(211, crit_e::ignore),
  drx_cfg(212, crit_e::ignore),
  pdcch_blind_detection_scg(235, crit_e::ignore),
  requested_pdcch_blind_detection_scg(236, crit_e::ignore),
  ph_info_mcg(237, crit_e::ignore),
  meas_gap_sharing_cfg(238, crit_e::ignore)
{
}
SRSASN_CODE du_to_cu_rrc_info_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += drx_long_cycle_start_offset_present ? 1 : 0;
  nof_ies += sel_band_combination_idx_present ? 1 : 0;
  nof_ies += sel_feature_set_entry_idx_present ? 1 : 0;
  nof_ies += ph_info_scg_present ? 1 : 0;
  nof_ies += requested_band_combination_idx_present ? 1 : 0;
  nof_ies += requested_feature_set_entry_idx_present ? 1 : 0;
  nof_ies += requested_p_max_fr2_present ? 1 : 0;
  nof_ies += drx_cfg_present ? 1 : 0;
  nof_ies += pdcch_blind_detection_scg_present ? 1 : 0;
  nof_ies += requested_pdcch_blind_detection_scg_present ? 1 : 0;
  nof_ies += ph_info_mcg_present ? 1 : 0;
  nof_ies += meas_gap_sharing_cfg_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (drx_long_cycle_start_offset_present) {
    HANDLE_CODE(drx_long_cycle_start_offset.pack(bref));
  }
  if (sel_band_combination_idx_present) {
    HANDLE_CODE(sel_band_combination_idx.pack(bref));
  }
  if (sel_feature_set_entry_idx_present) {
    HANDLE_CODE(sel_feature_set_entry_idx.pack(bref));
  }
  if (ph_info_scg_present) {
    HANDLE_CODE(ph_info_scg.pack(bref));
  }
  if (requested_band_combination_idx_present) {
    HANDLE_CODE(requested_band_combination_idx.pack(bref));
  }
  if (requested_feature_set_entry_idx_present) {
    HANDLE_CODE(requested_feature_set_entry_idx.pack(bref));
  }
  if (requested_p_max_fr2_present) {
    HANDLE_CODE(requested_p_max_fr2.pack(bref));
  }
  if (drx_cfg_present) {
    HANDLE_CODE(drx_cfg.pack(bref));
  }
  if (pdcch_blind_detection_scg_present) {
    HANDLE_CODE(pdcch_blind_detection_scg.pack(bref));
  }
  if (requested_pdcch_blind_detection_scg_present) {
    HANDLE_CODE(requested_pdcch_blind_detection_scg.pack(bref));
  }
  if (ph_info_mcg_present) {
    HANDLE_CODE(ph_info_mcg.pack(bref));
  }
  if (meas_gap_sharing_cfg_present) {
    HANDLE_CODE(meas_gap_sharing_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE du_to_cu_rrc_info_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 191: {
        drx_long_cycle_start_offset_present = true;
        drx_long_cycle_start_offset.id      = id;
        HANDLE_CODE(drx_long_cycle_start_offset.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_long_cycle_start_offset.ext.unpack(bref));
        break;
      }
      case 193: {
        sel_band_combination_idx_present = true;
        sel_band_combination_idx.id      = id;
        HANDLE_CODE(sel_band_combination_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sel_band_combination_idx.ext.unpack(bref));
        break;
      }
      case 194: {
        sel_feature_set_entry_idx_present = true;
        sel_feature_set_entry_idx.id      = id;
        HANDLE_CODE(sel_feature_set_entry_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sel_feature_set_entry_idx.ext.unpack(bref));
        break;
      }
      case 208: {
        ph_info_scg_present = true;
        ph_info_scg.id      = id;
        HANDLE_CODE(ph_info_scg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ph_info_scg.ext.unpack(bref));
        break;
      }
      case 209: {
        requested_band_combination_idx_present = true;
        requested_band_combination_idx.id      = id;
        HANDLE_CODE(requested_band_combination_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_band_combination_idx.ext.unpack(bref));
        break;
      }
      case 210: {
        requested_feature_set_entry_idx_present = true;
        requested_feature_set_entry_idx.id      = id;
        HANDLE_CODE(requested_feature_set_entry_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_feature_set_entry_idx.ext.unpack(bref));
        break;
      }
      case 211: {
        requested_p_max_fr2_present = true;
        requested_p_max_fr2.id      = id;
        HANDLE_CODE(requested_p_max_fr2.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_p_max_fr2.ext.unpack(bref));
        break;
      }
      case 212: {
        drx_cfg_present = true;
        drx_cfg.id      = id;
        HANDLE_CODE(drx_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_cfg.ext.unpack(bref));
        break;
      }
      case 235: {
        pdcch_blind_detection_scg_present = true;
        pdcch_blind_detection_scg.id      = id;
        HANDLE_CODE(pdcch_blind_detection_scg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdcch_blind_detection_scg.ext.unpack(bref));
        break;
      }
      case 236: {
        requested_pdcch_blind_detection_scg_present = true;
        requested_pdcch_blind_detection_scg.id      = id;
        HANDLE_CODE(requested_pdcch_blind_detection_scg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_pdcch_blind_detection_scg.ext.unpack(bref));
        break;
      }
      case 237: {
        ph_info_mcg_present = true;
        ph_info_mcg.id      = id;
        HANDLE_CODE(ph_info_mcg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ph_info_mcg.ext.unpack(bref));
        break;
      }
      case 238: {
        meas_gap_sharing_cfg_present = true;
        meas_gap_sharing_cfg.id      = id;
        HANDLE_CODE(meas_gap_sharing_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_gap_sharing_cfg.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void du_to_cu_rrc_info_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (drx_long_cycle_start_offset_present) {
    j.write_fieldname("");
    drx_long_cycle_start_offset.to_json(j);
  }
  if (sel_band_combination_idx_present) {
    j.write_fieldname("");
    sel_band_combination_idx.to_json(j);
  }
  if (sel_feature_set_entry_idx_present) {
    j.write_fieldname("");
    sel_feature_set_entry_idx.to_json(j);
  }
  if (ph_info_scg_present) {
    j.write_fieldname("");
    ph_info_scg.to_json(j);
  }
  if (requested_band_combination_idx_present) {
    j.write_fieldname("");
    requested_band_combination_idx.to_json(j);
  }
  if (requested_feature_set_entry_idx_present) {
    j.write_fieldname("");
    requested_feature_set_entry_idx.to_json(j);
  }
  if (requested_p_max_fr2_present) {
    j.write_fieldname("");
    requested_p_max_fr2.to_json(j);
  }
  if (drx_cfg_present) {
    j.write_fieldname("");
    drx_cfg.to_json(j);
  }
  if (pdcch_blind_detection_scg_present) {
    j.write_fieldname("");
    pdcch_blind_detection_scg.to_json(j);
  }
  if (requested_pdcch_blind_detection_scg_present) {
    j.write_fieldname("");
    requested_pdcch_blind_detection_scg.to_json(j);
  }
  if (ph_info_mcg_present) {
    j.write_fieldname("");
    ph_info_mcg.to_json(j);
  }
  if (meas_gap_sharing_cfg_present) {
    j.write_fieldname("");
    meas_gap_sharing_cfg.to_json(j);
  }
  j.end_obj();
}

// DUtoCURRCInformation ::= SEQUENCE
SRSASN_CODE du_to_cu_rrc_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(meas_gap_cfg.size() > 0, 1));
  HANDLE_CODE(bref.pack(requested_p_max_fr1.size() > 0, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(cell_group_cfg.pack(bref));
  if (meas_gap_cfg.size() > 0) {
    HANDLE_CODE(meas_gap_cfg.pack(bref));
  }
  if (requested_p_max_fr1.size() > 0) {
    HANDLE_CODE(requested_p_max_fr1.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE du_to_cu_rrc_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool meas_gap_cfg_present;
  HANDLE_CODE(bref.unpack(meas_gap_cfg_present, 1));
  bool requested_p_max_fr1_present;
  HANDLE_CODE(bref.unpack(requested_p_max_fr1_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(cell_group_cfg.unpack(bref));
  if (meas_gap_cfg_present) {
    HANDLE_CODE(meas_gap_cfg.unpack(bref));
  }
  if (requested_p_max_fr1_present) {
    HANDLE_CODE(requested_p_max_fr1.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void du_to_cu_rrc_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("cellGroupConfig", cell_group_cfg.to_string());
  if (meas_gap_cfg.size() > 0) {
    j.write_str("measGapConfig", meas_gap_cfg.to_string());
  }
  if (requested_p_max_fr1.size() > 0) {
    j.write_str("requestedP-MaxFR1", requested_p_max_fr1.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Dedicated-SIDelivery-NeededUE-Item ::= SEQUENCE
SRSASN_CODE ded_si_delivery_needed_ue_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  HANDLE_CODE(nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ded_si_delivery_needed_ue_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  HANDLE_CODE(nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ded_si_delivery_needed_ue_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("gNB-CU-UE-F1AP-ID", gnb_cu_ue_f1ap_id);
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Dedicated-SIDelivery-NeededUE-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ded_si_delivery_needed_ue_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {190};
  return map_enum_number(names, 1, idx, "id");
}
bool ded_si_delivery_needed_ue_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 190 == id;
}
crit_e ded_si_delivery_needed_ue_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 190) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ded_si_delivery_needed_ue_item_ies_o::value_c ded_si_delivery_needed_ue_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 190) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ded_si_delivery_needed_ue_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 190) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ded_si_delivery_needed_ue_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Dedicated-SIDelivery-NeededUE-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ded_si_delivery_needed_ue_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ded_si_delivery_needed_ue_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* ded_si_delivery_needed_ue_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Dedicated-SIDelivery-NeededUE-Item"};
  return convert_enum_idx(names, 1, value, "ded_si_delivery_needed_ue_item_ies_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<ded_si_delivery_needed_ue_item_ies_o>;

// EUTRA-Transmission-Bandwidth ::= ENUMERATED
const char* eutra_tx_bw_opts::to_string() const
{
  static const char* names[] = {"bw6", "bw15", "bw25", "bw50", "bw75", "bw100"};
  return convert_enum_idx(names, 6, value, "eutra_tx_bw_e");
}
uint8_t eutra_tx_bw_opts::to_number() const
{
  static const uint8_t numbers[] = {6, 15, 25, 50, 75, 100};
  return map_enum_number(numbers, 6, value, "eutra_tx_bw_e");
}

// EUTRA-Coex-FDD-Info ::= SEQUENCE
SRSASN_CODE eutra_coex_fdd_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ul_earfcn_present, 1));
  HANDLE_CODE(bref.pack(ul_tx_bw_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  if (ul_earfcn_present) {
    HANDLE_CODE(pack_integer(bref, ul_earfcn, (uint32_t)0u, (uint32_t)262143u, false, true));
  }
  HANDLE_CODE(pack_integer(bref, dl_earfcn, (uint32_t)0u, (uint32_t)262143u, false, true));
  if (ul_tx_bw_present) {
    HANDLE_CODE(ul_tx_bw.pack(bref));
  }
  HANDLE_CODE(dl_tx_bw.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_coex_fdd_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ul_earfcn_present, 1));
  HANDLE_CODE(bref.unpack(ul_tx_bw_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  if (ul_earfcn_present) {
    HANDLE_CODE(unpack_integer(ul_earfcn, bref, (uint32_t)0u, (uint32_t)262143u, false, true));
  }
  HANDLE_CODE(unpack_integer(dl_earfcn, bref, (uint32_t)0u, (uint32_t)262143u, false, true));
  if (ul_tx_bw_present) {
    HANDLE_CODE(ul_tx_bw.unpack(bref));
  }
  HANDLE_CODE(dl_tx_bw.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_coex_fdd_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_earfcn_present) {
    j.write_int("uL-EARFCN", ul_earfcn);
  }
  j.write_int("dL-EARFCN", dl_earfcn);
  if (ul_tx_bw_present) {
    j.write_str("uL-Transmission-Bandwidth", ul_tx_bw.to_string());
  }
  j.write_str("dL-Transmission-Bandwidth", dl_tx_bw.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// EUTRA-CyclicPrefixDL ::= ENUMERATED
const char* eutra_cp_dl_opts::to_string() const
{
  static const char* names[] = {"normal", "extended"};
  return convert_enum_idx(names, 2, value, "eutra_cp_dl_e");
}

// EUTRA-CyclicPrefixUL ::= ENUMERATED
const char* eutra_cp_ul_opts::to_string() const
{
  static const char* names[] = {"normal", "extended"};
  return convert_enum_idx(names, 2, value, "eutra_cp_ul_e");
}

// EUTRA-SpecialSubframePatterns ::= ENUMERATED
const char* eutra_special_sf_patterns_opts::to_string() const
{
  static const char* names[] = {
      "ssp0", "ssp1", "ssp2", "ssp3", "ssp4", "ssp5", "ssp6", "ssp7", "ssp8", "ssp9", "ssp10"};
  return convert_enum_idx(names, 11, value, "eutra_special_sf_patterns_e");
}
uint8_t eutra_special_sf_patterns_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  return map_enum_number(numbers, 11, value, "eutra_special_sf_patterns_e");
}

// EUTRA-SpecialSubframe-Info ::= SEQUENCE
SRSASN_CODE eutra_special_sf_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(special_sf_patterns.pack(bref));
  HANDLE_CODE(cp_dl.pack(bref));
  HANDLE_CODE(cp_ul.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_special_sf_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(special_sf_patterns.unpack(bref));
  HANDLE_CODE(cp_dl.unpack(bref));
  HANDLE_CODE(cp_ul.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_special_sf_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("specialSubframePatterns", special_sf_patterns.to_string());
  j.write_str("cyclicPrefixDL", cp_dl.to_string());
  j.write_str("cyclicPrefixUL", cp_ul.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// EUTRA-SubframeAssignment ::= ENUMERATED
const char* eutra_sf_assign_opts::to_string() const
{
  static const char* names[] = {"sa0", "sa1", "sa2", "sa3", "sa4", "sa5", "sa6"};
  return convert_enum_idx(names, 7, value, "eutra_sf_assign_e");
}
uint8_t eutra_sf_assign_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6};
  return map_enum_number(numbers, 7, value, "eutra_sf_assign_e");
}

// EUTRA-Coex-TDD-Info ::= SEQUENCE
SRSASN_CODE eutra_coex_tdd_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, earfcn, (uint32_t)0u, (uint32_t)262143u, false, true));
  HANDLE_CODE(tx_bw.pack(bref));
  HANDLE_CODE(sf_assign.pack(bref));
  HANDLE_CODE(special_sf_info.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_coex_tdd_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(earfcn, bref, (uint32_t)0u, (uint32_t)262143u, false, true));
  HANDLE_CODE(tx_bw.unpack(bref));
  HANDLE_CODE(sf_assign.unpack(bref));
  HANDLE_CODE(special_sf_info.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_coex_tdd_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("eARFCN", earfcn);
  j.write_str("transmission-Bandwidth", tx_bw.to_string());
  j.write_str("subframeAssignment", sf_assign.to_string());
  j.write_fieldname("specialSubframe-Info");
  special_sf_info.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// EUTRA-Coex-Mode-Info ::= CHOICE
void eutra_coex_mode_info_c::destroy_()
{
  switch (type_) {
    case types::fdd:
      c.destroy<eutra_coex_fdd_info_s>();
      break;
    case types::tdd:
      c.destroy<eutra_coex_tdd_info_s>();
      break;
    default:
      break;
  }
}
void eutra_coex_mode_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fdd:
      c.init<eutra_coex_fdd_info_s>();
      break;
    case types::tdd:
      c.init<eutra_coex_tdd_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "eutra_coex_mode_info_c");
  }
}
eutra_coex_mode_info_c::eutra_coex_mode_info_c(const eutra_coex_mode_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fdd:
      c.init(other.c.get<eutra_coex_fdd_info_s>());
      break;
    case types::tdd:
      c.init(other.c.get<eutra_coex_tdd_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "eutra_coex_mode_info_c");
  }
}
eutra_coex_mode_info_c& eutra_coex_mode_info_c::operator=(const eutra_coex_mode_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fdd:
      c.set(other.c.get<eutra_coex_fdd_info_s>());
      break;
    case types::tdd:
      c.set(other.c.get<eutra_coex_tdd_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "eutra_coex_mode_info_c");
  }

  return *this;
}
eutra_coex_fdd_info_s& eutra_coex_mode_info_c::set_fdd()
{
  set(types::fdd);
  return c.get<eutra_coex_fdd_info_s>();
}
eutra_coex_tdd_info_s& eutra_coex_mode_info_c::set_tdd()
{
  set(types::tdd);
  return c.get<eutra_coex_tdd_info_s>();
}
void eutra_coex_mode_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fdd:
      j.write_fieldname("fDD");
      c.get<eutra_coex_fdd_info_s>().to_json(j);
      break;
    case types::tdd:
      j.write_fieldname("tDD");
      c.get<eutra_coex_tdd_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "eutra_coex_mode_info_c");
  }
  j.end_obj();
}
SRSASN_CODE eutra_coex_mode_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fdd:
      HANDLE_CODE(c.get<eutra_coex_fdd_info_s>().pack(bref));
      break;
    case types::tdd:
      HANDLE_CODE(c.get<eutra_coex_tdd_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "eutra_coex_mode_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_coex_mode_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fdd:
      HANDLE_CODE(c.get<eutra_coex_fdd_info_s>().unpack(bref));
      break;
    case types::tdd:
      HANDLE_CODE(c.get<eutra_coex_tdd_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "eutra_coex_mode_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* eutra_coex_mode_info_c::types_opts::to_string() const
{
  static const char* names[] = {"fDD", "tDD"};
  return convert_enum_idx(names, 2, value, "eutra_coex_mode_info_c::types");
}

// EUTRA-FDD-Info ::= SEQUENCE
SRSASN_CODE eutra_fdd_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, ul_offset_to_point_a, (uint16_t)0u, (uint16_t)2199u, true, true));
  HANDLE_CODE(pack_integer(bref, dl_offset_to_point_a, (uint16_t)0u, (uint16_t)2199u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_fdd_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(ul_offset_to_point_a, bref, (uint16_t)0u, (uint16_t)2199u, true, true));
  HANDLE_CODE(unpack_integer(dl_offset_to_point_a, bref, (uint16_t)0u, (uint16_t)2199u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_fdd_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("uL-offsetToPointA", ul_offset_to_point_a);
  j.write_int("dL-offsetToPointA", dl_offset_to_point_a);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// EUTRA-TDD-Info ::= SEQUENCE
SRSASN_CODE eutra_tdd_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, offset_to_point_a, (uint16_t)0u, (uint16_t)2199u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_tdd_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(offset_to_point_a, bref, (uint16_t)0u, (uint16_t)2199u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_tdd_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("offsetToPointA", offset_to_point_a);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// EUTRA-Mode-Info ::= CHOICE
void eutra_mode_info_c::destroy_()
{
  switch (type_) {
    case types::eutra_fdd:
      c.destroy<eutra_fdd_info_s>();
      break;
    case types::eutra_tdd:
      c.destroy<eutra_tdd_info_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void eutra_mode_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::eutra_fdd:
      c.init<eutra_fdd_info_s>();
      break;
    case types::eutra_tdd:
      c.init<eutra_tdd_info_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "eutra_mode_info_c");
  }
}
eutra_mode_info_c::eutra_mode_info_c(const eutra_mode_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::eutra_fdd:
      c.init(other.c.get<eutra_fdd_info_s>());
      break;
    case types::eutra_tdd:
      c.init(other.c.get<eutra_tdd_info_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "eutra_mode_info_c");
  }
}
eutra_mode_info_c& eutra_mode_info_c::operator=(const eutra_mode_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::eutra_fdd:
      c.set(other.c.get<eutra_fdd_info_s>());
      break;
    case types::eutra_tdd:
      c.set(other.c.get<eutra_tdd_info_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "eutra_mode_info_c");
  }

  return *this;
}
eutra_fdd_info_s& eutra_mode_info_c::set_eutra_fdd()
{
  set(types::eutra_fdd);
  return c.get<eutra_fdd_info_s>();
}
eutra_tdd_info_s& eutra_mode_info_c::set_eutra_tdd()
{
  set(types::eutra_tdd);
  return c.get<eutra_tdd_info_s>();
}
protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>& eutra_mode_info_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>();
}
void eutra_mode_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutra_fdd:
      j.write_fieldname("eUTRAFDD");
      c.get<eutra_fdd_info_s>().to_json(j);
      break;
    case types::eutra_tdd:
      j.write_fieldname("eUTRATDD");
      c.get<eutra_tdd_info_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "eutra_mode_info_c");
  }
  j.end_obj();
}
SRSASN_CODE eutra_mode_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutra_fdd:
      HANDLE_CODE(c.get<eutra_fdd_info_s>().pack(bref));
      break;
    case types::eutra_tdd:
      HANDLE_CODE(c.get<eutra_tdd_info_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "eutra_mode_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_mode_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutra_fdd:
      HANDLE_CODE(c.get<eutra_fdd_info_s>().unpack(bref));
      break;
    case types::eutra_tdd:
      HANDLE_CODE(c.get<eutra_tdd_info_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<eutra_mode_info_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "eutra_mode_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* eutra_mode_info_c::types_opts::to_string() const
{
  static const char* names[] = {"eUTRAFDD", "eUTRATDD", "choice-extension"};
  return convert_enum_idx(names, 3, value, "eutra_mode_info_c::types");
}

// EUTRA-PRACH-Configuration ::= SEQUENCE
SRSASN_CODE eutra_prach_cfg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(prach_cfg_idx_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, root_seq_idx, (uint16_t)0u, (uint16_t)837u, false, true));
  HANDLE_CODE(pack_integer(bref, zero_correlation_idx, (uint8_t)0u, (uint8_t)15u, false, true));
  HANDLE_CODE(bref.pack(high_speed_flag, 1));
  HANDLE_CODE(pack_integer(bref, prach_freq_offset, (uint8_t)0u, (uint8_t)94u, false, true));
  if (prach_cfg_idx_present) {
    HANDLE_CODE(pack_integer(bref, prach_cfg_idx, (uint8_t)0u, (uint8_t)63u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_prach_cfg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(prach_cfg_idx_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(root_seq_idx, bref, (uint16_t)0u, (uint16_t)837u, false, true));
  HANDLE_CODE(unpack_integer(zero_correlation_idx, bref, (uint8_t)0u, (uint8_t)15u, false, true));
  HANDLE_CODE(bref.unpack(high_speed_flag, 1));
  HANDLE_CODE(unpack_integer(prach_freq_offset, bref, (uint8_t)0u, (uint8_t)94u, false, true));
  if (prach_cfg_idx_present) {
    HANDLE_CODE(unpack_integer(prach_cfg_idx, bref, (uint8_t)0u, (uint8_t)63u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_prach_cfg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("rootSequenceIndex", root_seq_idx);
  j.write_int("zeroCorrelationIndex", zero_correlation_idx);
  j.write_bool("highSpeedFlag", high_speed_flag);
  j.write_int("prach-FreqOffset", prach_freq_offset);
  if (prach_cfg_idx_present) {
    j.write_int("prach-ConfigIndex", prach_cfg_idx);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Served-EUTRA-Cells-Information ::= SEQUENCE
SRSASN_CODE served_eutra_cells_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(eutra_mode_info.pack(bref));
  HANDLE_CODE(protected_eutra_res_ind.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE served_eutra_cells_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(eutra_mode_info.unpack(bref));
  HANDLE_CODE(protected_eutra_res_ind.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void served_eutra_cells_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eUTRA-Mode-Info");
  eutra_mode_info.to_json(j);
  j.write_str("protectedEUTRAResourceIndication", protected_eutra_res_ind.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// EUTRACells-List-item ::= SEQUENCE
SRSASN_CODE eutra_cells_list_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(eutra_cell_id.pack(bref));
  HANDLE_CODE(served_eutra_cells_info.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_cells_list_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(eutra_cell_id.unpack(bref));
  HANDLE_CODE(served_eutra_cells_info.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_cells_list_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("eUTRA-Cell-ID", eutra_cell_id.to_string());
  j.write_fieldname("served-EUTRA-Cells-Information");
  served_eutra_cells_info.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// ErrorIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t error_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 40, 41, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool error_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e error_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 40:
      return crit_e::ignore;
    case 41:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
error_ind_ies_o::value_c error_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e error_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 40:
      return presence_e::optional;
    case 41:
      return presence_e::optional;
    case 0:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void error_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void error_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
}
error_ind_ies_o::value_c::value_c(const error_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
}
error_ind_ies_o::value_c& error_ind_ies_o::value_c::operator=(const error_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& error_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint64_t& error_ind_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& error_ind_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& error_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& error_ind_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& error_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& error_ind_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& error_ind_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& error_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& error_ind_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void error_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE error_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE error_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* error_ind_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..255,...)", "INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "Cause", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 5, value, "error_ind_ies_o::value_c::types");
}

template struct asn1::protocol_ie_field_s<error_ind_ies_o>;

error_ind_ies_container::error_ind_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_ue_f1ap_id(40, crit_e::ignore),
  gnb_du_ue_f1ap_id(41, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE error_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += gnb_cu_ue_f1ap_id_present ? 1 : 0;
  nof_ies += gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += cause_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  }
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  }
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE error_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 40: {
        gnb_cu_ue_f1ap_id_present = true;
        gnb_cu_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        gnb_du_ue_f1ap_id_present = true;
        gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        cause_present = true;
        cause.id      = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void error_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (gnb_cu_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_cu_ue_f1ap_id.to_json(j);
  }
  if (gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_ue_f1ap_id.to_json(j);
  }
  if (cause_present) {
    j.write_fieldname("");
    cause.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// SliceSupportItem ::= SEQUENCE
SRSASN_CODE slice_support_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(snssai.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE slice_support_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(snssai.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void slice_support_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sNSSAI");
  snssai.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// ExtendedServedPLMNs-Item ::= SEQUENCE
SRSASN_CODE extended_served_plmns_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(tai_slice_support_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.pack(bref));
  if (tai_slice_support_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, tai_slice_support_list, 1, 1024, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE extended_served_plmns_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool tai_slice_support_list_present;
  HANDLE_CODE(bref.unpack(tai_slice_support_list_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.unpack(bref));
  if (tai_slice_support_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(tai_slice_support_list, bref, 1, 1024, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void extended_served_plmns_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("pLMN-Identity", plmn_id.to_string());
  if (tai_slice_support_list.size() > 0) {
    j.start_array("tAISliceSupportList");
    for (const auto& e1 : tai_slice_support_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// NRNRB ::= ENUMERATED
const char* nr_nrb_opts::to_string() const
{
  static const char* names[] = {"nrb11",  "nrb18",  "nrb24",  "nrb25",  "nrb31",  "nrb32",  "nrb38",  "nrb51",
                                "nrb52",  "nrb65",  "nrb66",  "nrb78",  "nrb79",  "nrb93",  "nrb106", "nrb107",
                                "nrb121", "nrb132", "nrb133", "nrb135", "nrb160", "nrb162", "nrb189", "nrb216",
                                "nrb217", "nrb245", "nrb264", "nrb270", "nrb273"};
  return convert_enum_idx(names, 29, value, "nr_nrb_e");
}
uint16_t nr_nrb_opts::to_number() const
{
  static const uint16_t numbers[] = {11,  18,  24,  25,  31,  32,  38,  51,  52,  65,  66,  78,  79,  93, 106,
                                     107, 121, 132, 133, 135, 160, 162, 189, 216, 217, 245, 264, 270, 273};
  return map_enum_number(numbers, 29, value, "nr_nrb_e");
}

// NRSCS ::= ENUMERATED
const char* nr_scs_opts::to_string() const
{
  static const char* names[] = {"scs15", "scs30", "scs60", "scs120"};
  return convert_enum_idx(names, 4, value, "nr_scs_e");
}
uint8_t nr_scs_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 30, 60, 120};
  return map_enum_number(numbers, 4, value, "nr_scs_e");
}

// SupportedSULFreqBandItem ::= SEQUENCE
SRSASN_CODE supported_sul_freq_band_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, freq_band_ind_nr, (uint16_t)1u, (uint16_t)1024u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE supported_sul_freq_band_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(freq_band_ind_nr, bref, (uint16_t)1u, (uint16_t)1024u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void supported_sul_freq_band_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("freqBandIndicatorNr", freq_band_ind_nr);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Transmission-Bandwidth ::= SEQUENCE
SRSASN_CODE tx_bw_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_scs.pack(bref));
  HANDLE_CODE(nr_nrb.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE tx_bw_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_scs.unpack(bref));
  HANDLE_CODE(nr_nrb.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void tx_bw_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("nRSCS", nr_scs.to_string());
  j.write_str("nRNRB", nr_nrb.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// FreqBandNrItem ::= SEQUENCE
SRSASN_CODE freq_band_nr_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, freq_band_ind_nr, (uint16_t)1u, (uint16_t)1024u, true, true));
  HANDLE_CODE(pack_dyn_seq_of(bref, supported_sul_band_list, 0, 32, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_band_nr_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(freq_band_ind_nr, bref, (uint16_t)1u, (uint16_t)1024u, true, true));
  HANDLE_CODE(unpack_dyn_seq_of(supported_sul_band_list, bref, 0, 32, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void freq_band_nr_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("freqBandIndicatorNr", freq_band_ind_nr);
  j.start_array("supportedSULBandList");
  for (const auto& e1 : supported_sul_band_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SUL-Information ::= SEQUENCE
SRSASN_CODE sul_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, sul_nr_arfcn, (uint32_t)0u, (uint32_t)3279165u, false, true));
  HANDLE_CODE(sul_tx_bw.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sul_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(sul_nr_arfcn, bref, (uint32_t)0u, (uint32_t)3279165u, false, true));
  HANDLE_CODE(sul_tx_bw.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sul_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sUL-NRARFCN", sul_nr_arfcn);
  j.write_fieldname("sUL-transmission-Bandwidth");
  sul_tx_bw.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// NRFreqInfo ::= SEQUENCE
SRSASN_CODE nr_freq_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sul_info_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, nr_arfcn, (uint32_t)0u, (uint32_t)3279165u, false, true));
  if (sul_info_present) {
    HANDLE_CODE(sul_info.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, freq_band_list_nr, 1, 32, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_freq_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sul_info_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(nr_arfcn, bref, (uint32_t)0u, (uint32_t)3279165u, false, true));
  if (sul_info_present) {
    HANDLE_CODE(sul_info.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(freq_band_list_nr, bref, 1, 32, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void nr_freq_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("nRARFCN", nr_arfcn);
  if (sul_info_present) {
    j.write_fieldname("sul-Information");
    sul_info.to_json(j);
  }
  j.start_array("freqBandListNr");
  for (const auto& e1 : freq_band_list_nr) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// ServedPLMNs-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t served_plmns_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {131};
  return map_enum_number(names, 1, idx, "id");
}
bool served_plmns_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 131 == id;
}
crit_e served_plmns_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 131) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
served_plmns_item_ext_ies_o::ext_c served_plmns_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 131) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_plmns_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 131) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void served_plmns_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("SliceSupportList");
  for (const auto& e1 : c) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}
SRSASN_CODE served_plmns_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(pack_dyn_seq_of(bref, c, 1, 1024, true));
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_plmns_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(unpack_dyn_seq_of(c, bref, 1, 1024, true));
  return SRSASN_SUCCESS;
}

const char* served_plmns_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"SliceSupportList"};
  return convert_enum_idx(names, 1, value, "served_plmns_item_ext_ies_o::ext_c::types");
}

// UACAction ::= ENUMERATED
const char* uac_action_opts::to_string() const
{
  static const char* names[] = {"reject-non-emergency-mo-dt",
                                "reject-rrc-cr-signalling",
                                "permit-emergency-sessions-and-mobile-terminated-services-only",
                                "permit-high-priority-sessions-and-mobile-terminated-services-only"};
  return convert_enum_idx(names, 4, value, "uac_action_e");
}

// UACOperatorDefined ::= SEQUENCE
SRSASN_CODE uac_operator_defined_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, access_category, (uint8_t)32u, (uint8_t)63u, true, true));
  HANDLE_CODE(access_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_operator_defined_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(access_category, bref, (uint8_t)32u, (uint8_t)63u, true, true));
  HANDLE_CODE(access_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uac_operator_defined_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("accessCategory", access_category);
  j.write_str("accessIdentity", access_id.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Cell-Direction ::= ENUMERATED
const char* cell_direction_opts::to_string() const
{
  static const char* names[] = {"dl-only", "ul-only"};
  return convert_enum_idx(names, 2, value, "cell_direction_e");
}

// FDD-Info ::= SEQUENCE
SRSASN_CODE fdd_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(ul_nr_freq_info.pack(bref));
  HANDLE_CODE(dl_nr_freq_info.pack(bref));
  HANDLE_CODE(ul_tx_bw.pack(bref));
  HANDLE_CODE(dl_tx_bw.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE fdd_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(ul_nr_freq_info.unpack(bref));
  HANDLE_CODE(dl_nr_freq_info.unpack(bref));
  HANDLE_CODE(ul_tx_bw.unpack(bref));
  HANDLE_CODE(dl_tx_bw.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void fdd_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("uL-NRFreqInfo");
  ul_nr_freq_info.to_json(j);
  j.write_fieldname("dL-NRFreqInfo");
  dl_nr_freq_info.to_json(j);
  j.write_fieldname("uL-Transmission-Bandwidth");
  ul_tx_bw.to_json(j);
  j.write_fieldname("dL-Transmission-Bandwidth");
  dl_tx_bw.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// ServedPLMNs-Item ::= SEQUENCE
SRSASN_CODE served_plmns_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(plmn_id.pack(bref));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE served_plmns_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void served_plmns_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("pLMN-Identity", plmn_id.to_string());
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// TDD-Info ::= SEQUENCE
SRSASN_CODE tdd_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_freq_info.pack(bref));
  HANDLE_CODE(tx_bw.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE tdd_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_freq_info.unpack(bref));
  HANDLE_CODE(tx_bw.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void tdd_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRFreqInfo");
  nr_freq_info.to_json(j);
  j.write_fieldname("transmission-Bandwidth");
  tx_bw.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// UACCategoryType ::= CHOICE
void uac_category_type_c::destroy_()
{
  switch (type_) {
    case types::uac_operator_defined:
      c.destroy<uac_operator_defined_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void uac_category_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::uac_standardized:
      break;
    case types::uac_operator_defined:
      c.init<uac_operator_defined_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "uac_category_type_c");
  }
}
uac_category_type_c::uac_category_type_c(const uac_category_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::uac_standardized:
      c.init(other.c.get<uac_action_e>());
      break;
    case types::uac_operator_defined:
      c.init(other.c.get<uac_operator_defined_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "uac_category_type_c");
  }
}
uac_category_type_c& uac_category_type_c::operator=(const uac_category_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::uac_standardized:
      c.set(other.c.get<uac_action_e>());
      break;
    case types::uac_operator_defined:
      c.set(other.c.get<uac_operator_defined_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "uac_category_type_c");
  }

  return *this;
}
uac_action_e& uac_category_type_c::set_uac_standardized()
{
  set(types::uac_standardized);
  return c.get<uac_action_e>();
}
uac_operator_defined_s& uac_category_type_c::set_uac_operator_defined()
{
  set(types::uac_operator_defined);
  return c.get<uac_operator_defined_s>();
}
protocol_ie_single_container_s<uac_category_type_ext_ies_o>& uac_category_type_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>();
}
void uac_category_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::uac_standardized:
      j.write_str("uACstandardized", c.get<uac_action_e>().to_string());
      break;
    case types::uac_operator_defined:
      j.write_fieldname("uACOperatorDefined");
      c.get<uac_operator_defined_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "uac_category_type_c");
  }
  j.end_obj();
}
SRSASN_CODE uac_category_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::uac_standardized:
      HANDLE_CODE(c.get<uac_action_e>().pack(bref));
      break;
    case types::uac_operator_defined:
      HANDLE_CODE(c.get<uac_operator_defined_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "uac_category_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_category_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::uac_standardized:
      HANDLE_CODE(c.get<uac_action_e>().unpack(bref));
      break;
    case types::uac_operator_defined:
      HANDLE_CODE(c.get<uac_operator_defined_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<uac_category_type_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "uac_category_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* uac_category_type_c::types_opts::to_string() const
{
  static const char* names[] = {"uACstandardized", "uACOperatorDefined", "choice-extension"};
  return convert_enum_idx(names, 3, value, "uac_category_type_c::types");
}

// NR-Mode-Info ::= CHOICE
void nr_mode_info_c::destroy_()
{
  switch (type_) {
    case types::fdd:
      c.destroy<fdd_info_s>();
      break;
    case types::tdd:
      c.destroy<tdd_info_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void nr_mode_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fdd:
      c.init<fdd_info_s>();
      break;
    case types::tdd:
      c.init<tdd_info_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "nr_mode_info_c");
  }
}
nr_mode_info_c::nr_mode_info_c(const nr_mode_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fdd:
      c.init(other.c.get<fdd_info_s>());
      break;
    case types::tdd:
      c.init(other.c.get<tdd_info_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "nr_mode_info_c");
  }
}
nr_mode_info_c& nr_mode_info_c::operator=(const nr_mode_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fdd:
      c.set(other.c.get<fdd_info_s>());
      break;
    case types::tdd:
      c.set(other.c.get<tdd_info_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "nr_mode_info_c");
  }

  return *this;
}
fdd_info_s& nr_mode_info_c::set_fdd()
{
  set(types::fdd);
  return c.get<fdd_info_s>();
}
tdd_info_s& nr_mode_info_c::set_tdd()
{
  set(types::tdd);
  return c.get<tdd_info_s>();
}
protocol_ie_single_container_s<nr_mode_info_ext_ies_o>& nr_mode_info_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>();
}
void nr_mode_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fdd:
      j.write_fieldname("fDD");
      c.get<fdd_info_s>().to_json(j);
      break;
    case types::tdd:
      j.write_fieldname("tDD");
      c.get<tdd_info_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "nr_mode_info_c");
  }
  j.end_obj();
}
SRSASN_CODE nr_mode_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fdd:
      HANDLE_CODE(c.get<fdd_info_s>().pack(bref));
      break;
    case types::tdd:
      HANDLE_CODE(c.get<tdd_info_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "nr_mode_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_mode_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fdd:
      HANDLE_CODE(c.get<fdd_info_s>().unpack(bref));
      break;
    case types::tdd:
      HANDLE_CODE(c.get<tdd_info_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<nr_mode_info_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "nr_mode_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* nr_mode_info_c::types_opts::to_string() const
{
  static const char* names[] = {"fDD", "tDD", "choice-extension"};
  return convert_enum_idx(names, 3, value, "nr_mode_info_c::types");
}

// Served-Cell-Information-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t served_cell_info_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {139, 196, 201, 223, 232};
  return map_enum_number(names, 5, idx, "id");
}
bool served_cell_info_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {139, 196, 201, 223, 232};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e served_cell_info_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 139:
      return crit_e::ignore;
    case 196:
      return crit_e::ignore;
    case 201:
      return crit_e::ignore;
    case 223:
      return crit_e::ignore;
    case 232:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
served_cell_info_ext_ies_o::ext_c served_cell_info_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 139:
      ret.set(ext_c::types::ranac);
      break;
    case 196:
      ret.set(ext_c::types::extended_served_plmns_list);
      break;
    case 201:
      ret.set(ext_c::types::cell_direction);
      break;
    case 223:
      ret.set(ext_c::types::bplmn_id_info_list);
      break;
    case 232:
      ret.set(ext_c::types::cell_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_cell_info_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 139:
      return presence_e::optional;
    case 196:
      return presence_e::optional;
    case 201:
      return presence_e::optional;
    case 223:
      return presence_e::optional;
    case 232:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void served_cell_info_ext_ies_o::ext_c::destroy_()
{
  switch (type_) {
    case types::extended_served_plmns_list:
      c.destroy<extended_served_plmns_list_l>();
      break;
    case types::bplmn_id_info_list:
      c.destroy<bplmn_id_info_list_l>();
      break;
    case types::cell_type:
      c.destroy<cell_type_s>();
      break;
    default:
      break;
  }
}
void served_cell_info_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ranac:
      break;
    case types::extended_served_plmns_list:
      c.init<extended_served_plmns_list_l>();
      break;
    case types::cell_direction:
      break;
    case types::bplmn_id_info_list:
      c.init<bplmn_id_info_list_l>();
      break;
    case types::cell_type:
      c.init<cell_type_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "served_cell_info_ext_ies_o::ext_c");
  }
}
served_cell_info_ext_ies_o::ext_c::ext_c(const served_cell_info_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ranac:
      c.init(other.c.get<uint16_t>());
      break;
    case types::extended_served_plmns_list:
      c.init(other.c.get<extended_served_plmns_list_l>());
      break;
    case types::cell_direction:
      c.init(other.c.get<cell_direction_e>());
      break;
    case types::bplmn_id_info_list:
      c.init(other.c.get<bplmn_id_info_list_l>());
      break;
    case types::cell_type:
      c.init(other.c.get<cell_type_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "served_cell_info_ext_ies_o::ext_c");
  }
}
served_cell_info_ext_ies_o::ext_c&
served_cell_info_ext_ies_o::ext_c::operator=(const served_cell_info_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ranac:
      c.set(other.c.get<uint16_t>());
      break;
    case types::extended_served_plmns_list:
      c.set(other.c.get<extended_served_plmns_list_l>());
      break;
    case types::cell_direction:
      c.set(other.c.get<cell_direction_e>());
      break;
    case types::bplmn_id_info_list:
      c.set(other.c.get<bplmn_id_info_list_l>());
      break;
    case types::cell_type:
      c.set(other.c.get<cell_type_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "served_cell_info_ext_ies_o::ext_c");
  }

  return *this;
}
uint16_t& served_cell_info_ext_ies_o::ext_c::ranac()
{
  assert_choice_type(types::ranac, type_, "Extension");
  return c.get<uint16_t>();
}
extended_served_plmns_list_l& served_cell_info_ext_ies_o::ext_c::extended_served_plmns_list()
{
  assert_choice_type(types::extended_served_plmns_list, type_, "Extension");
  return c.get<extended_served_plmns_list_l>();
}
cell_direction_e& served_cell_info_ext_ies_o::ext_c::cell_direction()
{
  assert_choice_type(types::cell_direction, type_, "Extension");
  return c.get<cell_direction_e>();
}
bplmn_id_info_list_l& served_cell_info_ext_ies_o::ext_c::bplmn_id_info_list()
{
  assert_choice_type(types::bplmn_id_info_list, type_, "Extension");
  return c.get<bplmn_id_info_list_l>();
}
cell_type_s& served_cell_info_ext_ies_o::ext_c::cell_type()
{
  assert_choice_type(types::cell_type, type_, "Extension");
  return c.get<cell_type_s>();
}
const uint16_t& served_cell_info_ext_ies_o::ext_c::ranac() const
{
  assert_choice_type(types::ranac, type_, "Extension");
  return c.get<uint16_t>();
}
const extended_served_plmns_list_l& served_cell_info_ext_ies_o::ext_c::extended_served_plmns_list() const
{
  assert_choice_type(types::extended_served_plmns_list, type_, "Extension");
  return c.get<extended_served_plmns_list_l>();
}
const cell_direction_e& served_cell_info_ext_ies_o::ext_c::cell_direction() const
{
  assert_choice_type(types::cell_direction, type_, "Extension");
  return c.get<cell_direction_e>();
}
const bplmn_id_info_list_l& served_cell_info_ext_ies_o::ext_c::bplmn_id_info_list() const
{
  assert_choice_type(types::bplmn_id_info_list, type_, "Extension");
  return c.get<bplmn_id_info_list_l>();
}
const cell_type_s& served_cell_info_ext_ies_o::ext_c::cell_type() const
{
  assert_choice_type(types::cell_type, type_, "Extension");
  return c.get<cell_type_s>();
}
void served_cell_info_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ranac:
      j.write_int("INTEGER (0..255)", c.get<uint16_t>());
      break;
    case types::extended_served_plmns_list:
      j.start_array("ExtendedServedPLMNs-List");
      for (const auto& e1 : c.get<extended_served_plmns_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cell_direction:
      j.write_str("Cell-Direction", c.get<cell_direction_e>().to_string());
      break;
    case types::bplmn_id_info_list:
      j.start_array("BPLMN-ID-Info-List");
      for (const auto& e1 : c.get<bplmn_id_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cell_type:
      j.write_fieldname("CellType");
      c.get<cell_type_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "served_cell_info_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE served_cell_info_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ranac:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, false, true));
      break;
    case types::extended_served_plmns_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<extended_served_plmns_list_l>(), 1, 6, true));
      break;
    case types::cell_direction:
      HANDLE_CODE(c.get<cell_direction_e>().pack(bref));
      break;
    case types::bplmn_id_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bplmn_id_info_list_l>(), 1, 11, true));
      break;
    case types::cell_type:
      HANDLE_CODE(c.get<cell_type_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "served_cell_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cell_info_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ranac:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, false, true));
      break;
    case types::extended_served_plmns_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<extended_served_plmns_list_l>(), bref, 1, 6, true));
      break;
    case types::cell_direction:
      HANDLE_CODE(c.get<cell_direction_e>().unpack(bref));
      break;
    case types::bplmn_id_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bplmn_id_info_list_l>(), bref, 1, 11, true));
      break;
    case types::cell_type:
      HANDLE_CODE(c.get<cell_type_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "served_cell_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* served_cell_info_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..255)", "ExtendedServedPLMNs-List", "Cell-Direction", "BPLMN-ID-Info-List", "CellType"};
  return convert_enum_idx(names, 5, value, "served_cell_info_ext_ies_o::ext_c::types");
}
uint8_t served_cell_info_ext_ies_o::ext_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "served_cell_info_ext_ies_o::ext_c::types");
}

// UACType-Item ::= SEQUENCE
SRSASN_CODE uac_type_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, uac_reduction_ind, (uint8_t)0u, (uint8_t)100u, false, true));
  HANDLE_CODE(uac_category_type.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_type_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(uac_reduction_ind, bref, (uint8_t)0u, (uint8_t)100u, false, true));
  HANDLE_CODE(uac_category_type.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uac_type_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("uACReductionIndication", uac_reduction_ind);
  j.write_fieldname("uACCategoryType");
  uac_category_type.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// CellULConfigured ::= ENUMERATED
const char* cell_ul_cfg_opts::to_string() const
{
  static const char* names[] = {"none", "ul", "sul", "ul-and-sul"};
  return convert_enum_idx(names, 4, value, "cell_ul_cfg_e");
}
uint8_t cell_ul_cfg_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "cell_ul_cfg_e");
}

// DuplicationIndication ::= ENUMERATED
const char* dupl_ind_opts::to_string() const
{
  static const char* names[] = {"true", "false"};
  return convert_enum_idx(names, 2, value, "dupl_ind_e");
}

// GNB-CU-TNL-Association-To-Remove-Item-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {229};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 229 == id;
}
crit_e gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 229) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::ext_c gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 229) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 229) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("CP-TransportLayerAddress");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"CP-TransportLayerAddress"};
  return convert_enum_idx(names, 1, value, "gnb_cu_tnl_assoc_to_rem_item_ext_ies_o::ext_c::types");
}

// GNB-DU-System-Information ::= SEQUENCE
SRSASN_CODE gnb_du_sys_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(mib_msg.pack(bref));
  HANDLE_CODE(sib1_msg.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_sys_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(mib_msg.unpack(bref));
  HANDLE_CODE(sib1_msg.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gnb_du_sys_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("mIB-message", mib_msg.to_string());
  j.write_str("sIB1-message", sib1_msg.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// IgnorePRACHConfiguration ::= ENUMERATED
const char* ignore_prach_cfg_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "ignore_prach_cfg_e");
}

// SCell-ToBeSetup-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t scell_to_be_setup_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {182};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_setup_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 182 == id;
}
crit_e scell_to_be_setup_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 182) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_setup_item_ext_ies_o::ext_c scell_to_be_setup_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 182) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_setup_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 182) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void scell_to_be_setup_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("INTEGER (1..64,...)", c);
  j.end_obj();
}
SRSASN_CODE scell_to_be_setup_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(pack_integer(bref, c, (uint8_t)1u, (uint8_t)64u, true, true));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(unpack_integer(c, bref, (uint8_t)1u, (uint8_t)64u, true, true));
  return SRSASN_SUCCESS;
}

const char* scell_to_be_setup_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (1..64,...)"};
  return convert_enum_idx(names, 1, value, "scell_to_be_setup_item_ext_ies_o::ext_c::types");
}
uint8_t scell_to_be_setup_item_ext_ies_o::ext_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "scell_to_be_setup_item_ext_ies_o::ext_c::types");
}

// SCell-ToBeSetupMod-ItemExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t scell_to_be_setup_mod_item_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {182};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_setup_mod_item_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 182 == id;
}
crit_e scell_to_be_setup_mod_item_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 182) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_setup_mod_item_ext_ies_o::ext_c scell_to_be_setup_mod_item_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 182) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_setup_mod_item_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 182) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void scell_to_be_setup_mod_item_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("INTEGER (1..64,...)", c);
  j.end_obj();
}
SRSASN_CODE scell_to_be_setup_mod_item_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(pack_integer(bref, c, (uint8_t)1u, (uint8_t)64u, true, true));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_mod_item_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(unpack_integer(c, bref, (uint8_t)1u, (uint8_t)64u, true, true));
  return SRSASN_SUCCESS;
}

const char* scell_to_be_setup_mod_item_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (1..64,...)"};
  return convert_enum_idx(names, 1, value, "scell_to_be_setup_mod_item_ext_ies_o::ext_c::types");
}
uint8_t scell_to_be_setup_mod_item_ext_ies_o::ext_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "scell_to_be_setup_mod_item_ext_ies_o::ext_c::types");
}

template struct asn1::protocol_ext_field_s<served_cell_info_ext_ies_o>;

served_cell_info_ext_ies_container::served_cell_info_ext_ies_container() :
  ranac(139, crit_e::ignore),
  extended_served_plmns_list(196, crit_e::ignore),
  cell_direction(201, crit_e::ignore),
  bplmn_id_info_list(223, crit_e::ignore),
  cell_type(232, crit_e::ignore)
{
}
SRSASN_CODE served_cell_info_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += ranac_present ? 1 : 0;
  nof_ies += extended_served_plmns_list_present ? 1 : 0;
  nof_ies += cell_direction_present ? 1 : 0;
  nof_ies += bplmn_id_info_list_present ? 1 : 0;
  nof_ies += cell_type_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (ranac_present) {
    HANDLE_CODE(ranac.pack(bref));
  }
  if (extended_served_plmns_list_present) {
    HANDLE_CODE(extended_served_plmns_list.pack(bref));
  }
  if (cell_direction_present) {
    HANDLE_CODE(cell_direction.pack(bref));
  }
  if (bplmn_id_info_list_present) {
    HANDLE_CODE(bplmn_id_info_list.pack(bref));
  }
  if (cell_type_present) {
    HANDLE_CODE(cell_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cell_info_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 139: {
        ranac_present = true;
        ranac.id      = id;
        HANDLE_CODE(ranac.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ranac.ext.unpack(bref));
        break;
      }
      case 196: {
        extended_served_plmns_list_present = true;
        extended_served_plmns_list.id      = id;
        HANDLE_CODE(extended_served_plmns_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_served_plmns_list.ext.unpack(bref));
        break;
      }
      case 201: {
        cell_direction_present = true;
        cell_direction.id      = id;
        HANDLE_CODE(cell_direction.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cell_direction.ext.unpack(bref));
        break;
      }
      case 223: {
        bplmn_id_info_list_present = true;
        bplmn_id_info_list.id      = id;
        HANDLE_CODE(bplmn_id_info_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bplmn_id_info_list.ext.unpack(bref));
        break;
      }
      case 232: {
        cell_type_present = true;
        cell_type.id      = id;
        HANDLE_CODE(cell_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cell_type.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void served_cell_info_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (ranac_present) {
    j.write_fieldname("");
    ranac.to_json(j);
  }
  if (extended_served_plmns_list_present) {
    j.write_fieldname("");
    extended_served_plmns_list.to_json(j);
  }
  if (cell_direction_present) {
    j.write_fieldname("");
    cell_direction.to_json(j);
  }
  if (bplmn_id_info_list_present) {
    j.write_fieldname("");
    bplmn_id_info_list.to_json(j);
  }
  if (cell_type_present) {
    j.write_fieldname("");
    cell_type.to_json(j);
  }
  j.end_obj();
}

// Served-Cell-Information ::= SEQUENCE
SRSASN_CODE served_cell_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(five_gs_tac_present, 1));
  HANDLE_CODE(bref.pack(cfg_eps_tac_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(pack_integer(bref, nr_pci, (uint16_t)0u, (uint16_t)1007u, false, true));
  if (five_gs_tac_present) {
    HANDLE_CODE(five_gs_tac.pack(bref));
  }
  if (cfg_eps_tac_present) {
    HANDLE_CODE(cfg_eps_tac.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, served_plmns, 1, 6, true));
  HANDLE_CODE(nr_mode_info.pack(bref));
  HANDLE_CODE(meas_timing_cfg.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cell_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(five_gs_tac_present, 1));
  HANDLE_CODE(bref.unpack(cfg_eps_tac_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  HANDLE_CODE(unpack_integer(nr_pci, bref, (uint16_t)0u, (uint16_t)1007u, false, true));
  if (five_gs_tac_present) {
    HANDLE_CODE(five_gs_tac.unpack(bref));
  }
  if (cfg_eps_tac_present) {
    HANDLE_CODE(cfg_eps_tac.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(served_plmns, bref, 1, 6, true));
  HANDLE_CODE(nr_mode_info.unpack(bref));
  HANDLE_CODE(meas_timing_cfg.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void served_cell_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  j.write_int("nRPCI", nr_pci);
  if (five_gs_tac_present) {
    j.write_str("fiveGS-TAC", five_gs_tac.to_string());
  }
  if (cfg_eps_tac_present) {
    j.write_str("configured-EPS-TAC", cfg_eps_tac.to_string());
  }
  j.start_array("servedPLMNs");
  for (const auto& e1 : served_plmns) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_fieldname("nR-Mode-Info");
  nr_mode_info.to_json(j);
  j.write_str("measurementTimingConfiguration", meas_timing_cfg.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// TNLAssociationUsage ::= ENUMERATED
const char* tnl_assoc_usage_opts::to_string() const
{
  static const char* names[] = {"ue", "non-ue", "both"};
  return convert_enum_idx(names, 3, value, "tnl_assoc_usage_e");
}

// UE-associatedLogicalF1-ConnectionItem ::= SEQUENCE
SRSASN_CODE ue_associated_lc_f1_conn_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gnb_cu_ue_f1ap_id_present, 1));
  HANDLE_CODE(bref.pack(gnb_du_ue_f1ap_id_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  if (gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_associated_lc_f1_conn_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gnb_cu_ue_f1ap_id_present, 1));
  HANDLE_CODE(bref.unpack(gnb_du_ue_f1ap_id_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  if (gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_associated_lc_f1_conn_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (gnb_cu_ue_f1ap_id_present) {
    j.write_int("gNB-CU-UE-F1AP-ID", gnb_cu_ue_f1ap_id);
  }
  if (gnb_du_ue_f1ap_id_present) {
    j.write_int("gNB-DU-UE-F1AP-ID", gnb_du_ue_f1ap_id);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// GNB-CU-TNL-Association-Failed-To-Setup-Item ::= SEQUENCE
SRSASN_CODE gnb_cu_tnl_assoc_failed_to_setup_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_failed_to_setup_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.unpack(bref));
  HANDLE_CODE(cause.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gnb_cu_tnl_assoc_failed_to_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("tNLAssociationTransportLayerAddress");
  tnl_assoc_transport_layer_address.to_json(j);
  j.write_fieldname("cause");
  cause.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// GNB-CU-TNL-Association-Setup-Item ::= SEQUENCE
SRSASN_CODE gnb_cu_tnl_assoc_setup_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_setup_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gnb_cu_tnl_assoc_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("tNLAssociationTransportLayerAddress");
  tnl_assoc_transport_layer_address.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// GNB-CU-TNL-Association-To-Add-Item ::= SEQUENCE
SRSASN_CODE gnb_cu_tnl_assoc_to_add_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.pack(bref));
  HANDLE_CODE(tnl_assoc_usage.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_add_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.unpack(bref));
  HANDLE_CODE(tnl_assoc_usage.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gnb_cu_tnl_assoc_to_add_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("tNLAssociationTransportLayerAddress");
  tnl_assoc_transport_layer_address.to_json(j);
  j.write_str("tNLAssociationUsage", tnl_assoc_usage.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// GNB-CU-TNL-Association-To-Remove-Item ::= SEQUENCE
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.pack(bref));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_s::unpack(cbit_ref& bref)
{
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void gnb_cu_tnl_assoc_to_rem_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("tNLAssociationTransportLayerAddress");
  tnl_assoc_transport_layer_address.to_json(j);
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// GNB-CU-TNL-Association-To-Update-Item ::= SEQUENCE
SRSASN_CODE gnb_cu_tnl_assoc_to_upd_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tnl_assoc_usage_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.pack(bref));
  if (tnl_assoc_usage_present) {
    HANDLE_CODE(tnl_assoc_usage.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_upd_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(tnl_assoc_usage_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.unpack(bref));
  if (tnl_assoc_usage_present) {
    HANDLE_CODE(tnl_assoc_usage.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gnb_cu_tnl_assoc_to_upd_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("tNLAssociationTransportLayerAddress");
  tnl_assoc_transport_layer_address.to_json(j);
  if (tnl_assoc_usage_present) {
    j.write_str("tNLAssociationUsage", tnl_assoc_usage.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// GNB-DU-Served-Cells-Item ::= SEQUENCE
SRSASN_CODE gnb_du_served_cells_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gnb_du_sys_info_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(served_cell_info.pack(bref));
  if (gnb_du_sys_info_present) {
    HANDLE_CODE(gnb_du_sys_info.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_served_cells_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gnb_du_sys_info_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(served_cell_info.unpack(bref));
  if (gnb_du_sys_info_present) {
    HANDLE_CODE(gnb_du_sys_info.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gnb_du_served_cells_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("served-Cell-Information");
  served_cell_info.to_json(j);
  if (gnb_du_sys_info_present) {
    j.write_fieldname("gNB-DU-System-Information");
    gnb_du_sys_info.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// GNB-DU-TNL-Association-To-Remove-Item ::= SEQUENCE
SRSASN_CODE gnb_du_tnl_assoc_to_rem_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tnl_assoc_transport_layer_address_gnb_cu_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.pack(bref));
  if (tnl_assoc_transport_layer_address_gnb_cu_present) {
    HANDLE_CODE(tnl_assoc_transport_layer_address_gnb_cu.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_tnl_assoc_to_rem_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(tnl_assoc_transport_layer_address_gnb_cu_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(tnl_assoc_transport_layer_address.unpack(bref));
  if (tnl_assoc_transport_layer_address_gnb_cu_present) {
    HANDLE_CODE(tnl_assoc_transport_layer_address_gnb_cu.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void gnb_du_tnl_assoc_to_rem_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("tNLAssociationTransportLayerAddress");
  tnl_assoc_transport_layer_address.to_json(j);
  if (tnl_assoc_transport_layer_address_gnb_cu_present) {
    j.write_fieldname("tNLAssociationTransportLayerAddressgNBCU");
    tnl_assoc_transport_layer_address_gnb_cu.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// NR-CGI-List-For-Restart-Item ::= SEQUENCE
SRSASN_CODE nr_cgi_list_for_restart_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_cgi_list_for_restart_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void nr_cgi_list_for_restart_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// NotificationInformation ::= SEQUENCE
SRSASN_CODE notif_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(msg_id.pack(bref));
  HANDLE_CODE(serial_num.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE notif_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(msg_id.unpack(bref));
  HANDLE_CODE(serial_num.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void notif_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("message-Identifier", msg_id.to_string());
  j.write_str("serialNumber", serial_num.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// PWS-Failed-NR-CGI-Item ::= SEQUENCE
SRSASN_CODE pws_failed_nr_cgi_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(pack_integer(bref, nof_broadcasts, (uint32_t)0u, (uint32_t)65535u, false, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_failed_nr_cgi_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  HANDLE_CODE(unpack_integer(nof_broadcasts, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pws_failed_nr_cgi_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  j.write_int("numberOfBroadcasts", nof_broadcasts);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// PagingCell-Item ::= SEQUENCE
SRSASN_CODE paging_cell_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_cell_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void paging_cell_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("nRCGI");
  nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Potential-SpCell-Item ::= SEQUENCE
SRSASN_CODE potential_sp_cell_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(potential_sp_cell_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE potential_sp_cell_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(potential_sp_cell_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void potential_sp_cell_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("potential-SpCell-ID");
  potential_sp_cell_id.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// PrivateIE-ID ::= CHOICE
void private_ie_id_c::set(types::options e)
{
  type_ = e;
}
uint32_t& private_ie_id_c::set_local()
{
  set(types::local);
  return c;
}
void private_ie_id_c::set_global()
{
  set(types::global);
}
void private_ie_id_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::local:
      j.write_int("local", c);
      break;
    case types::global:
      break;
    default:
      log_invalid_choice_id(type_, "private_ie_id_c");
  }
  j.end_obj();
}
SRSASN_CODE private_ie_id_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::local:
      HANDLE_CODE(pack_integer(bref, c, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::global:
      break;
    default:
      log_invalid_choice_id(type_, "private_ie_id_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE private_ie_id_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::local:
      HANDLE_CODE(unpack_integer(c, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::global:
      break;
    default:
      log_invalid_choice_id(type_, "private_ie_id_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* private_ie_id_c::types_opts::to_string() const
{
  static const char* names[] = {"local", "global"};
  return convert_enum_idx(names, 2, value, "private_ie_id_c::types");
}

// Protected-EUTRA-Resources-Item ::= SEQUENCE
SRSASN_CODE protected_eutra_res_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, spec_sharing_group_id, (uint16_t)1u, (uint16_t)256u, false, true));
  HANDLE_CODE(pack_dyn_seq_of(bref, eutra_cells_list, 1, 256, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE protected_eutra_res_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(spec_sharing_group_id, bref, (uint16_t)1u, (uint16_t)256u, false, true));
  HANDLE_CODE(unpack_dyn_seq_of(eutra_cells_list, bref, 1, 256, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void protected_eutra_res_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("spectrumSharingGroupID", spec_sharing_group_id);
  j.start_array("eUTRACells-List");
  for (const auto& e1 : eutra_cells_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// ResourceCoordinationEUTRACellInfo-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t res_coordination_eutra_cell_info_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {233};
  return map_enum_number(names, 1, idx, "id");
}
bool res_coordination_eutra_cell_info_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 233 == id;
}
crit_e res_coordination_eutra_cell_info_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 233) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
res_coordination_eutra_cell_info_ext_ies_o::ext_c
res_coordination_eutra_cell_info_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 233) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_coordination_eutra_cell_info_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 233) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void res_coordination_eutra_cell_info_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("IgnorePRACHConfiguration", "true");
  j.end_obj();
}
SRSASN_CODE res_coordination_eutra_cell_info_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_coordination_eutra_cell_info_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* res_coordination_eutra_cell_info_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"IgnorePRACHConfiguration"};
  return convert_enum_idx(names, 1, value, "res_coordination_eutra_cell_info_ext_ies_o::ext_c::types");
}

// SCell-FailedtoSetup-Item ::= SEQUENCE
SRSASN_CODE scell_failedto_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cause_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.pack(bref));
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_failedto_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cause_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.unpack(bref));
  if (cause_present) {
    HANDLE_CODE(cause.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void scell_failedto_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sCell-ID");
  scell_id.to_json(j);
  if (cause_present) {
    j.write_fieldname("cause");
    cause.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SCell-FailedtoSetupMod-Item ::= SEQUENCE
SRSASN_CODE scell_failedto_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cause_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.pack(bref));
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_failedto_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cause_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.unpack(bref));
  if (cause_present) {
    HANDLE_CODE(cause.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void scell_failedto_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sCell-ID");
  scell_id.to_json(j);
  if (cause_present) {
    j.write_fieldname("cause");
    cause.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SCell-ToBeRemoved-Item ::= SEQUENCE
SRSASN_CODE scell_to_be_remd_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_remd_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void scell_to_be_remd_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sCell-ID");
  scell_id.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SCell-ToBeSetup-Item ::= SEQUENCE
SRSASN_CODE scell_to_be_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(scell_ul_cfg_present, 1));
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(scell_id.pack(bref));
  HANDLE_CODE(pack_integer(bref, scell_idx, (uint8_t)1u, (uint8_t)31u, true, true));
  if (scell_ul_cfg_present) {
    HANDLE_CODE(scell_ul_cfg.pack(bref));
  }
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(scell_ul_cfg_present, 1));
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.unpack(bref));
  HANDLE_CODE(unpack_integer(scell_idx, bref, (uint8_t)1u, (uint8_t)31u, true, true));
  if (scell_ul_cfg_present) {
    HANDLE_CODE(scell_ul_cfg.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void scell_to_be_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sCell-ID");
  scell_id.to_json(j);
  j.write_int("sCellIndex", scell_idx);
  if (scell_ul_cfg_present) {
    j.write_str("sCellULConfigured", scell_ul_cfg.to_string());
  }
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// SCell-ToBeSetupMod-Item ::= SEQUENCE
SRSASN_CODE scell_to_be_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(scell_ul_cfg_present, 1));
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(scell_id.pack(bref));
  HANDLE_CODE(pack_integer(bref, scell_idx, (uint8_t)1u, (uint8_t)31u, true, true));
  if (scell_ul_cfg_present) {
    HANDLE_CODE(scell_ul_cfg.pack(bref));
  }
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(scell_ul_cfg_present, 1));
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(scell_id.unpack(bref));
  HANDLE_CODE(unpack_integer(scell_idx, bref, (uint8_t)1u, (uint8_t)31u, true, true));
  if (scell_ul_cfg_present) {
    HANDLE_CODE(scell_ul_cfg.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void scell_to_be_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("sCell-ID");
  scell_id.to_json(j);
  j.write_int("sCellIndex", scell_idx);
  if (scell_ul_cfg_present) {
    j.write_str("sCellULConfigured", scell_ul_cfg.to_string());
  }
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// SRBs-FailedToBeSetup-Item ::= SEQUENCE
SRSASN_CODE srbs_failed_to_be_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cause_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_failed_to_be_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cause_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_failed_to_be_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  if (cause_present) {
    j.write_fieldname("cause");
    cause.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-FailedToBeSetupMod-Item ::= SEQUENCE
SRSASN_CODE srbs_failed_to_be_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(cause_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_failed_to_be_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(cause_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  if (cause_present) {
    HANDLE_CODE(cause.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_failed_to_be_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  if (cause_present) {
    j.write_fieldname("cause");
    cause.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-Modified-Item ::= SEQUENCE
SRSASN_CODE srbs_modified_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  HANDLE_CODE(pack_integer(bref, lcid, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_modified_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  HANDLE_CODE(unpack_integer(lcid, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_modified_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  j.write_int("lCID", lcid);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-Required-ToBeReleased-Item ::= SEQUENCE
SRSASN_CODE srbs_required_to_be_released_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_required_to_be_released_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_required_to_be_released_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-Setup-Item ::= SEQUENCE
SRSASN_CODE srbs_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  HANDLE_CODE(pack_integer(bref, lcid, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  HANDLE_CODE(unpack_integer(lcid, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  j.write_int("lCID", lcid);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-SetupMod-Item ::= SEQUENCE
SRSASN_CODE srbs_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  HANDLE_CODE(pack_integer(bref, lcid, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  HANDLE_CODE(unpack_integer(lcid, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  j.write_int("lCID", lcid);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-ToBeReleased-Item ::= SEQUENCE
SRSASN_CODE srbs_to_be_released_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_released_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_to_be_released_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-ToBeSetup-Item ::= SEQUENCE
SRSASN_CODE srbs_to_be_setup_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dupl_ind_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  if (dupl_ind_present) {
    HANDLE_CODE(dupl_ind.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_setup_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dupl_ind_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  if (dupl_ind_present) {
    HANDLE_CODE(dupl_ind.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_to_be_setup_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  if (dupl_ind_present) {
    j.write_str("duplicationIndication", dupl_ind.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-ToBeSetupMod-Item ::= SEQUENCE
SRSASN_CODE srbs_to_be_setup_mod_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dupl_ind_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  if (dupl_ind_present) {
    HANDLE_CODE(dupl_ind.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_setup_mod_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dupl_ind_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
  if (dupl_ind_present) {
    HANDLE_CODE(dupl_ind.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srbs_to_be_setup_mod_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRBID", srb_id);
  if (dupl_ind_present) {
    j.write_str("duplicationIndication", dupl_ind.to_string());
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Served-Cells-To-Add-Item ::= SEQUENCE
SRSASN_CODE served_cells_to_add_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gnb_du_sys_info_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(served_cell_info.pack(bref));
  if (gnb_du_sys_info_present) {
    HANDLE_CODE(gnb_du_sys_info.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_add_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gnb_du_sys_info_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(served_cell_info.unpack(bref));
  if (gnb_du_sys_info_present) {
    HANDLE_CODE(gnb_du_sys_info.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void served_cells_to_add_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("served-Cell-Information");
  served_cell_info.to_json(j);
  if (gnb_du_sys_info_present) {
    j.write_fieldname("gNB-DU-System-Information");
    gnb_du_sys_info.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Served-Cells-To-Delete-Item ::= SEQUENCE
SRSASN_CODE served_cells_to_delete_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(old_nr_cgi.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_delete_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(old_nr_cgi.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void served_cells_to_delete_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("oldNRCGI");
  old_nr_cgi.to_json(j);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// Served-Cells-To-Modify-Item ::= SEQUENCE
SRSASN_CODE served_cells_to_modify_item_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(gnb_du_sys_info_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(old_nr_cgi.pack(bref));
  HANDLE_CODE(served_cell_info.pack(bref));
  if (gnb_du_sys_info_present) {
    HANDLE_CODE(gnb_du_sys_info.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_modify_item_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(gnb_du_sys_info_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(old_nr_cgi.unpack(bref));
  HANDLE_CODE(served_cell_info.unpack(bref));
  if (gnb_du_sys_info_present) {
    HANDLE_CODE(gnb_du_sys_info.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void served_cells_to_modify_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("oldNRCGI");
  old_nr_cgi.to_json(j);
  j.write_fieldname("served-Cell-Information");
  served_cell_info.to_json(j);
  if (gnb_du_sys_info_present) {
    j.write_fieldname("gNB-DU-System-Information");
    gnb_du_sys_info.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// UACPLMN-Item ::= SEQUENCE
SRSASN_CODE uac_plmn_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.pack(bref));
  HANDLE_CODE(pack_dyn_seq_of(bref, uac_type_list, 1, 64, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_plmn_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(plmn_id.unpack(bref));
  HANDLE_CODE(unpack_dyn_seq_of(uac_type_list, bref, 1, 64, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uac_plmn_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("pLMNIdentity", plmn_id.to_string());
  j.start_array("uACType-List");
  for (const auto& e1 : uac_type_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// UE-associatedLogicalF1-ConnectionItemRes ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_associated_lc_f1_conn_item_res_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {80};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_associated_lc_f1_conn_item_res_o::is_id_valid(const uint32_t& id)
{
  return 80 == id;
}
crit_e ue_associated_lc_f1_conn_item_res_o::get_crit(const uint32_t& id)
{
  if (id == 80) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_associated_lc_f1_conn_item_res_o::value_c ue_associated_lc_f1_conn_item_res_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 80) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_associated_lc_f1_conn_item_res_o::get_presence(const uint32_t& id)
{
  if (id == 80) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_associated_lc_f1_conn_item_res_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-associatedLogicalF1-ConnectionItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* ue_associated_lc_f1_conn_item_res_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"UE-associatedLogicalF1-ConnectionItem"};
  return convert_enum_idx(names, 1, value, "ue_associated_lc_f1_conn_item_res_o::value_c::types");
}
uint8_t ue_associated_lc_f1_conn_item_res_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ue_associated_lc_f1_conn_item_res_o::value_c::types");
}

// GNB-CU-TNL-Association-Failed-To-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {135};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 135 == id;
}
crit_e gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 135) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c
gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 135) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 135) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-Failed-To-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-CU-TNL-Association-Failed-To-Setup-Item"};
  return convert_enum_idx(names, 1, value, "gnb_cu_tnl_assoc_failed_to_setup_item_ies_o::value_c::types");
}

// GNB-CU-TNL-Association-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {133};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 133 == id;
}
crit_e gnb_cu_tnl_assoc_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 133) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_setup_item_ies_o::value_c gnb_cu_tnl_assoc_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 133) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 133) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_cu_tnl_assoc_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-CU-TNL-Association-Setup-Item"};
  return convert_enum_idx(names, 1, value, "gnb_cu_tnl_assoc_setup_item_ies_o::value_c::types");
}

// GNB-CU-TNL-Association-To-Add-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_to_add_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {120};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_to_add_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 120 == id;
}
crit_e gnb_cu_tnl_assoc_to_add_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 120) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_to_add_item_ies_o::value_c gnb_cu_tnl_assoc_to_add_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 120) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_to_add_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 120) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-To-Add-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-CU-TNL-Association-To-Add-Item"};
  return convert_enum_idx(names, 1, value, "gnb_cu_tnl_assoc_to_add_item_ies_o::value_c::types");
}

// GNB-CU-TNL-Association-To-Remove-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_to_rem_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {122};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_to_rem_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 122 == id;
}
crit_e gnb_cu_tnl_assoc_to_rem_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 122) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c gnb_cu_tnl_assoc_to_rem_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 122) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_to_rem_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 122) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-To-Remove-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-CU-TNL-Association-To-Remove-Item"};
  return convert_enum_idx(names, 1, value, "gnb_cu_tnl_assoc_to_rem_item_ies_o::value_c::types");
}

// GNB-CU-TNL-Association-To-Update-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_tnl_assoc_to_upd_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {124};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_cu_tnl_assoc_to_upd_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 124 == id;
}
crit_e gnb_cu_tnl_assoc_to_upd_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 124) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c gnb_cu_tnl_assoc_to_upd_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 124) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_tnl_assoc_to_upd_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 124) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-CU-TNL-Association-To-Update-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-CU-TNL-Association-To-Update-Item"};
  return convert_enum_idx(names, 1, value, "gnb_cu_tnl_assoc_to_upd_item_ies_o::value_c::types");
}

// GNB-DU-Served-Cells-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_served_cells_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {43};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_du_served_cells_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 43 == id;
}
crit_e gnb_du_served_cells_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 43) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_du_served_cells_item_ies_o::value_c gnb_du_served_cells_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 43) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_served_cells_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 43) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_served_cells_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-DU-Served-Cells-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_du_served_cells_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_served_cells_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_du_served_cells_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-DU-Served-Cells-Item"};
  return convert_enum_idx(names, 1, value, "gnb_du_served_cells_item_ies_o::value_c::types");
}

// GNB-DU-TNL-Association-To-Remove-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_tnl_assoc_to_rem_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {227};
  return map_enum_number(names, 1, idx, "id");
}
bool gnb_du_tnl_assoc_to_rem_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 227 == id;
}
crit_e gnb_du_tnl_assoc_to_rem_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 227) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
gnb_du_tnl_assoc_to_rem_item_ies_o::value_c gnb_du_tnl_assoc_to_rem_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 227) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_tnl_assoc_to_rem_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 227) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("GNB-DU-TNL-Association-To-Remove-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"GNB-DU-TNL-Association-To-Remove-Item"};
  return convert_enum_idx(names, 1, value, "gnb_du_tnl_assoc_to_rem_item_ies_o::value_c::types");
}

// NR-CGI-List-For-Restart-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t nr_cgi_list_for_restart_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {153};
  return map_enum_number(names, 1, idx, "id");
}
bool nr_cgi_list_for_restart_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 153 == id;
}
crit_e nr_cgi_list_for_restart_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 153) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
nr_cgi_list_for_restart_list_item_ies_o::value_c nr_cgi_list_for_restart_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 153) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e nr_cgi_list_for_restart_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 153) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void nr_cgi_list_for_restart_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("NR-CGI-List-For-Restart-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE nr_cgi_list_for_restart_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE nr_cgi_list_for_restart_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* nr_cgi_list_for_restart_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"NR-CGI-List-For-Restart-Item"};
  return convert_enum_idx(names, 1, value, "nr_cgi_list_for_restart_list_item_ies_o::value_c::types");
}

// PWS-Failed-NR-CGI-List-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_failed_nr_cgi_list_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {155};
  return map_enum_number(names, 1, idx, "id");
}
bool pws_failed_nr_cgi_list_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 155 == id;
}
crit_e pws_failed_nr_cgi_list_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 155) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
pws_failed_nr_cgi_list_item_ies_o::value_c pws_failed_nr_cgi_list_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 155) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_failed_nr_cgi_list_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 155) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void pws_failed_nr_cgi_list_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("PWS-Failed-NR-CGI-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE pws_failed_nr_cgi_list_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_failed_nr_cgi_list_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* pws_failed_nr_cgi_list_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"PWS-Failed-NR-CGI-Item"};
  return convert_enum_idx(names, 1, value, "pws_failed_nr_cgi_list_item_ies_o::value_c::types");
}

// PWSSystemInformationExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t pws_sys_info_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {220, 231};
  return map_enum_number(names, 2, idx, "id");
}
bool pws_sys_info_ext_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {220, 231};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_sys_info_ext_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 220:
      return crit_e::ignore;
    case 231:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_sys_info_ext_ies_o::ext_c pws_sys_info_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  switch (id) {
    case 220:
      ret.set(ext_c::types::notif_info);
      break;
    case 231:
      ret.set(ext_c::types::add_sib_msg_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_sys_info_ext_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 220:
      return presence_e::optional;
    case 231:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Extension ::= OPEN TYPE
void pws_sys_info_ext_ies_o::ext_c::destroy_()
{
  switch (type_) {
    case types::notif_info:
      c.destroy<notif_info_s>();
      break;
    case types::add_sib_msg_list:
      c.destroy<add_sib_msg_list_l>();
      break;
    default:
      break;
  }
}
void pws_sys_info_ext_ies_o::ext_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::notif_info:
      c.init<notif_info_s>();
      break;
    case types::add_sib_msg_list:
      c.init<add_sib_msg_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_sys_info_ext_ies_o::ext_c");
  }
}
pws_sys_info_ext_ies_o::ext_c::ext_c(const pws_sys_info_ext_ies_o::ext_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::notif_info:
      c.init(other.c.get<notif_info_s>());
      break;
    case types::add_sib_msg_list:
      c.init(other.c.get<add_sib_msg_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_sys_info_ext_ies_o::ext_c");
  }
}
pws_sys_info_ext_ies_o::ext_c& pws_sys_info_ext_ies_o::ext_c::operator=(const pws_sys_info_ext_ies_o::ext_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::notif_info:
      c.set(other.c.get<notif_info_s>());
      break;
    case types::add_sib_msg_list:
      c.set(other.c.get<add_sib_msg_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_sys_info_ext_ies_o::ext_c");
  }

  return *this;
}
notif_info_s& pws_sys_info_ext_ies_o::ext_c::notif_info()
{
  assert_choice_type(types::notif_info, type_, "Extension");
  return c.get<notif_info_s>();
}
add_sib_msg_list_l& pws_sys_info_ext_ies_o::ext_c::add_sib_msg_list()
{
  assert_choice_type(types::add_sib_msg_list, type_, "Extension");
  return c.get<add_sib_msg_list_l>();
}
const notif_info_s& pws_sys_info_ext_ies_o::ext_c::notif_info() const
{
  assert_choice_type(types::notif_info, type_, "Extension");
  return c.get<notif_info_s>();
}
const add_sib_msg_list_l& pws_sys_info_ext_ies_o::ext_c::add_sib_msg_list() const
{
  assert_choice_type(types::add_sib_msg_list, type_, "Extension");
  return c.get<add_sib_msg_list_l>();
}
void pws_sys_info_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::notif_info:
      j.write_fieldname("NotificationInformation");
      c.get<notif_info_s>().to_json(j);
      break;
    case types::add_sib_msg_list:
      j.start_array("AdditionalSIBMessageList");
      for (const auto& e1 : c.get<add_sib_msg_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pws_sys_info_ext_ies_o::ext_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_sys_info_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().pack(bref));
      break;
    case types::add_sib_msg_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<add_sib_msg_list_l>(), 1, 63, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_sys_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_sys_info_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().unpack(bref));
      break;
    case types::add_sib_msg_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<add_sib_msg_list_l>(), bref, 1, 63, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_sys_info_ext_ies_o::ext_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pws_sys_info_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"NotificationInformation", "AdditionalSIBMessageList"};
  return convert_enum_idx(names, 2, value, "pws_sys_info_ext_ies_o::ext_c::types");
}

// PagingCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t paging_cell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {112};
  return map_enum_number(names, 1, idx, "id");
}
bool paging_cell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 112 == id;
}
crit_e paging_cell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 112) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
paging_cell_item_ies_o::value_c paging_cell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 112) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e paging_cell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 112) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void paging_cell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("PagingCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE paging_cell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_cell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* paging_cell_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"PagingCell-Item"};
  return convert_enum_idx(names, 1, value, "paging_cell_item_ies_o::value_c::types");
}

// Potential-SpCell-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t potential_sp_cell_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {93};
  return map_enum_number(names, 1, idx, "id");
}
bool potential_sp_cell_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 93 == id;
}
crit_e potential_sp_cell_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 93) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
potential_sp_cell_item_ies_o::value_c potential_sp_cell_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 93) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e potential_sp_cell_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 93) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void potential_sp_cell_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Potential-SpCell-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE potential_sp_cell_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE potential_sp_cell_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* potential_sp_cell_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Potential-SpCell-Item"};
  return convert_enum_idx(names, 1, value, "potential_sp_cell_item_ies_o::value_c::types");
}

// Protected-EUTRA-Resources-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t protected_eutra_res_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {168};
  return map_enum_number(names, 1, idx, "id");
}
bool protected_eutra_res_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 168 == id;
}
crit_e protected_eutra_res_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 168) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
protected_eutra_res_item_ies_o::value_c protected_eutra_res_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 168) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e protected_eutra_res_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 168) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void protected_eutra_res_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Protected-EUTRA-Resources-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE protected_eutra_res_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE protected_eutra_res_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* protected_eutra_res_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Protected-EUTRA-Resources-Item"};
  return convert_enum_idx(names, 1, value, "protected_eutra_res_item_ies_o::value_c::types");
}

// RANUEPagingIdentity ::= SEQUENCE
SRSASN_CODE ran_ue_paging_id_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(irnti.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ran_ue_paging_id_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(irnti.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ran_ue_paging_id_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("iRNTI", irnti.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// RRC-Version-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t rrc_version_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {199};
  return map_enum_number(names, 1, idx, "id");
}
bool rrc_version_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 199 == id;
}
crit_e rrc_version_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 199) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
rrc_version_ext_ies_o::ext_c rrc_version_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 199) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e rrc_version_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 199) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void rrc_version_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("OCTET STRING", c.to_string());
  j.end_obj();
}
SRSASN_CODE rrc_version_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_version_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* rrc_version_ext_ies_o::ext_c::types_opts::to_string() const
{
  static const char* names[] = {"OCTET STRING"};
  return convert_enum_idx(names, 1, value, "rrc_version_ext_ies_o::ext_c::types");
}

// ResetAll ::= ENUMERATED
const char* reset_all_opts::to_string() const
{
  static const char* names[] = {"reset-all"};
  return convert_enum_idx(names, 1, value, "reset_all_e");
}

// ResourceCoordinationEUTRACellInfo ::= SEQUENCE
SRSASN_CODE res_coordination_eutra_cell_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(eutra_mode_info.pack(bref));
  HANDLE_CODE(eutra_prach_cfg.pack(bref));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_coordination_eutra_cell_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(eutra_mode_info.unpack(bref));
  HANDLE_CODE(eutra_prach_cfg.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void res_coordination_eutra_cell_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eUTRA-Mode-Info");
  eutra_mode_info.to_json(j);
  j.write_fieldname("eUTRA-PRACH-Configuration");
  eutra_prach_cfg.to_json(j);
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// SCell-FailedtoSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_failedto_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {84};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_failedto_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 84 == id;
}
crit_e scell_failedto_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 84) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_failedto_setup_item_ies_o::value_c scell_failedto_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 84) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_failedto_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 84) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_failedto_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-FailedtoSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_failedto_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_failedto_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* scell_failedto_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SCell-FailedtoSetup-Item"};
  return convert_enum_idx(names, 1, value, "scell_failedto_setup_item_ies_o::value_c::types");
}

// SCell-FailedtoSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_failedto_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {86};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_failedto_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 86 == id;
}
crit_e scell_failedto_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 86) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_failedto_setup_mod_item_ies_o::value_c scell_failedto_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 86) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_failedto_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 86) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_failedto_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-FailedtoSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_failedto_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_failedto_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* scell_failedto_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SCell-FailedtoSetupMod-Item"};
  return convert_enum_idx(names, 1, value, "scell_failedto_setup_mod_item_ies_o::value_c::types");
}

// SCell-ToBeRemoved-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_to_be_remd_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {51};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_remd_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 51 == id;
}
crit_e scell_to_be_remd_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 51) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_remd_item_ies_o::value_c scell_to_be_remd_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 51) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_remd_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 51) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_to_be_remd_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-ToBeRemoved-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_to_be_remd_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_remd_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* scell_to_be_remd_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SCell-ToBeRemoved-Item"};
  return convert_enum_idx(names, 1, value, "scell_to_be_remd_item_ies_o::value_c::types");
}

// SCell-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {53};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 53 == id;
}
crit_e scell_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 53) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_setup_item_ies_o::value_c scell_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 53) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 53) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* scell_to_be_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SCell-ToBeSetup-Item"};
  return convert_enum_idx(names, 1, value, "scell_to_be_setup_item_ies_o::value_c::types");
}

// SCell-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t scell_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {55};
  return map_enum_number(names, 1, idx, "id");
}
bool scell_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 55 == id;
}
crit_e scell_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 55) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
scell_to_be_setup_mod_item_ies_o::value_c scell_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 55) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e scell_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 55) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void scell_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SCell-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE scell_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE scell_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* scell_to_be_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SCell-ToBeSetupMod-Item"};
  return convert_enum_idx(names, 1, value, "scell_to_be_setup_mod_item_ies_o::value_c::types");
}

// SItype-Item ::= SEQUENCE
SRSASN_CODE sitype_item_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, sitype, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sitype_item_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(sitype, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sitype_item_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sItype", sitype);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// SRBs-FailedToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_failed_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {65};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_failed_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 65 == id;
}
crit_e srbs_failed_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 65) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_failed_to_be_setup_item_ies_o::value_c srbs_failed_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 65) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_failed_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 65) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_failed_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-FailedToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_failed_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_failed_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_failed_to_be_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-FailedToBeSetup-Item"};
  return convert_enum_idx(names, 1, value, "srbs_failed_to_be_setup_item_ies_o::value_c::types");
}

// SRBs-FailedToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_failed_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {67};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_failed_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 67 == id;
}
crit_e srbs_failed_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 67) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_failed_to_be_setup_mod_item_ies_o::value_c srbs_failed_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 67) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_failed_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 67) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_failed_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-FailedToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_failed_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_failed_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_failed_to_be_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-FailedToBeSetupMod-Item"};
  return convert_enum_idx(names, 1, value, "srbs_failed_to_be_setup_mod_item_ies_o::value_c::types");
}

// SRBs-Modified-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_modified_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {207};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_modified_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 207 == id;
}
crit_e srbs_modified_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 207) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_modified_item_ies_o::value_c srbs_modified_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 207) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_modified_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 207) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_modified_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-Modified-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_modified_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_modified_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_modified_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-Modified-Item"};
  return convert_enum_idx(names, 1, value, "srbs_modified_item_ies_o::value_c::types");
}

// SRBs-Required-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_required_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {69};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_required_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 69 == id;
}
crit_e srbs_required_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 69) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_required_to_be_released_item_ies_o::value_c srbs_required_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 69) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_required_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 69) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_required_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-Required-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_required_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_required_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_required_to_be_released_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-Required-ToBeReleased-Item"};
  return convert_enum_idx(names, 1, value, "srbs_required_to_be_released_item_ies_o::value_c::types");
}

// SRBs-Setup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {203};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 203 == id;
}
crit_e srbs_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 203) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_setup_item_ies_o::value_c srbs_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 203) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 203) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-Setup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-Setup-Item"};
  return convert_enum_idx(names, 1, value, "srbs_setup_item_ies_o::value_c::types");
}

// SRBs-SetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {205};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 205 == id;
}
crit_e srbs_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 205) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_setup_mod_item_ies_o::value_c srbs_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 205) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 205) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-SetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-SetupMod-Item"};
  return convert_enum_idx(names, 1, value, "srbs_setup_mod_item_ies_o::value_c::types");
}

// SRBs-ToBeReleased-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_to_be_released_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {71};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_to_be_released_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 71 == id;
}
crit_e srbs_to_be_released_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 71) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_to_be_released_item_ies_o::value_c srbs_to_be_released_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 71) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_to_be_released_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 71) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_to_be_released_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-ToBeReleased-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_to_be_released_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_released_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_to_be_released_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-ToBeReleased-Item"};
  return convert_enum_idx(names, 1, value, "srbs_to_be_released_item_ies_o::value_c::types");
}

// SRBs-ToBeSetup-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_to_be_setup_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {73};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_to_be_setup_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 73 == id;
}
crit_e srbs_to_be_setup_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 73) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_to_be_setup_item_ies_o::value_c srbs_to_be_setup_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 73) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_to_be_setup_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 73) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_to_be_setup_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-ToBeSetup-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_to_be_setup_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_setup_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_to_be_setup_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-ToBeSetup-Item"};
  return convert_enum_idx(names, 1, value, "srbs_to_be_setup_item_ies_o::value_c::types");
}

// SRBs-ToBeSetupMod-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t srbs_to_be_setup_mod_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {75};
  return map_enum_number(names, 1, idx, "id");
}
bool srbs_to_be_setup_mod_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 75 == id;
}
crit_e srbs_to_be_setup_mod_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 75) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
srbs_to_be_setup_mod_item_ies_o::value_c srbs_to_be_setup_mod_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 75) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e srbs_to_be_setup_mod_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 75) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void srbs_to_be_setup_mod_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SRBs-ToBeSetupMod-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE srbs_to_be_setup_mod_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE srbs_to_be_setup_mod_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* srbs_to_be_setup_mod_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"SRBs-ToBeSetupMod-Item"};
  return convert_enum_idx(names, 1, value, "srbs_to_be_setup_mod_item_ies_o::value_c::types");
}

// Served-Cells-To-Add-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t served_cells_to_add_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {57};
  return map_enum_number(names, 1, idx, "id");
}
bool served_cells_to_add_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 57 == id;
}
crit_e served_cells_to_add_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 57) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
served_cells_to_add_item_ies_o::value_c served_cells_to_add_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 57) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_cells_to_add_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 57) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void served_cells_to_add_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Served-Cells-To-Add-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE served_cells_to_add_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_add_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* served_cells_to_add_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Served-Cells-To-Add-Item"};
  return convert_enum_idx(names, 1, value, "served_cells_to_add_item_ies_o::value_c::types");
}

// Served-Cells-To-Delete-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t served_cells_to_delete_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {59};
  return map_enum_number(names, 1, idx, "id");
}
bool served_cells_to_delete_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 59 == id;
}
crit_e served_cells_to_delete_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 59) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
served_cells_to_delete_item_ies_o::value_c served_cells_to_delete_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 59) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_cells_to_delete_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 59) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void served_cells_to_delete_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Served-Cells-To-Delete-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE served_cells_to_delete_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_delete_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* served_cells_to_delete_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Served-Cells-To-Delete-Item"};
  return convert_enum_idx(names, 1, value, "served_cells_to_delete_item_ies_o::value_c::types");
}

// Served-Cells-To-Modify-ItemIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t served_cells_to_modify_item_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {61};
  return map_enum_number(names, 1, idx, "id");
}
bool served_cells_to_modify_item_ies_o::is_id_valid(const uint32_t& id)
{
  return 61 == id;
}
crit_e served_cells_to_modify_item_ies_o::get_crit(const uint32_t& id)
{
  if (id == 61) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
served_cells_to_modify_item_ies_o::value_c served_cells_to_modify_item_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 61) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e served_cells_to_modify_item_ies_o::get_presence(const uint32_t& id)
{
  if (id == 61) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void served_cells_to_modify_item_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("Served-Cells-To-Modify-Item");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE served_cells_to_modify_item_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE served_cells_to_modify_item_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* served_cells_to_modify_item_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"Served-Cells-To-Modify-Item"};
  return convert_enum_idx(names, 1, value, "served_cells_to_modify_item_ies_o::value_c::types");
}

// UE-associatedLogicalF1-ConnectionItemResAck ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_associated_lc_f1_conn_item_res_ack_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {80};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_associated_lc_f1_conn_item_res_ack_o::is_id_valid(const uint32_t& id)
{
  return 80 == id;
}
crit_e ue_associated_lc_f1_conn_item_res_ack_o::get_crit(const uint32_t& id)
{
  if (id == 80) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_associated_lc_f1_conn_item_res_ack_o::value_c ue_associated_lc_f1_conn_item_res_ack_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 80) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_associated_lc_f1_conn_item_res_ack_o::get_presence(const uint32_t& id)
{
  if (id == 80) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_associated_lc_f1_conn_item_res_ack_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-associatedLogicalF1-ConnectionItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_ack_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_ack_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

const char* ue_associated_lc_f1_conn_item_res_ack_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"UE-associatedLogicalF1-ConnectionItem"};
  return convert_enum_idx(names, 1, value, "ue_associated_lc_f1_conn_item_res_ack_o::value_c::types");
}
uint8_t ue_associated_lc_f1_conn_item_res_ack_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {1};
  return map_enum_number(numbers, 1, value, "ue_associated_lc_f1_conn_item_res_ack_o::value_c::types");
}

template struct asn1::protocol_ie_single_container_s<ue_associated_lc_f1_conn_item_res_o>;

// Cancel-all-Warning-Messages-Indicator ::= ENUMERATED
const char* cancel_all_warning_msgs_ind_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "cancel_all_warning_msgs_ind_e");
}

// DRXConfigurationIndicator ::= ENUMERATED
const char* drx_cfg_ind_opts::to_string() const
{
  static const char* names[] = {"release"};
  return convert_enum_idx(names, 1, value, "drx_cfg_ind_e");
}

// FullConfiguration ::= ENUMERATED
const char* full_cfg_opts::to_string() const
{
  static const char* names[] = {"full"};
  return convert_enum_idx(names, 1, value, "full_cfg_e");
}

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_failed_to_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_to_add_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_to_rem_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_cu_tnl_assoc_to_upd_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_du_served_cells_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<gnb_du_tnl_assoc_to_rem_item_ies_o>;

// GNB-DUConfigurationQuery ::= ENUMERATED
const char* gnb_du_cfg_query_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "gnb_du_cfg_query_e");
}

// GNBDUOverloadInformation ::= ENUMERATED
const char* gnb_du_overload_info_opts::to_string() const
{
  static const char* names[] = {"overloaded", "not-overloaded"};
  return convert_enum_idx(names, 2, value, "gnb_du_overload_info_e");
}

// IgnoreResourceCoordinationContainer ::= ENUMERATED
const char* ignore_res_coordination_container_opts::to_string() const
{
  static const char* names[] = {"yes"};
  return convert_enum_idx(names, 1, value, "ignore_res_coordination_container_e");
}

// InactivityMonitoringRequest ::= ENUMERATED
const char* inactivity_monitoring_request_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "inactivity_monitoring_request_e");
}

// InactivityMonitoringResponse ::= ENUMERATED
const char* inactivity_monitoring_resp_opts::to_string() const
{
  static const char* names[] = {"not-supported"};
  return convert_enum_idx(names, 1, value, "inactivity_monitoring_resp_e");
}

template struct asn1::protocol_ie_single_container_s<nr_cgi_list_for_restart_list_item_ies_o>;

// NeedforGap ::= ENUMERATED
const char* needfor_gap_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "needfor_gap_e");
}

template struct asn1::protocol_ie_single_container_s<pws_failed_nr_cgi_list_item_ies_o>;

template struct asn1::protocol_ext_field_s<pws_sys_info_ext_ies_o>;

pws_sys_info_ext_ies_container::pws_sys_info_ext_ies_container() :
  notif_info(220, crit_e::ignore), add_sib_msg_list(231, crit_e::reject)
{
}
SRSASN_CODE pws_sys_info_ext_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  nof_ies += notif_info_present ? 1 : 0;
  nof_ies += add_sib_msg_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  if (notif_info_present) {
    HANDLE_CODE(notif_info.pack(bref));
  }
  if (add_sib_msg_list_present) {
    HANDLE_CODE(add_sib_msg_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_sys_info_ext_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 220: {
        notif_info_present = true;
        notif_info.id      = id;
        HANDLE_CODE(notif_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(notif_info.ext.unpack(bref));
        break;
      }
      case 231: {
        add_sib_msg_list_present = true;
        add_sib_msg_list.id      = id;
        HANDLE_CODE(add_sib_msg_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(add_sib_msg_list.ext.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }

  return SRSASN_SUCCESS;
}
void pws_sys_info_ext_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  if (notif_info_present) {
    j.write_fieldname("");
    notif_info.to_json(j);
  }
  if (add_sib_msg_list_present) {
    j.write_fieldname("");
    add_sib_msg_list.to_json(j);
  }
  j.end_obj();
}

// PWSSystemInformation ::= SEQUENCE
SRSASN_CODE pws_sys_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, sib_type, (uint8_t)6u, (uint8_t)8u, true, true));
  HANDLE_CODE(sib_msg.pack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_sys_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(sib_type, bref, (uint8_t)6u, (uint8_t)8u, true, true));
  HANDLE_CODE(sib_msg.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pws_sys_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sIBtype", sib_type);
  j.write_str("sIBmessage", sib_msg.to_string());
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_single_container_s<paging_cell_item_ies_o>;

// PagingDRX ::= ENUMERATED
const char* paging_drx_opts::to_string() const
{
  static const char* names[] = {"v32", "v64", "v128", "v256"};
  return convert_enum_idx(names, 4, value, "paging_drx_e");
}
uint16_t paging_drx_opts::to_number() const
{
  static const uint16_t numbers[] = {32, 64, 128, 256};
  return map_enum_number(numbers, 4, value, "paging_drx_e");
}

// PagingIdentity ::= CHOICE
void paging_id_c::destroy_()
{
  switch (type_) {
    case types::ran_ue_paging_id:
      c.destroy<ran_ue_paging_id_s>();
      break;
    case types::cn_ue_paging_id:
      c.destroy<cn_ue_paging_id_c>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<paging_id_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void paging_id_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ran_ue_paging_id:
      c.init<ran_ue_paging_id_s>();
      break;
    case types::cn_ue_paging_id:
      c.init<cn_ue_paging_id_c>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<paging_id_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_id_c");
  }
}
paging_id_c::paging_id_c(const paging_id_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ran_ue_paging_id:
      c.init(other.c.get<ran_ue_paging_id_s>());
      break;
    case types::cn_ue_paging_id:
      c.init(other.c.get<cn_ue_paging_id_c>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<paging_id_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_id_c");
  }
}
paging_id_c& paging_id_c::operator=(const paging_id_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ran_ue_paging_id:
      c.set(other.c.get<ran_ue_paging_id_s>());
      break;
    case types::cn_ue_paging_id:
      c.set(other.c.get<cn_ue_paging_id_c>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<paging_id_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_id_c");
  }

  return *this;
}
ran_ue_paging_id_s& paging_id_c::set_ran_ue_paging_id()
{
  set(types::ran_ue_paging_id);
  return c.get<ran_ue_paging_id_s>();
}
cn_ue_paging_id_c& paging_id_c::set_cn_ue_paging_id()
{
  set(types::cn_ue_paging_id);
  return c.get<cn_ue_paging_id_c>();
}
protocol_ie_single_container_s<paging_id_ext_ies_o>& paging_id_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<paging_id_ext_ies_o>>();
}
void paging_id_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ran_ue_paging_id:
      j.write_fieldname("rANUEPagingIdentity");
      c.get<ran_ue_paging_id_s>().to_json(j);
      break;
    case types::cn_ue_paging_id:
      j.write_fieldname("cNUEPagingIdentity");
      c.get<cn_ue_paging_id_c>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<paging_id_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "paging_id_c");
  }
  j.end_obj();
}
SRSASN_CODE paging_id_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ran_ue_paging_id:
      HANDLE_CODE(c.get<ran_ue_paging_id_s>().pack(bref));
      break;
    case types::cn_ue_paging_id:
      HANDLE_CODE(c.get<cn_ue_paging_id_c>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<paging_id_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "paging_id_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_id_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ran_ue_paging_id:
      HANDLE_CODE(c.get<ran_ue_paging_id_s>().unpack(bref));
      break;
    case types::cn_ue_paging_id:
      HANDLE_CODE(c.get<cn_ue_paging_id_c>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<paging_id_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "paging_id_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* paging_id_c::types_opts::to_string() const
{
  static const char* names[] = {"rANUEPagingIdentity", "cNUEPagingIdentity", "choice-extension"};
  return convert_enum_idx(names, 3, value, "paging_id_c::types");
}

// PagingOrigin ::= ENUMERATED
const char* paging_origin_opts::to_string() const
{
  static const char* names[] = {"non-3gpp"};
  return convert_enum_idx(names, 1, value, "paging_origin_e");
}
int8_t paging_origin_opts::to_number() const
{
  static const int8_t numbers[] = {-3};
  return map_enum_number(numbers, 1, value, "paging_origin_e");
}

// PagingPriority ::= ENUMERATED
const char* paging_prio_opts::to_string() const
{
  static const char* names[] = {
      "priolevel1", "priolevel2", "priolevel3", "priolevel4", "priolevel5", "priolevel6", "priolevel7", "priolevel8"};
  return convert_enum_idx(names, 8, value, "paging_prio_e");
}
uint8_t paging_prio_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 7, 8};
  return map_enum_number(numbers, 8, value, "paging_prio_e");
}

template struct asn1::protocol_ie_single_container_s<potential_sp_cell_item_ies_o>;

// PrivateIE-Field{F1AP-PRIVATE-IES : IEsSetParam} ::= SEQUENCE{{F1AP-PRIVATE-IES}}
template <class ies_set_paramT_>
SRSASN_CODE private_ie_field_s<ies_set_paramT_>::pack(bit_ref& bref) const
{
  HANDLE_CODE(id.pack(bref));
  HANDLE_CODE(crit.pack(bref));
  HANDLE_CODE(value.pack(bref));

  return SRSASN_SUCCESS;
}
template <class ies_set_paramT_>
SRSASN_CODE private_ie_field_s<ies_set_paramT_>::unpack(cbit_ref& bref)
{
  HANDLE_CODE(id.unpack(bref));
  HANDLE_CODE(crit.unpack(bref));
  HANDLE_CODE(value.unpack(bref));

  return SRSASN_SUCCESS;
}
template <class ies_set_paramT_>
void private_ie_field_s<ies_set_paramT_>::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("id");
  id.to_json(j);
  j.write_str("criticality", crit.to_string());
  j.end_obj();
}

template struct asn1::protocol_ie_single_container_s<protected_eutra_res_item_ies_o>;

// RLCFailureIndication ::= SEQUENCE
SRSASN_CODE rlc_fail_ind_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, assocated_lcid, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_fail_ind_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(assocated_lcid, bref, (uint8_t)1u, (uint8_t)32u, true, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rlc_fail_ind_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("assocatedLCID", assocated_lcid);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// RRC-Version ::= SEQUENCE
SRSASN_CODE rrc_version_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(latest_rrc_version.pack(bref));
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_version_s::unpack(cbit_ref& bref)
{
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(latest_rrc_version.unpack(bref));
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void rrc_version_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("latest-RRC-Version", latest_rrc_version.to_string());
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// RRCDeliveryStatus ::= SEQUENCE
SRSASN_CODE rrc_delivery_status_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_integer(bref, delivery_status, (uint16_t)0u, (uint16_t)4095u, false, true));
  HANDLE_CODE(pack_integer(bref, trigger_msg, (uint16_t)0u, (uint16_t)4095u, false, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_delivery_status_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(delivery_status, bref, (uint16_t)0u, (uint16_t)4095u, false, true));
  HANDLE_CODE(unpack_integer(trigger_msg, bref, (uint16_t)0u, (uint16_t)4095u, false, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void rrc_delivery_status_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("delivery-status", delivery_status);
  j.write_int("triggering-message", trigger_msg);
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

// RRCReconfigurationCompleteIndicator ::= ENUMERATED
const char* rrc_recfg_complete_ind_opts::to_string() const
{
  static const char* names[] = {"true", "failure"};
  return convert_enum_idx(names, 2, value, "rrc_recfg_complete_ind_e");
}

// RequestType ::= ENUMERATED
const char* request_type_opts::to_string() const
{
  static const char* names[] = {"offer", "execution"};
  return convert_enum_idx(names, 2, value, "request_type_e");
}

// ResetType ::= CHOICE
void reset_type_c::destroy_()
{
  switch (type_) {
    case types::part_of_f1_interface:
      c.destroy<ue_associated_lc_f1_conn_list_res_l>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void reset_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::f1_interface:
      break;
    case types::part_of_f1_interface:
      c.init<ue_associated_lc_f1_conn_list_res_l>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
}
reset_type_c::reset_type_c(const reset_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::f1_interface:
      c.init(other.c.get<reset_all_e>());
      break;
    case types::part_of_f1_interface:
      c.init(other.c.get<ue_associated_lc_f1_conn_list_res_l>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
}
reset_type_c& reset_type_c::operator=(const reset_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::f1_interface:
      c.set(other.c.get<reset_all_e>());
      break;
    case types::part_of_f1_interface:
      c.set(other.c.get<ue_associated_lc_f1_conn_list_res_l>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }

  return *this;
}
reset_all_e& reset_type_c::set_f1_interface()
{
  set(types::f1_interface);
  return c.get<reset_all_e>();
}
ue_associated_lc_f1_conn_list_res_l& reset_type_c::set_part_of_f1_interface()
{
  set(types::part_of_f1_interface);
  return c.get<ue_associated_lc_f1_conn_list_res_l>();
}
protocol_ie_single_container_s<reset_type_ext_ies_o>& reset_type_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
}
void reset_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::f1_interface:
      j.write_str("f1-Interface", "reset-all");
      break;
    case types::part_of_f1_interface:
      j.start_array("partOfF1-Interface");
      for (const auto& e1 : c.get<ue_associated_lc_f1_conn_list_res_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::f1_interface:
      HANDLE_CODE(c.get<reset_all_e>().pack(bref));
      break;
    case types::part_of_f1_interface:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_associated_lc_f1_conn_list_res_l>(), 1, 65536, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::f1_interface:
      HANDLE_CODE(c.get<reset_all_e>().unpack(bref));
      break;
    case types::part_of_f1_interface:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_associated_lc_f1_conn_list_res_l>(), bref, 1, 65536, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* reset_type_c::types_opts::to_string() const
{
  static const char* names[] = {"f1-Interface", "partOfF1-Interface", "choice-extension"};
  return convert_enum_idx(names, 3, value, "reset_type_c::types");
}

// ResourceCoordinationTransferInformation ::= SEQUENCE
SRSASN_CODE res_coordination_transfer_info_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(res_coordination_eutra_cell_info_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(m_enb_cell_id.pack(bref));
  if (res_coordination_eutra_cell_info_present) {
    HANDLE_CODE(res_coordination_eutra_cell_info.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_coordination_transfer_info_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(res_coordination_eutra_cell_info_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(m_enb_cell_id.unpack(bref));
  if (res_coordination_eutra_cell_info_present) {
    HANDLE_CODE(res_coordination_eutra_cell_info.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void res_coordination_transfer_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("meNB-Cell-ID", m_enb_cell_id.to_string());
  if (res_coordination_eutra_cell_info_present) {
    j.write_fieldname("resourceCoordinationEUTRACellInfo");
    res_coordination_eutra_cell_info.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_single_container_s<scell_failedto_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_failedto_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_to_be_remd_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<scell_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_failed_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_failed_to_be_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_modified_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_required_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_setup_mod_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_to_be_released_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_to_be_setup_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<srbs_to_be_setup_mod_item_ies_o>;

// SULAccessIndication ::= ENUMERATED
const char* sul_access_ind_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "sul_access_ind_e");
}

template struct asn1::protocol_ie_single_container_s<served_cells_to_add_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<served_cells_to_delete_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<served_cells_to_modify_item_ies_o>;

// TimeToWait ::= ENUMERATED
const char* time_to_wait_opts::to_string() const
{
  static const char* names[] = {"v1s", "v2s", "v5s", "v10s", "v20s", "v60s"};
  return convert_enum_idx(names, 6, value, "time_to_wait_e");
}
uint8_t time_to_wait_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 5, 10, 20, 60};
  return map_enum_number(numbers, 6, value, "time_to_wait_e");
}

// TransmissionActionIndicator ::= ENUMERATED
const char* tx_action_ind_opts::to_string() const
{
  static const char* names[] = {"stop", "restart"};
  return convert_enum_idx(names, 2, value, "tx_action_ind_e");
}

// UAC-Assistance-Info ::= SEQUENCE
SRSASN_CODE uac_assist_info_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, uac_plmn_list, 1, 12, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE uac_assist_info_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(uac_plmn_list, bref, 1, 12, true));
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void uac_assist_info_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("uACPLMN-List");
  for (const auto& e1 : uac_plmn_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_single_container_s<ue_associated_lc_f1_conn_item_res_ack_o>;

// UEIdentityIndexValue ::= CHOICE
void ue_id_idx_value_c::destroy_()
{
  switch (type_) {
    case types::idx_len10:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void ue_id_idx_value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::idx_len10:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_id_idx_value_c");
  }
}
ue_id_idx_value_c::ue_id_idx_value_c(const ue_id_idx_value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::idx_len10:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_id_idx_value_c");
  }
}
ue_id_idx_value_c& ue_id_idx_value_c::operator=(const ue_id_idx_value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::idx_len10:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_id_idx_value_c");
  }

  return *this;
}
fixed_bitstring<10, false, true>& ue_id_idx_value_c::set_idx_len10()
{
  set(types::idx_len10);
  return c.get<fixed_bitstring<10, false, true>>();
}
protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>& ue_id_idx_value_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>();
}
void ue_id_idx_value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::idx_len10:
      j.write_str("indexLength10", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_id_idx_value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_id_idx_value_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::idx_len10:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_id_idx_value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_id_idx_value_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::idx_len10:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<ue_id_idx_value_choice_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_id_idx_value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_id_idx_value_c::types_opts::to_string() const
{
  static const char* names[] = {"indexLength10", "choice-extension"};
  return convert_enum_idx(names, 2, value, "ue_id_idx_value_c::types");
}
uint8_t ue_id_idx_value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {10};
  return map_enum_number(numbers, 1, value, "ue_id_idx_value_c::types");
}

// F1RemovalFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool f1_removal_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_removal_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_removal_fail_ies_o::value_c f1_removal_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_removal_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
}
f1_removal_fail_ies_o::value_c::value_c(const f1_removal_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
}
f1_removal_fail_ies_o::value_c& f1_removal_fail_ies_o::value_c::operator=(const f1_removal_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_removal_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& f1_removal_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& f1_removal_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_removal_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& f1_removal_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& f1_removal_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_removal_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_removal_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1_removal_fail_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "Cause", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 3, value, "f1_removal_fail_ies_o::value_c::types");
}
uint8_t f1_removal_fail_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "f1_removal_fail_ies_o::value_c::types");
}

// F1RemovalRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78};
  return map_enum_number(names, 1, idx, "id");
}
bool f1_removal_request_ies_o::is_id_valid(const uint32_t& id)
{
  return 78 == id;
}
crit_e f1_removal_request_ies_o::get_crit(const uint32_t& id)
{
  if (id == 78) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
f1_removal_request_ies_o::value_c f1_removal_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 78) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_request_ies_o::get_presence(const uint32_t& id)
{
  if (id == 78) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("INTEGER (0..255,...)", c);
  j.end_obj();
}
SRSASN_CODE f1_removal_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(pack_integer(bref, c, (uint16_t)0u, (uint16_t)255u, true, true));
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(unpack_integer(c, bref, (uint16_t)0u, (uint16_t)255u, true, true));
  return SRSASN_SUCCESS;
}

const char* f1_removal_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)"};
  return convert_enum_idx(names, 1, value, "f1_removal_request_ies_o::value_c::types");
}
uint8_t f1_removal_request_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "f1_removal_request_ies_o::value_c::types");
}

// F1RemovalResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7};
  return map_enum_number(names, 2, idx, "id");
}
bool f1_removal_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_removal_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_removal_resp_ies_o::value_c f1_removal_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_removal_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
}
f1_removal_resp_ies_o::value_c::value_c(const f1_removal_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
}
f1_removal_resp_ies_o::value_c& f1_removal_resp_ies_o::value_c::operator=(const f1_removal_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_removal_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& f1_removal_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_removal_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& f1_removal_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_removal_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_removal_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1_removal_resp_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 2, value, "f1_removal_resp_ies_o::value_c::types");
}
uint8_t f1_removal_resp_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "f1_removal_resp_ies_o::value_c::types");
}

// F1SetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool f1_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_fail_ies_o::value_c f1_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
}
f1_setup_fail_ies_o::value_c::value_c(const f1_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
}
f1_setup_fail_ies_o::value_c& f1_setup_fail_ies_o::value_c::operator=(const f1_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& f1_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& f1_setup_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& f1_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_setup_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& f1_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& f1_setup_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& f1_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1_setup_fail_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "Cause", "TimeToWait", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 4, value, "f1_setup_fail_ies_o::value_c::types");
}
uint8_t f1_setup_fail_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "f1_setup_fail_ies_o::value_c::types");
}

// F1SetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 42, 45, 44, 171};
  return map_enum_number(names, 5, idx, "id");
}
bool f1_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 42, 45, 44, 171};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 42:
      return crit_e::reject;
    case 45:
      return crit_e::ignore;
    case 44:
      return crit_e::reject;
    case 171:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_request_ies_o::value_c f1_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 42:
      ret.set(value_c::types::gnb_du_id);
      break;
    case 45:
      ret.set(value_c::types::gnb_du_name);
      break;
    case 44:
      ret.set(value_c::types::gnb_du_served_cells_list);
      break;
    case 171:
      ret.set(value_c::types::gnb_du_rrc_version);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 42:
      return presence_e::mandatory;
    case 45:
      return presence_e::optional;
    case 44:
      return presence_e::optional;
    case 171:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::gnb_du_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::gnb_du_served_cells_list:
      c.destroy<gnb_du_served_cells_list_l>();
      break;
    case types::gnb_du_rrc_version:
      c.destroy<rrc_version_s>();
      break;
    default:
      break;
  }
}
void f1_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_du_id:
      break;
    case types::gnb_du_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::gnb_du_served_cells_list:
      c.init<gnb_du_served_cells_list_l>();
      break;
    case types::gnb_du_rrc_version:
      c.init<rrc_version_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
}
f1_setup_request_ies_o::value_c::value_c(const f1_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::gnb_du_served_cells_list:
      c.init(other.c.get<gnb_du_served_cells_list_l>());
      break;
    case types::gnb_du_rrc_version:
      c.init(other.c.get<rrc_version_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
}
f1_setup_request_ies_o::value_c&
f1_setup_request_ies_o::value_c::operator=(const f1_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::gnb_du_served_cells_list:
      c.set(other.c.get<gnb_du_served_cells_list_l>());
      break;
    case types::gnb_du_rrc_version:
      c.set(other.c.get<rrc_version_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint64_t& f1_setup_request_ies_o::value_c::gnb_du_id()
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
printable_string<1, 150, true, true>& f1_setup_request_ies_o::value_c::gnb_du_name()
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
gnb_du_served_cells_list_l& f1_setup_request_ies_o::value_c::gnb_du_served_cells_list()
{
  assert_choice_type(types::gnb_du_served_cells_list, type_, "Value");
  return c.get<gnb_du_served_cells_list_l>();
}
rrc_version_s& f1_setup_request_ies_o::value_c::gnb_du_rrc_version()
{
  assert_choice_type(types::gnb_du_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
const uint16_t& f1_setup_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& f1_setup_request_ies_o::value_c::gnb_du_id() const
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
const printable_string<1, 150, true, true>& f1_setup_request_ies_o::value_c::gnb_du_name() const
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const gnb_du_served_cells_list_l& f1_setup_request_ies_o::value_c::gnb_du_served_cells_list() const
{
  assert_choice_type(types::gnb_du_served_cells_list, type_, "Value");
  return c.get<gnb_du_served_cells_list_l>();
}
const rrc_version_s& f1_setup_request_ies_o::value_c::gnb_du_rrc_version() const
{
  assert_choice_type(types::gnb_du_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
void f1_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      j.write_int("INTEGER (0..68719476735)", c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::gnb_du_served_cells_list:
      j.start_array("GNB-DU-Served-Cells-List");
      for (const auto& e1 : c.get<gnb_du_served_cells_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_du_rrc_version:
      j.write_fieldname("RRC-Version");
      c.get<rrc_version_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::gnb_du_served_cells_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_served_cells_list_l>(), 1, 512, true));
      break;
    case types::gnb_du_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::gnb_du_served_cells_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_served_cells_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_du_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1_setup_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..255,...)", "INTEGER (0..68719476735)", "PrintableString", "GNB-DU-Served-Cells-List", "RRC-Version"};
  return convert_enum_idx(names, 5, value, "f1_setup_request_ies_o::value_c::types");
}

// F1SetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 82, 3, 170};
  return map_enum_number(names, 4, idx, "id");
}
bool f1_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 82, 3, 170};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 82:
      return crit_e::ignore;
    case 3:
      return crit_e::reject;
    case 170:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_resp_ies_o::value_c f1_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 82:
      ret.set(value_c::types::gnb_cu_name);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 170:
      ret.set(value_c::types::gnb_cu_rrc_version);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 82:
      return presence_e::optional;
    case 3:
      return presence_e::optional;
    case 170:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::gnb_cu_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::gnb_cu_rrc_version:
      c.destroy<rrc_version_s>();
      break;
    default:
      break;
  }
}
void f1_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::gnb_cu_rrc_version:
      c.init<rrc_version_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
}
f1_setup_resp_ies_o::value_c::value_c(const f1_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::gnb_cu_rrc_version:
      c.init(other.c.get<rrc_version_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
}
f1_setup_resp_ies_o::value_c& f1_setup_resp_ies_o::value_c::operator=(const f1_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::gnb_cu_rrc_version:
      c.set(other.c.get<rrc_version_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
printable_string<1, 150, true, true>& f1_setup_resp_ies_o::value_c::gnb_cu_name()
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
cells_to_be_activ_list_l& f1_setup_resp_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
rrc_version_s& f1_setup_resp_ies_o::value_c::gnb_cu_rrc_version()
{
  assert_choice_type(types::gnb_cu_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
const uint16_t& f1_setup_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const printable_string<1, 150, true, true>& f1_setup_resp_ies_o::value_c::gnb_cu_name() const
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const cells_to_be_activ_list_l& f1_setup_resp_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const rrc_version_s& f1_setup_resp_ies_o::value_c::gnb_cu_rrc_version() const
{
  assert_choice_type(types::gnb_cu_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
void f1_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_rrc_version:
      j.write_fieldname("RRC-Version");
      c.get<rrc_version_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::gnb_cu_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_cu_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1_setup_resp_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "PrintableString", "Cells-to-be-Activated-List", "RRC-Version"};
  return convert_enum_idx(names, 4, value, "f1_setup_resp_ies_o::value_c::types");
}
uint8_t f1_setup_resp_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "f1_setup_resp_ies_o::value_c::types");
}

// GNBCUConfigurationUpdateAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 1, 7, 132, 134, 189};
  return map_enum_number(names, 6, idx, "id");
}
bool gnb_cu_cfg_upd_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 1, 7, 132, 134, 189};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 1:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 132:
      return crit_e::ignore;
    case 134:
      return crit_e::ignore;
    case 189:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_ack_ies_o::value_c gnb_cu_cfg_upd_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 1:
      ret.set(value_c::types::cells_failed_to_be_activ_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 132:
      ret.set(value_c::types::gnb_cu_tnl_assoc_setup_list);
      break;
    case 134:
      ret.set(value_c::types::gnb_cu_tnl_assoc_failed_to_setup_list);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 1:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 132:
      return presence_e::optional;
    case 134:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_failed_to_be_activ_list:
      c.destroy<cells_failed_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.destroy<gnb_cu_tnl_assoc_setup_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.destroy<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_failed_to_be_activ_list:
      c.init<cells_failed_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.init<gnb_cu_tnl_assoc_setup_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.init<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ack_ies_o::value_c::value_c(const gnb_cu_cfg_upd_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      c.init(other.c.get<cells_failed_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_setup_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ack_ies_o::value_c&
gnb_cu_cfg_upd_ack_ies_o::value_c::operator=(const gnb_cu_cfg_upd_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      c.set(other.c.get<cells_failed_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_setup_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_failed_to_be_activ_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::cells_failed_to_be_activ_list()
{
  assert_choice_type(types::cells_failed_to_be_activ_list, type_, "Value");
  return c.get<cells_failed_to_be_activ_list_l>();
}
crit_diagnostics_s& gnb_cu_cfg_upd_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
gnb_cu_tnl_assoc_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_setup_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_setup_list_l>();
}
gnb_cu_tnl_assoc_failed_to_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_failed_to_setup_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_failed_to_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
}
ded_si_delivery_needed_ue_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const uint16_t& gnb_cu_cfg_upd_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_failed_to_be_activ_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::cells_failed_to_be_activ_list() const
{
  assert_choice_type(types::cells_failed_to_be_activ_list, type_, "Value");
  return c.get<cells_failed_to_be_activ_list_l>();
}
const crit_diagnostics_s& gnb_cu_cfg_upd_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const gnb_cu_tnl_assoc_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_setup_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_setup_list_l>();
}
const gnb_cu_tnl_assoc_failed_to_setup_list_l&
gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_failed_to_setup_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_failed_to_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
}
const ded_si_delivery_needed_ue_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
void gnb_cu_cfg_upd_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      j.start_array("Cells-Failed-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_failed_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      j.start_array("GNB-CU-TNL-Association-Setup-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      j.start_array("GNB-CU-TNL-Association-Failed-To-Setup-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_failed_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_failed_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_setup_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>(), 1, 32, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_failed_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_failed_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_cu_cfg_upd_ack_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)",
                                "Cells-Failed-to-be-Activated-List",
                                "CriticalityDiagnostics",
                                "GNB-CU-TNL-Association-Setup-List",
                                "GNB-CU-TNL-Association-Failed-To-Setup-List",
                                "Dedicated-SIDelivery-NeededUE-List"};
  return convert_enum_idx(names, 6, value, "gnb_cu_cfg_upd_ack_ies_o::value_c::types");
}
uint8_t gnb_cu_cfg_upd_ack_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_cu_cfg_upd_ack_ies_o::value_c::types");
}

// GNBCUConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_cu_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_fail_ies_o::value_c gnb_cu_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_fail_ies_o::value_c::value_c(const gnb_cu_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_fail_ies_o::value_c&
gnb_cu_cfg_upd_fail_ies_o::value_c::operator=(const gnb_cu_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_cu_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_cu_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_cu_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_cu_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_cu_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_cu_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_cu_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_cu_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_cu_cfg_upd_fail_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "Cause", "TimeToWait", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 4, value, "gnb_cu_cfg_upd_fail_ies_o::value_c::types");
}
uint8_t gnb_cu_cfg_upd_fail_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_cu_cfg_upd_fail_ies_o::value_c::types");
}

// GNBCUConfigurationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 3, 5, 121, 123, 125, 129, 105};
  return map_enum_number(names, 8, idx, "id");
}
bool gnb_cu_cfg_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 3, 5, 121, 123, 125, 129, 105};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 3:
      return crit_e::reject;
    case 5:
      return crit_e::reject;
    case 121:
      return crit_e::ignore;
    case 123:
      return crit_e::ignore;
    case 125:
      return crit_e::ignore;
    case 129:
      return crit_e::ignore;
    case 105:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_ies_o::value_c gnb_cu_cfg_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 5:
      ret.set(value_c::types::cells_to_be_deactiv_list);
      break;
    case 121:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_add_list);
      break;
    case 123:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_rem_list);
      break;
    case 125:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_upd_list);
      break;
    case 129:
      ret.set(value_c::types::cells_to_be_barred_list);
      break;
    case 105:
      ret.set(value_c::types::protected_eutra_res_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 3:
      return presence_e::optional;
    case 5:
      return presence_e::optional;
    case 121:
      return presence_e::optional;
    case 123:
      return presence_e::optional;
    case 125:
      return presence_e::optional;
    case 129:
      return presence_e::optional;
    case 105:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::cells_to_be_deactiv_list:
      c.destroy<cells_to_be_deactiv_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.destroy<gnb_cu_tnl_assoc_to_add_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.destroy<gnb_cu_tnl_assoc_to_rem_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.destroy<gnb_cu_tnl_assoc_to_upd_list_l>();
      break;
    case types::cells_to_be_barred_list:
      c.destroy<cells_to_be_barred_list_l>();
      break;
    case types::protected_eutra_res_list:
      c.destroy<protected_eutra_res_list_l>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::cells_to_be_deactiv_list:
      c.init<cells_to_be_deactiv_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.init<gnb_cu_tnl_assoc_to_add_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.init<gnb_cu_tnl_assoc_to_rem_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.init<gnb_cu_tnl_assoc_to_upd_list_l>();
      break;
    case types::cells_to_be_barred_list:
      c.init<cells_to_be_barred_list_l>();
      break;
    case types::protected_eutra_res_list:
      c.init<protected_eutra_res_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ies_o::value_c::value_c(const gnb_cu_cfg_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::cells_to_be_deactiv_list:
      c.init(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_add_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_rem_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_upd_list_l>());
      break;
    case types::cells_to_be_barred_list:
      c.init(other.c.get<cells_to_be_barred_list_l>());
      break;
    case types::protected_eutra_res_list:
      c.init(other.c.get<protected_eutra_res_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ies_o::value_c& gnb_cu_cfg_upd_ies_o::value_c::operator=(const gnb_cu_cfg_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::cells_to_be_deactiv_list:
      c.set(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_add_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_rem_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_upd_list_l>());
      break;
    case types::cells_to_be_barred_list:
      c.set(other.c.get<cells_to_be_barred_list_l>());
      break;
    case types::protected_eutra_res_list:
      c.set(other.c.get<protected_eutra_res_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_to_be_activ_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
cells_to_be_deactiv_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_deactiv_list()
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
gnb_cu_tnl_assoc_to_add_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_add_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_add_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_add_list_l>();
}
gnb_cu_tnl_assoc_to_rem_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_rem_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_rem_list_l>();
}
gnb_cu_tnl_assoc_to_upd_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_upd_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_upd_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_upd_list_l>();
}
cells_to_be_barred_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_barred_list()
{
  assert_choice_type(types::cells_to_be_barred_list, type_, "Value");
  return c.get<cells_to_be_barred_list_l>();
}
protected_eutra_res_list_l& gnb_cu_cfg_upd_ies_o::value_c::protected_eutra_res_list()
{
  assert_choice_type(types::protected_eutra_res_list, type_, "Value");
  return c.get<protected_eutra_res_list_l>();
}
const uint16_t& gnb_cu_cfg_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_to_be_activ_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const cells_to_be_deactiv_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_deactiv_list() const
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
const gnb_cu_tnl_assoc_to_add_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_add_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_add_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_add_list_l>();
}
const gnb_cu_tnl_assoc_to_rem_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_rem_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_rem_list_l>();
}
const gnb_cu_tnl_assoc_to_upd_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_upd_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_upd_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_upd_list_l>();
}
const cells_to_be_barred_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_barred_list() const
{
  assert_choice_type(types::cells_to_be_barred_list, type_, "Value");
  return c.get<cells_to_be_barred_list_l>();
}
const protected_eutra_res_list_l& gnb_cu_cfg_upd_ies_o::value_c::protected_eutra_res_list() const
{
  assert_choice_type(types::protected_eutra_res_list, type_, "Value");
  return c.get<protected_eutra_res_list_l>();
}
void gnb_cu_cfg_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_to_be_deactiv_list:
      j.start_array("Cells-to-be-Deactivated-List");
      for (const auto& e1 : c.get<cells_to_be_deactiv_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      j.start_array("GNB-CU-TNL-Association-To-Add-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_add_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      j.start_array("GNB-CU-TNL-Association-To-Remove-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      j.start_array("GNB-CU-TNL-Association-To-Update-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_to_be_barred_list:
      j.start_array("Cells-to-be-Barred-List");
      for (const auto& e1 : c.get<cells_to_be_barred_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::protected_eutra_res_list:
      j.start_array("Protected-EUTRA-Resources-List");
      for (const auto& e1 : c.get<protected_eutra_res_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_deactiv_list_l>(), 1, 512, true));
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_add_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_rem_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_upd_list_l>(), 1, 32, true));
      break;
    case types::cells_to_be_barred_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_barred_list_l>(), 1, 512, true));
      break;
    case types::protected_eutra_res_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<protected_eutra_res_list_l>(), 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_deactiv_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_add_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_rem_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_upd_list_l>(), bref, 1, 32, true));
      break;
    case types::cells_to_be_barred_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_barred_list_l>(), bref, 1, 512, true));
      break;
    case types::protected_eutra_res_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<protected_eutra_res_list_l>(), bref, 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_cu_cfg_upd_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)",
                                "Cells-to-be-Activated-List",
                                "Cells-to-be-Deactivated-List",
                                "GNB-CU-TNL-Association-To-Add-List",
                                "GNB-CU-TNL-Association-To-Remove-List",
                                "GNB-CU-TNL-Association-To-Update-List",
                                "Cells-to-be-Barred-List",
                                "Protected-EUTRA-Resources-List"};
  return convert_enum_idx(names, 8, value, "gnb_cu_cfg_upd_ies_o::value_c::types");
}
uint8_t gnb_cu_cfg_upd_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_cu_cfg_upd_ies_o::value_c::types");
}

// GNBDUConfigurationUpdateAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 3, 7, 5};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_cfg_upd_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 3, 7, 5};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 3:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 5:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_ack_ies_o::value_c gnb_du_cfg_upd_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 5:
      ret.set(value_c::types::cells_to_be_deactiv_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 3:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 5:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::cells_to_be_deactiv_list:
      c.destroy<cells_to_be_deactiv_list_l>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::cells_to_be_deactiv_list:
      c.init<cells_to_be_deactiv_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ack_ies_o::value_c::value_c(const gnb_du_cfg_upd_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::cells_to_be_deactiv_list:
      c.init(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ack_ies_o::value_c&
gnb_du_cfg_upd_ack_ies_o::value_c::operator=(const gnb_du_cfg_upd_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::cells_to_be_deactiv_list:
      c.set(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_to_be_activ_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
crit_diagnostics_s& gnb_du_cfg_upd_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
cells_to_be_deactiv_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_deactiv_list()
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
const uint16_t& gnb_du_cfg_upd_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_to_be_activ_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const crit_diagnostics_s& gnb_du_cfg_upd_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const cells_to_be_deactiv_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_deactiv_list() const
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
void gnb_du_cfg_upd_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::cells_to_be_deactiv_list:
      j.start_array("Cells-to-be-Deactivated-List");
      for (const auto& e1 : c.get<cells_to_be_deactiv_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_deactiv_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_deactiv_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_du_cfg_upd_ack_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..255,...)", "Cells-to-be-Activated-List", "CriticalityDiagnostics", "Cells-to-be-Deactivated-List"};
  return convert_enum_idx(names, 4, value, "gnb_du_cfg_upd_ack_ies_o::value_c::types");
}
uint8_t gnb_du_cfg_upd_ack_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_du_cfg_upd_ack_ies_o::value_c::types");
}

// GNBDUConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_fail_ies_o::value_c gnb_du_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_du_cfg_upd_fail_ies_o::value_c::value_c(const gnb_du_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_du_cfg_upd_fail_ies_o::value_c&
gnb_du_cfg_upd_fail_ies_o::value_c::operator=(const gnb_du_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_du_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_du_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_du_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_du_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_du_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_du_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_du_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_du_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_du_cfg_upd_fail_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "Cause", "TimeToWait", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 4, value, "gnb_du_cfg_upd_fail_ies_o::value_c::types");
}
uint8_t gnb_du_cfg_upd_fail_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_du_cfg_upd_fail_ies_o::value_c::types");
}

// GNBDUConfigurationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 58, 62, 60, 89, 189, 42, 228};
  return map_enum_number(names, 8, idx, "id");
}
bool gnb_du_cfg_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 58, 62, 60, 89, 189, 42, 228};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 58:
      return crit_e::reject;
    case 62:
      return crit_e::reject;
    case 60:
      return crit_e::reject;
    case 89:
      return crit_e::reject;
    case 189:
      return crit_e::ignore;
    case 42:
      return crit_e::reject;
    case 228:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_ies_o::value_c gnb_du_cfg_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 58:
      ret.set(value_c::types::served_cells_to_add_list);
      break;
    case 62:
      ret.set(value_c::types::served_cells_to_modify_list);
      break;
    case 60:
      ret.set(value_c::types::served_cells_to_delete_list);
      break;
    case 89:
      ret.set(value_c::types::cells_status_list);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    case 42:
      ret.set(value_c::types::gnb_du_id);
      break;
    case 228:
      ret.set(value_c::types::gnb_du_tnl_assoc_to_rem_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 58:
      return presence_e::optional;
    case 62:
      return presence_e::optional;
    case 60:
      return presence_e::optional;
    case 89:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    case 42:
      return presence_e::optional;
    case 228:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::served_cells_to_add_list:
      c.destroy<served_cells_to_add_list_l>();
      break;
    case types::served_cells_to_modify_list:
      c.destroy<served_cells_to_modify_list_l>();
      break;
    case types::served_cells_to_delete_list:
      c.destroy<served_cells_to_delete_list_l>();
      break;
    case types::cells_status_list:
      c.destroy<cells_status_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.destroy<gnb_du_tnl_assoc_to_rem_list_l>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::served_cells_to_add_list:
      c.init<served_cells_to_add_list_l>();
      break;
    case types::served_cells_to_modify_list:
      c.init<served_cells_to_modify_list_l>();
      break;
    case types::served_cells_to_delete_list:
      c.init<served_cells_to_delete_list_l>();
      break;
    case types::cells_status_list:
      c.init<cells_status_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::gnb_du_id:
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.init<gnb_du_tnl_assoc_to_rem_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ies_o::value_c::value_c(const gnb_du_cfg_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      c.init(other.c.get<served_cells_to_add_list_l>());
      break;
    case types::served_cells_to_modify_list:
      c.init(other.c.get<served_cells_to_modify_list_l>());
      break;
    case types::served_cells_to_delete_list:
      c.init(other.c.get<served_cells_to_delete_list_l>());
      break;
    case types::cells_status_list:
      c.init(other.c.get<cells_status_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::gnb_du_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.init(other.c.get<gnb_du_tnl_assoc_to_rem_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ies_o::value_c& gnb_du_cfg_upd_ies_o::value_c::operator=(const gnb_du_cfg_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      c.set(other.c.get<served_cells_to_add_list_l>());
      break;
    case types::served_cells_to_modify_list:
      c.set(other.c.get<served_cells_to_modify_list_l>());
      break;
    case types::served_cells_to_delete_list:
      c.set(other.c.get<served_cells_to_delete_list_l>());
      break;
    case types::cells_status_list:
      c.set(other.c.get<cells_status_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::gnb_du_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.set(other.c.get<gnb_du_tnl_assoc_to_rem_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
served_cells_to_add_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_add_list()
{
  assert_choice_type(types::served_cells_to_add_list, type_, "Value");
  return c.get<served_cells_to_add_list_l>();
}
served_cells_to_modify_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_modify_list()
{
  assert_choice_type(types::served_cells_to_modify_list, type_, "Value");
  return c.get<served_cells_to_modify_list_l>();
}
served_cells_to_delete_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_delete_list()
{
  assert_choice_type(types::served_cells_to_delete_list, type_, "Value");
  return c.get<served_cells_to_delete_list_l>();
}
cells_status_list_l& gnb_du_cfg_upd_ies_o::value_c::cells_status_list()
{
  assert_choice_type(types::cells_status_list, type_, "Value");
  return c.get<cells_status_list_l>();
}
ded_si_delivery_needed_ue_list_l& gnb_du_cfg_upd_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
uint64_t& gnb_du_cfg_upd_ies_o::value_c::gnb_du_id()
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
gnb_du_tnl_assoc_to_rem_list_l& gnb_du_cfg_upd_ies_o::value_c::gnb_du_tnl_assoc_to_rem_list()
{
  assert_choice_type(types::gnb_du_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_du_tnl_assoc_to_rem_list_l>();
}
const uint16_t& gnb_du_cfg_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const served_cells_to_add_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_add_list() const
{
  assert_choice_type(types::served_cells_to_add_list, type_, "Value");
  return c.get<served_cells_to_add_list_l>();
}
const served_cells_to_modify_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_modify_list() const
{
  assert_choice_type(types::served_cells_to_modify_list, type_, "Value");
  return c.get<served_cells_to_modify_list_l>();
}
const served_cells_to_delete_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_delete_list() const
{
  assert_choice_type(types::served_cells_to_delete_list, type_, "Value");
  return c.get<served_cells_to_delete_list_l>();
}
const cells_status_list_l& gnb_du_cfg_upd_ies_o::value_c::cells_status_list() const
{
  assert_choice_type(types::cells_status_list, type_, "Value");
  return c.get<cells_status_list_l>();
}
const ded_si_delivery_needed_ue_list_l& gnb_du_cfg_upd_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const uint64_t& gnb_du_cfg_upd_ies_o::value_c::gnb_du_id() const
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
const gnb_du_tnl_assoc_to_rem_list_l& gnb_du_cfg_upd_ies_o::value_c::gnb_du_tnl_assoc_to_rem_list() const
{
  assert_choice_type(types::gnb_du_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_du_tnl_assoc_to_rem_list_l>();
}
void gnb_du_cfg_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      j.start_array("Served-Cells-To-Add-List");
      for (const auto& e1 : c.get<served_cells_to_add_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::served_cells_to_modify_list:
      j.start_array("Served-Cells-To-Modify-List");
      for (const auto& e1 : c.get<served_cells_to_modify_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::served_cells_to_delete_list:
      j.start_array("Served-Cells-To-Delete-List");
      for (const auto& e1 : c.get<served_cells_to_delete_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_status_list:
      j.start_array("Cells-Status-List");
      for (const auto& e1 : c.get<cells_status_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_du_id:
      j.write_int("INTEGER (0..68719476735)", c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      j.start_array("GNB-DU-TNL-Association-To-Remove-List");
      for (const auto& e1 : c.get<gnb_du_tnl_assoc_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::served_cells_to_add_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_add_list_l>(), 1, 512, true));
      break;
    case types::served_cells_to_modify_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_modify_list_l>(), 1, 512, true));
      break;
    case types::served_cells_to_delete_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_delete_list_l>(), 1, 512, true));
      break;
    case types::cells_status_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_status_list_l>(), 0, 512, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_tnl_assoc_to_rem_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::served_cells_to_add_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_add_list_l>(), bref, 1, 512, true));
      break;
    case types::served_cells_to_modify_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_modify_list_l>(), bref, 1, 512, true));
      break;
    case types::served_cells_to_delete_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_delete_list_l>(), bref, 1, 512, true));
      break;
    case types::cells_status_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_status_list_l>(), bref, 0, 512, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_tnl_assoc_to_rem_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_du_cfg_upd_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)",
                                "Served-Cells-To-Add-List",
                                "Served-Cells-To-Modify-List",
                                "Served-Cells-To-Delete-List",
                                "Cells-Status-List",
                                "Dedicated-SIDelivery-NeededUE-List",
                                "INTEGER (0..68719476735)",
                                "GNB-DU-TNL-Association-To-Remove-List"};
  return convert_enum_idx(names, 8, value, "gnb_du_cfg_upd_ies_o::value_c::types");
}

// GNBDUResourceCoordinationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_coordination_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 106, 101, 213};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_res_coordination_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 106, 101, 213};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_coordination_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 106:
      return crit_e::reject;
    case 101:
      return crit_e::reject;
    case 213:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_coordination_request_ies_o::value_c gnb_du_res_coordination_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 106:
      ret.set(value_c::types::request_type);
      break;
    case 101:
      ret.set(value_c::types::eutra_nr_cell_res_coordination_req_container);
      break;
    case 213:
      ret.set(value_c::types::ignore_res_coordination_container);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_coordination_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 106:
      return presence_e::mandatory;
    case 101:
      return presence_e::mandatory;
    case 213:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_coordination_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::eutra_nr_cell_res_coordination_req_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void gnb_du_res_coordination_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::request_type:
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::ignore_res_coordination_container:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
}
gnb_du_res_coordination_request_ies_o::value_c::value_c(const gnb_du_res_coordination_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::request_type:
      c.init(other.c.get<request_type_e>());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ignore_res_coordination_container:
      c.init(other.c.get<ignore_res_coordination_container_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
}
gnb_du_res_coordination_request_ies_o::value_c&
gnb_du_res_coordination_request_ies_o::value_c::operator=(const gnb_du_res_coordination_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::request_type:
      c.set(other.c.get<request_type_e>());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ignore_res_coordination_container:
      c.set(other.c.get<ignore_res_coordination_container_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_coordination_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
request_type_e& gnb_du_res_coordination_request_ies_o::value_c::request_type()
{
  assert_choice_type(types::request_type, type_, "Value");
  return c.get<request_type_e>();
}
unbounded_octstring<true>&
gnb_du_res_coordination_request_ies_o::value_c::eutra_nr_cell_res_coordination_req_container()
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
ignore_res_coordination_container_e& gnb_du_res_coordination_request_ies_o::value_c::ignore_res_coordination_container()
{
  assert_choice_type(types::ignore_res_coordination_container, type_, "Value");
  return c.get<ignore_res_coordination_container_e>();
}
const uint16_t& gnb_du_res_coordination_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const request_type_e& gnb_du_res_coordination_request_ies_o::value_c::request_type() const
{
  assert_choice_type(types::request_type, type_, "Value");
  return c.get<request_type_e>();
}
const unbounded_octstring<true>&
gnb_du_res_coordination_request_ies_o::value_c::eutra_nr_cell_res_coordination_req_container() const
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const ignore_res_coordination_container_e&
gnb_du_res_coordination_request_ies_o::value_c::ignore_res_coordination_container() const
{
  assert_choice_type(types::ignore_res_coordination_container, type_, "Value");
  return c.get<ignore_res_coordination_container_e>();
}
void gnb_du_res_coordination_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::request_type:
      j.write_str("RequestType", c.get<request_type_e>().to_string());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::ignore_res_coordination_container:
      j.write_str("IgnoreResourceCoordinationContainer", "yes");
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_coordination_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::request_type:
      HANDLE_CODE(c.get<request_type_e>().pack(bref));
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::ignore_res_coordination_container:
      HANDLE_CODE(c.get<ignore_res_coordination_container_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::request_type:
      HANDLE_CODE(c.get<request_type_e>().unpack(bref));
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::ignore_res_coordination_container:
      HANDLE_CODE(c.get<ignore_res_coordination_container_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_du_res_coordination_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..255,...)", "RequestType", "OCTET STRING", "IgnoreResourceCoordinationContainer"};
  return convert_enum_idx(names, 4, value, "gnb_du_res_coordination_request_ies_o::value_c::types");
}
uint8_t gnb_du_res_coordination_request_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_du_res_coordination_request_ies_o::value_c::types");
}

// GNBDUResourceCoordinationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_coordination_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 102};
  return map_enum_number(names, 2, idx, "id");
}
bool gnb_du_res_coordination_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 102};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_coordination_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 102:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_coordination_resp_ies_o::value_c gnb_du_res_coordination_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 102:
      ret.set(value_c::types::eutra_nr_cell_res_coordination_req_ack_container);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_coordination_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 102:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_coordination_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void gnb_du_res_coordination_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
}
gnb_du_res_coordination_resp_ies_o::value_c::value_c(const gnb_du_res_coordination_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
}
gnb_du_res_coordination_resp_ies_o::value_c&
gnb_du_res_coordination_resp_ies_o::value_c::operator=(const gnb_du_res_coordination_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_coordination_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
unbounded_octstring<true>&
gnb_du_res_coordination_resp_ies_o::value_c::eutra_nr_cell_res_coordination_req_ack_container()
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_ack_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint16_t& gnb_du_res_coordination_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>&
gnb_du_res_coordination_resp_ies_o::value_c::eutra_nr_cell_res_coordination_req_ack_container() const
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_ack_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void gnb_du_res_coordination_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_du_res_coordination_resp_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "OCTET STRING"};
  return convert_enum_idx(names, 2, value, "gnb_du_res_coordination_resp_ies_o::value_c::types");
}
uint8_t gnb_du_res_coordination_resp_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_du_res_coordination_resp_ies_o::value_c::types");
}

// GNBDUStatusIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_status_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 172};
  return map_enum_number(names, 2, idx, "id");
}
bool gnb_du_status_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 172};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_status_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 172:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_status_ind_ies_o::value_c gnb_du_status_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 172:
      ret.set(value_c::types::gnb_du_overload_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_status_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 172:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_status_ind_ies_o::value_c::destroy_() {}
void gnb_du_status_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
gnb_du_status_ind_ies_o::value_c::value_c(const gnb_du_status_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      c.init(other.c.get<gnb_du_overload_info_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
}
gnb_du_status_ind_ies_o::value_c&
gnb_du_status_ind_ies_o::value_c::operator=(const gnb_du_status_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      c.set(other.c.get<gnb_du_overload_info_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_status_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
gnb_du_overload_info_e& gnb_du_status_ind_ies_o::value_c::gnb_du_overload_info()
{
  assert_choice_type(types::gnb_du_overload_info, type_, "Value");
  return c.get<gnb_du_overload_info_e>();
}
const uint16_t& gnb_du_status_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const gnb_du_overload_info_e& gnb_du_status_ind_ies_o::value_c::gnb_du_overload_info() const
{
  assert_choice_type(types::gnb_du_overload_info, type_, "Value");
  return c.get<gnb_du_overload_info_e>();
}
void gnb_du_status_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      j.write_str("GNBDUOverloadInformation", c.get<gnb_du_overload_info_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_status_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_overload_info:
      HANDLE_CODE(c.get<gnb_du_overload_info_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_status_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_overload_info:
      HANDLE_CODE(c.get<gnb_du_overload_info_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* gnb_du_status_ind_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "GNBDUOverloadInformation"};
  return convert_enum_idx(names, 2, value, "gnb_du_status_ind_ies_o::value_c::types");
}
uint8_t gnb_du_status_ind_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "gnb_du_status_ind_ies_o::value_c::types");
}

// InitialULRRCMessageTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t init_ul_rrc_msg_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {41, 111, 95, 50, 128, 178, 78, 226, 241};
  return map_enum_number(names, 9, idx, "id");
}
bool init_ul_rrc_msg_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {41, 111, 95, 50, 128, 178, 78, 226, 241};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e init_ul_rrc_msg_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 41:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    case 95:
      return crit_e::reject;
    case 50:
      return crit_e::reject;
    case 128:
      return crit_e::reject;
    case 178:
      return crit_e::ignore;
    case 78:
      return crit_e::ignore;
    case 226:
      return crit_e::ignore;
    case 241:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
init_ul_rrc_msg_transfer_ies_o::value_c init_ul_rrc_msg_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    case 95:
      ret.set(value_c::types::c_rnti);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 128:
      ret.set(value_c::types::du_to_cu_rrc_container);
      break;
    case 178:
      ret.set(value_c::types::sul_access_ind);
      break;
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 226:
      ret.set(value_c::types::ran_ue_id);
      break;
    case 241:
      ret.set(value_c::types::rrc_container_rrc_setup_complete);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e init_ul_rrc_msg_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 41:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    case 95:
      return presence_e::mandatory;
    case 50:
      return presence_e::mandatory;
    case 128:
      return presence_e::optional;
    case 178:
      return presence_e::optional;
    case 78:
      return presence_e::mandatory;
    case 226:
      return presence_e::optional;
    case 241:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void init_ul_rrc_msg_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::ran_ue_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    case types::rrc_container_rrc_setup_complete:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void init_ul_rrc_msg_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::c_rnti:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::sul_access_ind:
      break;
    case types::transaction_id:
      break;
    case types::ran_ue_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::rrc_container_rrc_setup_complete:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }
}
init_ul_rrc_msg_transfer_ies_o::value_c::value_c(const init_ul_rrc_msg_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::c_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sul_access_ind:
      c.init(other.c.get<sul_access_ind_e>());
      break;
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::rrc_container_rrc_setup_complete:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }
}
init_ul_rrc_msg_transfer_ies_o::value_c&
init_ul_rrc_msg_transfer_ies_o::value_c::operator=(const init_ul_rrc_msg_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::c_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sul_access_ind:
      c.set(other.c.get<sul_access_ind_e>());
      break;
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::rrc_container_rrc_setup_complete:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& init_ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& init_ul_rrc_msg_transfer_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
uint32_t& init_ul_rrc_msg_transfer_ies_o::value_c::c_rnti()
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::du_to_cu_rrc_container()
{
  assert_choice_type(types::du_to_cu_rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
sul_access_ind_e& init_ul_rrc_msg_transfer_ies_o::value_c::sul_access_ind()
{
  assert_choice_type(types::sul_access_ind, type_, "Value");
  return c.get<sul_access_ind_e>();
}
uint16_t& init_ul_rrc_msg_transfer_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
fixed_octstring<8, true>& init_ul_rrc_msg_transfer_ies_o::value_c::ran_ue_id()
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container_rrc_setup_complete()
{
  assert_choice_type(types::rrc_container_rrc_setup_complete, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint64_t& init_ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& init_ul_rrc_msg_transfer_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint32_t& init_ul_rrc_msg_transfer_ies_o::value_c::c_rnti() const
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
const unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::du_to_cu_rrc_container() const
{
  assert_choice_type(types::du_to_cu_rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const sul_access_ind_e& init_ul_rrc_msg_transfer_ies_o::value_c::sul_access_ind() const
{
  assert_choice_type(types::sul_access_ind, type_, "Value");
  return c.get<sul_access_ind_e>();
}
const uint16_t& init_ul_rrc_msg_transfer_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const fixed_octstring<8, true>& init_ul_rrc_msg_transfer_ies_o::value_c::ran_ue_id() const
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const unbounded_octstring<true>& init_ul_rrc_msg_transfer_ies_o::value_c::rrc_container_rrc_setup_complete() const
{
  assert_choice_type(types::rrc_container_rrc_setup_complete, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void init_ul_rrc_msg_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::c_rnti:
      j.write_int("INTEGER (0..65535,...)", c.get<uint32_t>());
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::du_to_cu_rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::sul_access_ind:
      j.write_str("SULAccessIndication", "true");
      break;
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    case types::rrc_container_rrc_setup_complete:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::du_to_cu_rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::sul_access_ind:
      HANDLE_CODE(c.get<sul_access_ind_e>().pack(bref));
      break;
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    case types::rrc_container_rrc_setup_complete:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::du_to_cu_rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::sul_access_ind:
      HANDLE_CODE(c.get<sul_access_ind_e>().unpack(bref));
      break;
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    case types::rrc_container_rrc_setup_complete:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "init_ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* init_ul_rrc_msg_transfer_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "NRCGI",
                                "INTEGER (0..65535,...)",
                                "OCTET STRING",
                                "OCTET STRING",
                                "SULAccessIndication",
                                "INTEGER (0..255,...)",
                                "OCTET STRING",
                                "OCTET STRING"};
  return convert_enum_idx(names, 9, value, "init_ul_rrc_msg_transfer_ies_o::value_c::types");
}

// NetworkAccessRateReductionIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t network_access_rate_reduction_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 225};
  return map_enum_number(names, 2, idx, "id");
}
bool network_access_rate_reduction_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 225};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e network_access_rate_reduction_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 225:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
network_access_rate_reduction_ies_o::value_c network_access_rate_reduction_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 225:
      ret.set(value_c::types::uac_assist_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e network_access_rate_reduction_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 225:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void network_access_rate_reduction_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::uac_assist_info:
      c.destroy<uac_assist_info_s>();
      break;
    default:
      break;
  }
}
void network_access_rate_reduction_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::uac_assist_info:
      c.init<uac_assist_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
}
network_access_rate_reduction_ies_o::value_c::value_c(const network_access_rate_reduction_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      c.init(other.c.get<uac_assist_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
}
network_access_rate_reduction_ies_o::value_c&
network_access_rate_reduction_ies_o::value_c::operator=(const network_access_rate_reduction_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      c.set(other.c.get<uac_assist_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }

  return *this;
}
uint16_t& network_access_rate_reduction_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uac_assist_info_s& network_access_rate_reduction_ies_o::value_c::uac_assist_info()
{
  assert_choice_type(types::uac_assist_info, type_, "Value");
  return c.get<uac_assist_info_s>();
}
const uint16_t& network_access_rate_reduction_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uac_assist_info_s& network_access_rate_reduction_ies_o::value_c::uac_assist_info() const
{
  assert_choice_type(types::uac_assist_info, type_, "Value");
  return c.get<uac_assist_info_s>();
}
void network_access_rate_reduction_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      j.write_fieldname("UAC-Assistance-Info");
      c.get<uac_assist_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE network_access_rate_reduction_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uac_assist_info:
      HANDLE_CODE(c.get<uac_assist_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE network_access_rate_reduction_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uac_assist_info:
      HANDLE_CODE(c.get<uac_assist_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* network_access_rate_reduction_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "UAC-Assistance-Info"};
  return convert_enum_idx(names, 2, value, "network_access_rate_reduction_ies_o::value_c::types");
}
uint8_t network_access_rate_reduction_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "network_access_rate_reduction_ies_o::value_c::types");
}

// NotifyIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t notify_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 137};
  return map_enum_number(names, 3, idx, "id");
}
bool notify_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 137};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e notify_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 137:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
notify_ies_o::value_c notify_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 137:
      ret.set(value_c::types::drb_notify_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e notify_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 137:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void notify_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::drb_notify_list:
      c.destroy<drb_notify_list_l>();
      break;
    default:
      break;
  }
}
void notify_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::drb_notify_list:
      c.init<drb_notify_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
}
notify_ies_o::value_c::value_c(const notify_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      c.init(other.c.get<drb_notify_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
}
notify_ies_o::value_c& notify_ies_o::value_c::operator=(const notify_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      c.set(other.c.get<drb_notify_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }

  return *this;
}
uint64_t& notify_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& notify_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
drb_notify_list_l& notify_ies_o::value_c::drb_notify_list()
{
  assert_choice_type(types::drb_notify_list, type_, "Value");
  return c.get<drb_notify_list_l>();
}
const uint64_t& notify_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& notify_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const drb_notify_list_l& notify_ies_o::value_c::drb_notify_list() const
{
  assert_choice_type(types::drb_notify_list, type_, "Value");
  return c.get<drb_notify_list_l>();
}
void notify_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      j.start_array("DRB-Notify-List");
      for (const auto& e1 : c.get<drb_notify_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE notify_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_notify_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drb_notify_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE notify_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_notify_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drb_notify_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* notify_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "DRB-Notify-List"};
  return convert_enum_idx(names, 3, value, "notify_ies_o::value_c::types");
}

// PWSCancelRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_cancel_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 142, 148, 157, 220};
  return map_enum_number(names, 5, idx, "id");
}
bool pws_cancel_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 142, 148, 157, 220};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_cancel_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 142:
      return crit_e::reject;
    case 148:
      return crit_e::reject;
    case 157:
      return crit_e::reject;
    case 220:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_cancel_request_ies_o::value_c pws_cancel_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 142:
      ret.set(value_c::types::numof_broadcast_request);
      break;
    case 148:
      ret.set(value_c::types::broadcast_to_be_cancelled_list);
      break;
    case 157:
      ret.set(value_c::types::cancel_all_warning_msgs_ind);
      break;
    case 220:
      ret.set(value_c::types::notif_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_cancel_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 142:
      return presence_e::mandatory;
    case 148:
      return presence_e::optional;
    case 157:
      return presence_e::optional;
    case 220:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_cancel_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::broadcast_to_be_cancelled_list:
      c.destroy<broadcast_to_be_cancelled_list_l>();
      break;
    case types::notif_info:
      c.destroy<notif_info_s>();
      break;
    default:
      break;
  }
}
void pws_cancel_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::numof_broadcast_request:
      break;
    case types::broadcast_to_be_cancelled_list:
      c.init<broadcast_to_be_cancelled_list_l>();
      break;
    case types::cancel_all_warning_msgs_ind:
      break;
    case types::notif_info:
      c.init<notif_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
}
pws_cancel_request_ies_o::value_c::value_c(const pws_cancel_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      c.init(other.c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      c.init(other.c.get<broadcast_to_be_cancelled_list_l>());
      break;
    case types::cancel_all_warning_msgs_ind:
      c.init(other.c.get<cancel_all_warning_msgs_ind_e>());
      break;
    case types::notif_info:
      c.init(other.c.get<notif_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
}
pws_cancel_request_ies_o::value_c&
pws_cancel_request_ies_o::value_c::operator=(const pws_cancel_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      c.set(other.c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      c.set(other.c.get<broadcast_to_be_cancelled_list_l>());
      break;
    case types::cancel_all_warning_msgs_ind:
      c.set(other.c.get<cancel_all_warning_msgs_ind_e>());
      break;
    case types::notif_info:
      c.set(other.c.get<notif_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_cancel_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& pws_cancel_request_ies_o::value_c::numof_broadcast_request()
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
broadcast_to_be_cancelled_list_l& pws_cancel_request_ies_o::value_c::broadcast_to_be_cancelled_list()
{
  assert_choice_type(types::broadcast_to_be_cancelled_list, type_, "Value");
  return c.get<broadcast_to_be_cancelled_list_l>();
}
cancel_all_warning_msgs_ind_e& pws_cancel_request_ies_o::value_c::cancel_all_warning_msgs_ind()
{
  assert_choice_type(types::cancel_all_warning_msgs_ind, type_, "Value");
  return c.get<cancel_all_warning_msgs_ind_e>();
}
notif_info_s& pws_cancel_request_ies_o::value_c::notif_info()
{
  assert_choice_type(types::notif_info, type_, "Value");
  return c.get<notif_info_s>();
}
const uint16_t& pws_cancel_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& pws_cancel_request_ies_o::value_c::numof_broadcast_request() const
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
const broadcast_to_be_cancelled_list_l& pws_cancel_request_ies_o::value_c::broadcast_to_be_cancelled_list() const
{
  assert_choice_type(types::broadcast_to_be_cancelled_list, type_, "Value");
  return c.get<broadcast_to_be_cancelled_list_l>();
}
const cancel_all_warning_msgs_ind_e& pws_cancel_request_ies_o::value_c::cancel_all_warning_msgs_ind() const
{
  assert_choice_type(types::cancel_all_warning_msgs_ind, type_, "Value");
  return c.get<cancel_all_warning_msgs_ind_e>();
}
const notif_info_s& pws_cancel_request_ies_o::value_c::notif_info() const
{
  assert_choice_type(types::notif_info, type_, "Value");
  return c.get<notif_info_s>();
}
void pws_cancel_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      j.write_int("INTEGER (0..65535)", c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      j.start_array("Broadcast-To-Be-Cancelled-List");
      for (const auto& e1 : c.get<broadcast_to_be_cancelled_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cancel_all_warning_msgs_ind:
      j.write_str("Cancel-all-Warning-Messages-Indicator", "true");
      break;
    case types::notif_info:
      j.write_fieldname("NotificationInformation");
      c.get<notif_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_cancel_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::broadcast_to_be_cancelled_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_to_be_cancelled_list_l>(), 1, 512, true));
      break;
    case types::cancel_all_warning_msgs_ind:
      HANDLE_CODE(c.get<cancel_all_warning_msgs_ind_e>().pack(bref));
      break;
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::broadcast_to_be_cancelled_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_to_be_cancelled_list_l>(), bref, 1, 512, true));
      break;
    case types::cancel_all_warning_msgs_ind:
      HANDLE_CODE(c.get<cancel_all_warning_msgs_ind_e>().unpack(bref));
      break;
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pws_cancel_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)",
                                "INTEGER (0..65535)",
                                "Broadcast-To-Be-Cancelled-List",
                                "Cancel-all-Warning-Messages-Indicator",
                                "NotificationInformation"};
  return convert_enum_idx(names, 5, value, "pws_cancel_request_ies_o::value_c::types");
}

// PWSCancelResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_cancel_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 150, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool pws_cancel_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 150, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_cancel_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 150:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_cancel_resp_ies_o::value_c pws_cancel_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 150:
      ret.set(value_c::types::cells_broadcast_cancelled_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_cancel_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 150:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_cancel_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_broadcast_cancelled_list:
      c.destroy<cells_broadcast_cancelled_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void pws_cancel_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_broadcast_cancelled_list:
      c.init<cells_broadcast_cancelled_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
}
pws_cancel_resp_ies_o::value_c::value_c(const pws_cancel_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      c.init(other.c.get<cells_broadcast_cancelled_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
}
pws_cancel_resp_ies_o::value_c& pws_cancel_resp_ies_o::value_c::operator=(const pws_cancel_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      c.set(other.c.get<cells_broadcast_cancelled_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_cancel_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_broadcast_cancelled_list_l& pws_cancel_resp_ies_o::value_c::cells_broadcast_cancelled_list()
{
  assert_choice_type(types::cells_broadcast_cancelled_list, type_, "Value");
  return c.get<cells_broadcast_cancelled_list_l>();
}
crit_diagnostics_s& pws_cancel_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& pws_cancel_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_broadcast_cancelled_list_l& pws_cancel_resp_ies_o::value_c::cells_broadcast_cancelled_list() const
{
  assert_choice_type(types::cells_broadcast_cancelled_list, type_, "Value");
  return c.get<cells_broadcast_cancelled_list_l>();
}
const crit_diagnostics_s& pws_cancel_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void pws_cancel_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      j.start_array("Cells-Broadcast-Cancelled-List");
      for (const auto& e1 : c.get<cells_broadcast_cancelled_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_cancel_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_cancelled_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_broadcast_cancelled_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_cancelled_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_broadcast_cancelled_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pws_cancel_resp_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "Cells-Broadcast-Cancelled-List", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 3, value, "pws_cancel_resp_ies_o::value_c::types");
}
uint8_t pws_cancel_resp_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "pws_cancel_resp_ies_o::value_c::types");
}

// PWSFailureIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 154};
  return map_enum_number(names, 2, idx, "id");
}
bool pws_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 154};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 154:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_fail_ind_ies_o::value_c pws_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 154:
      ret.set(value_c::types::pws_failed_nr_cgi_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 154:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pws_failed_nr_cgi_list:
      c.destroy<pws_failed_nr_cgi_list_l>();
      break;
    default:
      break;
  }
}
void pws_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pws_failed_nr_cgi_list:
      c.init<pws_failed_nr_cgi_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
}
pws_fail_ind_ies_o::value_c::value_c(const pws_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      c.init(other.c.get<pws_failed_nr_cgi_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
}
pws_fail_ind_ies_o::value_c& pws_fail_ind_ies_o::value_c::operator=(const pws_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      c.set(other.c.get<pws_failed_nr_cgi_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_fail_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
pws_failed_nr_cgi_list_l& pws_fail_ind_ies_o::value_c::pws_failed_nr_cgi_list()
{
  assert_choice_type(types::pws_failed_nr_cgi_list, type_, "Value");
  return c.get<pws_failed_nr_cgi_list_l>();
}
const uint16_t& pws_fail_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const pws_failed_nr_cgi_list_l& pws_fail_ind_ies_o::value_c::pws_failed_nr_cgi_list() const
{
  assert_choice_type(types::pws_failed_nr_cgi_list, type_, "Value");
  return c.get<pws_failed_nr_cgi_list_l>();
}
void pws_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      j.start_array("PWS-Failed-NR-CGI-List");
      for (const auto& e1 : c.get<pws_failed_nr_cgi_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_failed_nr_cgi_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pws_failed_nr_cgi_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_failed_nr_cgi_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pws_failed_nr_cgi_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pws_fail_ind_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "PWS-Failed-NR-CGI-List"};
  return convert_enum_idx(names, 2, value, "pws_fail_ind_ies_o::value_c::types");
}
uint8_t pws_fail_ind_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "pws_fail_ind_ies_o::value_c::types");
}

// PWSRestartIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_restart_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 152};
  return map_enum_number(names, 2, idx, "id");
}
bool pws_restart_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 152};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_restart_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 152:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_restart_ind_ies_o::value_c pws_restart_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 152:
      ret.set(value_c::types::nr_cgi_list_for_restart_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_restart_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 152:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_restart_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi_list_for_restart_list:
      c.destroy<nr_cgi_list_for_restart_list_l>();
      break;
    default:
      break;
  }
}
void pws_restart_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi_list_for_restart_list:
      c.init<nr_cgi_list_for_restart_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
}
pws_restart_ind_ies_o::value_c::value_c(const pws_restart_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      c.init(other.c.get<nr_cgi_list_for_restart_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
}
pws_restart_ind_ies_o::value_c& pws_restart_ind_ies_o::value_c::operator=(const pws_restart_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      c.set(other.c.get<nr_cgi_list_for_restart_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_restart_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_list_for_restart_list_l& pws_restart_ind_ies_o::value_c::nr_cgi_list_for_restart_list()
{
  assert_choice_type(types::nr_cgi_list_for_restart_list, type_, "Value");
  return c.get<nr_cgi_list_for_restart_list_l>();
}
const uint16_t& pws_restart_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_list_for_restart_list_l& pws_restart_ind_ies_o::value_c::nr_cgi_list_for_restart_list() const
{
  assert_choice_type(types::nr_cgi_list_for_restart_list, type_, "Value");
  return c.get<nr_cgi_list_for_restart_list_l>();
}
void pws_restart_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      j.start_array("NR-CGI-List-For-Restart-List");
      for (const auto& e1 : c.get<nr_cgi_list_for_restart_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_restart_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi_list_for_restart_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<nr_cgi_list_for_restart_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_restart_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi_list_for_restart_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<nr_cgi_list_for_restart_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* pws_restart_ind_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "NR-CGI-List-For-Restart-List"};
  return convert_enum_idx(names, 2, value, "pws_restart_ind_ies_o::value_c::types");
}
uint8_t pws_restart_ind_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "pws_restart_ind_ies_o::value_c::types");
}

// PagingIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t paging_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {117, 127, 114, 115, 113, 216};
  return map_enum_number(names, 6, idx, "id");
}
bool paging_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {117, 127, 114, 115, 113, 216};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e paging_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 117:
      return crit_e::reject;
    case 127:
      return crit_e::reject;
    case 114:
      return crit_e::ignore;
    case 115:
      return crit_e::ignore;
    case 113:
      return crit_e::ignore;
    case 216:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
paging_ies_o::value_c paging_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 117:
      ret.set(value_c::types::ue_id_idx_value);
      break;
    case 127:
      ret.set(value_c::types::paging_id);
      break;
    case 114:
      ret.set(value_c::types::paging_drx);
      break;
    case 115:
      ret.set(value_c::types::paging_prio);
      break;
    case 113:
      ret.set(value_c::types::paging_cell_list);
      break;
    case 216:
      ret.set(value_c::types::paging_origin);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e paging_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 117:
      return presence_e::mandatory;
    case 127:
      return presence_e::mandatory;
    case 114:
      return presence_e::optional;
    case 115:
      return presence_e::optional;
    case 113:
      return presence_e::mandatory;
    case 216:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void paging_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ue_id_idx_value:
      c.destroy<ue_id_idx_value_c>();
      break;
    case types::paging_id:
      c.destroy<paging_id_c>();
      break;
    case types::paging_cell_list:
      c.destroy<paging_cell_list_l>();
      break;
    default:
      break;
  }
}
void paging_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ue_id_idx_value:
      c.init<ue_id_idx_value_c>();
      break;
    case types::paging_id:
      c.init<paging_id_c>();
      break;
    case types::paging_drx:
      break;
    case types::paging_prio:
      break;
    case types::paging_cell_list:
      c.init<paging_cell_list_l>();
      break;
    case types::paging_origin:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
}
paging_ies_o::value_c::value_c(const paging_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ue_id_idx_value:
      c.init(other.c.get<ue_id_idx_value_c>());
      break;
    case types::paging_id:
      c.init(other.c.get<paging_id_c>());
      break;
    case types::paging_drx:
      c.init(other.c.get<paging_drx_e>());
      break;
    case types::paging_prio:
      c.init(other.c.get<paging_prio_e>());
      break;
    case types::paging_cell_list:
      c.init(other.c.get<paging_cell_list_l>());
      break;
    case types::paging_origin:
      c.init(other.c.get<paging_origin_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
}
paging_ies_o::value_c& paging_ies_o::value_c::operator=(const paging_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ue_id_idx_value:
      c.set(other.c.get<ue_id_idx_value_c>());
      break;
    case types::paging_id:
      c.set(other.c.get<paging_id_c>());
      break;
    case types::paging_drx:
      c.set(other.c.get<paging_drx_e>());
      break;
    case types::paging_prio:
      c.set(other.c.get<paging_prio_e>());
      break;
    case types::paging_cell_list:
      c.set(other.c.get<paging_cell_list_l>());
      break;
    case types::paging_origin:
      c.set(other.c.get<paging_origin_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }

  return *this;
}
ue_id_idx_value_c& paging_ies_o::value_c::ue_id_idx_value()
{
  assert_choice_type(types::ue_id_idx_value, type_, "Value");
  return c.get<ue_id_idx_value_c>();
}
paging_id_c& paging_ies_o::value_c::paging_id()
{
  assert_choice_type(types::paging_id, type_, "Value");
  return c.get<paging_id_c>();
}
paging_drx_e& paging_ies_o::value_c::paging_drx()
{
  assert_choice_type(types::paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
paging_prio_e& paging_ies_o::value_c::paging_prio()
{
  assert_choice_type(types::paging_prio, type_, "Value");
  return c.get<paging_prio_e>();
}
paging_cell_list_l& paging_ies_o::value_c::paging_cell_list()
{
  assert_choice_type(types::paging_cell_list, type_, "Value");
  return c.get<paging_cell_list_l>();
}
paging_origin_e& paging_ies_o::value_c::paging_origin()
{
  assert_choice_type(types::paging_origin, type_, "Value");
  return c.get<paging_origin_e>();
}
const ue_id_idx_value_c& paging_ies_o::value_c::ue_id_idx_value() const
{
  assert_choice_type(types::ue_id_idx_value, type_, "Value");
  return c.get<ue_id_idx_value_c>();
}
const paging_id_c& paging_ies_o::value_c::paging_id() const
{
  assert_choice_type(types::paging_id, type_, "Value");
  return c.get<paging_id_c>();
}
const paging_drx_e& paging_ies_o::value_c::paging_drx() const
{
  assert_choice_type(types::paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
const paging_prio_e& paging_ies_o::value_c::paging_prio() const
{
  assert_choice_type(types::paging_prio, type_, "Value");
  return c.get<paging_prio_e>();
}
const paging_cell_list_l& paging_ies_o::value_c::paging_cell_list() const
{
  assert_choice_type(types::paging_cell_list, type_, "Value");
  return c.get<paging_cell_list_l>();
}
const paging_origin_e& paging_ies_o::value_c::paging_origin() const
{
  assert_choice_type(types::paging_origin, type_, "Value");
  return c.get<paging_origin_e>();
}
void paging_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_id_idx_value:
      j.write_fieldname("UEIdentityIndexValue");
      c.get<ue_id_idx_value_c>().to_json(j);
      break;
    case types::paging_id:
      j.write_fieldname("PagingIdentity");
      c.get<paging_id_c>().to_json(j);
      break;
    case types::paging_drx:
      j.write_str("PagingDRX", c.get<paging_drx_e>().to_string());
      break;
    case types::paging_prio:
      j.write_str("PagingPriority", c.get<paging_prio_e>().to_string());
      break;
    case types::paging_cell_list:
      j.start_array("PagingCell-list");
      for (const auto& e1 : c.get<paging_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::paging_origin:
      j.write_str("PagingOrigin", "non-3gpp");
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE paging_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ue_id_idx_value:
      HANDLE_CODE(c.get<ue_id_idx_value_c>().pack(bref));
      break;
    case types::paging_id:
      HANDLE_CODE(c.get<paging_id_c>().pack(bref));
      break;
    case types::paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().pack(bref));
      break;
    case types::paging_prio:
      HANDLE_CODE(c.get<paging_prio_e>().pack(bref));
      break;
    case types::paging_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<paging_cell_list_l>(), 1, 512, true));
      break;
    case types::paging_origin:
      HANDLE_CODE(c.get<paging_origin_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ue_id_idx_value:
      HANDLE_CODE(c.get<ue_id_idx_value_c>().unpack(bref));
      break;
    case types::paging_id:
      HANDLE_CODE(c.get<paging_id_c>().unpack(bref));
      break;
    case types::paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().unpack(bref));
      break;
    case types::paging_prio:
      HANDLE_CODE(c.get<paging_prio_e>().unpack(bref));
      break;
    case types::paging_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<paging_cell_list_l>(), bref, 1, 512, true));
      break;
    case types::paging_origin:
      HANDLE_CODE(c.get<paging_origin_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* paging_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "UEIdentityIndexValue", "PagingIdentity", "PagingDRX", "PagingPriority", "PagingCell-list", "PagingOrigin"};
  return convert_enum_idx(names, 6, value, "paging_ies_o::value_c::types");
}

// Value ::= OPEN TYPE
void f1ap_private_ies_empty_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}
SRSASN_CODE f1ap_private_ies_empty_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1ap_private_ies_empty_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  return SRSASN_SUCCESS;
}

const char* f1ap_private_ies_empty_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {};
  return convert_enum_idx(names, 0, value, "f1ap_private_ies_empty_o::value_c::types");
}

// RRCDeliveryReportIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t rrc_delivery_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 185, 64};
  return map_enum_number(names, 4, idx, "id");
}
bool rrc_delivery_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 185, 64};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e rrc_delivery_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 185:
      return crit_e::ignore;
    case 64:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
rrc_delivery_report_ies_o::value_c rrc_delivery_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 185:
      ret.set(value_c::types::rrc_delivery_status);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e rrc_delivery_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 185:
      return presence_e::mandatory;
    case 64:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void rrc_delivery_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rrc_delivery_status:
      c.destroy<rrc_delivery_status_s>();
      break;
    default:
      break;
  }
}
void rrc_delivery_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::rrc_delivery_status:
      c.init<rrc_delivery_status_s>();
      break;
    case types::srb_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
}
rrc_delivery_report_ies_o::value_c::value_c(const rrc_delivery_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      c.init(other.c.get<rrc_delivery_status_s>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
}
rrc_delivery_report_ies_o::value_c&
rrc_delivery_report_ies_o::value_c::operator=(const rrc_delivery_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      c.set(other.c.get<rrc_delivery_status_s>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }

  return *this;
}
uint64_t& rrc_delivery_report_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& rrc_delivery_report_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
rrc_delivery_status_s& rrc_delivery_report_ies_o::value_c::rrc_delivery_status()
{
  assert_choice_type(types::rrc_delivery_status, type_, "Value");
  return c.get<rrc_delivery_status_s>();
}
uint8_t& rrc_delivery_report_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& rrc_delivery_report_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& rrc_delivery_report_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const rrc_delivery_status_s& rrc_delivery_report_ies_o::value_c::rrc_delivery_status() const
{
  assert_choice_type(types::rrc_delivery_status, type_, "Value");
  return c.get<rrc_delivery_status_s>();
}
const uint8_t& rrc_delivery_report_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
void rrc_delivery_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      j.write_fieldname("RRCDeliveryStatus");
      c.get<rrc_delivery_status_s>().to_json(j);
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE rrc_delivery_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::rrc_delivery_status:
      HANDLE_CODE(c.get<rrc_delivery_status_s>().pack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_delivery_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::rrc_delivery_status:
      HANDLE_CODE(c.get<rrc_delivery_status_s>().unpack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* rrc_delivery_report_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "RRCDeliveryStatus", "INTEGER (0..3,...)"};
  return convert_enum_idx(names, 4, value, "rrc_delivery_report_ies_o::value_c::types");
}

// ResetAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t reset_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 81, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool reset_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 81, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e reset_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 81:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
reset_ack_ies_o::value_c reset_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 81:
      ret.set(value_c::types::ue_associated_lc_f1_conn_list_res_ack);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e reset_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 81:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void reset_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.destroy<ue_associated_lc_f1_conn_list_res_ack_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void reset_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.init<ue_associated_lc_f1_conn_list_res_ack_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
}
reset_ack_ies_o::value_c::value_c(const reset_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.init(other.c.get<ue_associated_lc_f1_conn_list_res_ack_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
}
reset_ack_ies_o::value_c& reset_ack_ies_o::value_c::operator=(const reset_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.set(other.c.get<ue_associated_lc_f1_conn_list_res_ack_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& reset_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
ue_associated_lc_f1_conn_list_res_ack_l& reset_ack_ies_o::value_c::ue_associated_lc_f1_conn_list_res_ack()
{
  assert_choice_type(types::ue_associated_lc_f1_conn_list_res_ack, type_, "Value");
  return c.get<ue_associated_lc_f1_conn_list_res_ack_l>();
}
crit_diagnostics_s& reset_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& reset_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const ue_associated_lc_f1_conn_list_res_ack_l& reset_ack_ies_o::value_c::ue_associated_lc_f1_conn_list_res_ack() const
{
  assert_choice_type(types::ue_associated_lc_f1_conn_list_res_ack, type_, "Value");
  return c.get<ue_associated_lc_f1_conn_list_res_ack_l>();
}
const crit_diagnostics_s& reset_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void reset_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      j.start_array("UE-associatedLogicalF1-ConnectionListResAck");
      for (const auto& e1 : c.get<ue_associated_lc_f1_conn_list_res_ack_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_associated_lc_f1_conn_list_res_ack_l>(), 1, 65536, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_associated_lc_f1_conn_list_res_ack_l>(), bref, 1, 65536, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* reset_ack_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..255,...)", "UE-associatedLogicalF1-ConnectionListResAck", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 3, value, "reset_ack_ies_o::value_c::types");
}
uint8_t reset_ack_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1};
  return map_enum_number(numbers, 2, value, "reset_ack_ies_o::value_c::types");
}

// ResetIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t reset_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 48};
  return map_enum_number(names, 3, idx, "id");
}
bool reset_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 48};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e reset_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 48:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
reset_ies_o::value_c reset_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 48:
      ret.set(value_c::types::reset_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e reset_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 48:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void reset_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::reset_type:
      c.destroy<reset_type_c>();
      break;
    default:
      break;
  }
}
void reset_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::reset_type:
      c.init<reset_type_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
}
reset_ies_o::value_c::value_c(const reset_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::reset_type:
      c.init(other.c.get<reset_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
}
reset_ies_o::value_c& reset_ies_o::value_c::operator=(const reset_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::reset_type:
      c.set(other.c.get<reset_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }

  return *this;
}
uint16_t& reset_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& reset_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
reset_type_c& reset_ies_o::value_c::reset_type()
{
  assert_choice_type(types::reset_type, type_, "Value");
  return c.get<reset_type_c>();
}
const uint16_t& reset_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& reset_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const reset_type_c& reset_ies_o::value_c::reset_type() const
{
  assert_choice_type(types::reset_type, type_, "Value");
  return c.get<reset_type_c>();
}
void reset_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::reset_type:
      j.write_fieldname("ResetType");
      c.get<reset_type_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::reset_type:
      HANDLE_CODE(c.get<reset_type_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::reset_type:
      HANDLE_CODE(c.get<reset_type_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* reset_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "Cause", "ResetType"};
  return convert_enum_idx(names, 3, value, "reset_ies_o::value_c::types");
}
uint8_t reset_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "reset_ies_o::value_c::types");
}

// SystemInformationDeliveryCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sys_info_delivery_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 111, 116, 156};
  return map_enum_number(names, 4, idx, "id");
}
bool sys_info_delivery_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 111, 116, 156};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e sys_info_delivery_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    case 116:
      return crit_e::reject;
    case 156:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
sys_info_delivery_cmd_ies_o::value_c sys_info_delivery_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    case 116:
      ret.set(value_c::types::sitype_list);
      break;
    case 156:
      ret.set(value_c::types::confirmed_ue_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sys_info_delivery_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    case 116:
      return presence_e::mandatory;
    case 156:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void sys_info_delivery_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    case types::sitype_list:
      c.destroy<sitype_list_l>();
      break;
    default:
      break;
  }
}
void sys_info_delivery_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::sitype_list:
      c.init<sitype_list_l>();
      break;
    case types::confirmed_ue_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
}
sys_info_delivery_cmd_ies_o::value_c::value_c(const sys_info_delivery_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::sitype_list:
      c.init(other.c.get<sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
}
sys_info_delivery_cmd_ies_o::value_c&
sys_info_delivery_cmd_ies_o::value_c::operator=(const sys_info_delivery_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::sitype_list:
      c.set(other.c.get<sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }

  return *this;
}
uint16_t& sys_info_delivery_cmd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_s& sys_info_delivery_cmd_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
sitype_list_l& sys_info_delivery_cmd_ies_o::value_c::sitype_list()
{
  assert_choice_type(types::sitype_list, type_, "Value");
  return c.get<sitype_list_l>();
}
uint64_t& sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id()
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& sys_info_delivery_cmd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_s& sys_info_delivery_cmd_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const sitype_list_l& sys_info_delivery_cmd_ies_o::value_c::sitype_list() const
{
  assert_choice_type(types::sitype_list, type_, "Value");
  return c.get<sitype_list_l>();
}
const uint64_t& sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id() const
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
void sys_info_delivery_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::sitype_list:
      j.start_array("SItype-List");
      for (const auto& e1 : c.get<sitype_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::confirmed_ue_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE sys_info_delivery_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::sitype_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sitype_list_l>(), 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_delivery_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::sitype_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sitype_list_l>(), bref, 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* sys_info_delivery_cmd_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)", "NRCGI", "SItype-List", "INTEGER (0..4294967295)"};
  return convert_enum_idx(names, 4, value, "sys_info_delivery_cmd_ies_o::value_c::types");
}

// UEContextModificationConfirmIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_confirm_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 49, 19, 50, 7, 109, 195};
  return map_enum_number(names, 8, idx, "id");
}
bool ue_context_mod_confirm_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 49, 19, 50, 7, 109, 195};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_confirm_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 49:
      return crit_e::ignore;
    case 19:
      return crit_e::ignore;
    case 50:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 109:
      return crit_e::ignore;
    case 195:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_confirm_ies_o::value_c ue_context_mod_confirm_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 19:
      ret.set(value_c::types::drbs_modified_conf_list);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 195:
      ret.set(value_c::types::res_coordination_transfer_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_confirm_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 49:
      return presence_e::optional;
    case 19:
      return presence_e::optional;
    case 50:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 109:
      return presence_e::optional;
    case 195:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_confirm_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::drbs_modified_conf_list:
      c.destroy<drbs_modified_conf_list_l>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::res_coordination_transfer_info:
      c.destroy<res_coordination_transfer_info_s>();
      break;
    default:
      break;
  }
}
void ue_context_mod_confirm_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::drbs_modified_conf_list:
      c.init<drbs_modified_conf_list_l>();
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::execute_dupl:
      break;
    case types::res_coordination_transfer_info:
      c.init<res_coordination_transfer_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }
}
ue_context_mod_confirm_ies_o::value_c::value_c(const ue_context_mod_confirm_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::drbs_modified_conf_list:
      c.init(other.c.get<drbs_modified_conf_list_l>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::res_coordination_transfer_info:
      c.init(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }
}
ue_context_mod_confirm_ies_o::value_c&
ue_context_mod_confirm_ies_o::value_c::operator=(const ue_context_mod_confirm_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::drbs_modified_conf_list:
      c.set(other.c.get<drbs_modified_conf_list_l>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::res_coordination_transfer_info:
      c.set(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
drbs_modified_conf_list_l& ue_context_mod_confirm_ies_o::value_c::drbs_modified_conf_list()
{
  assert_choice_type(types::drbs_modified_conf_list, type_, "Value");
  return c.get<drbs_modified_conf_list_l>();
}
unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
crit_diagnostics_s& ue_context_mod_confirm_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
execute_dupl_e& ue_context_mod_confirm_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
res_coordination_transfer_info_s& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_info()
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
const uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_confirm_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const drbs_modified_conf_list_l& ue_context_mod_confirm_ies_o::value_c::drbs_modified_conf_list() const
{
  assert_choice_type(types::drbs_modified_conf_list, type_, "Value");
  return c.get<drbs_modified_conf_list_l>();
}
const unbounded_octstring<true>& ue_context_mod_confirm_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const crit_diagnostics_s& ue_context_mod_confirm_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const execute_dupl_e& ue_context_mod_confirm_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const res_coordination_transfer_info_s& ue_context_mod_confirm_ies_o::value_c::res_coordination_transfer_info() const
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
void ue_context_mod_confirm_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::drbs_modified_conf_list:
      j.start_array("DRBs-ModifiedConf-List");
      for (const auto& e1 : c.get<drbs_modified_conf_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::res_coordination_transfer_info:
      j.write_fieldname("ResourceCoordinationTransferInformation");
      c.get<res_coordination_transfer_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_confirm_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::drbs_modified_conf_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_modified_conf_list_l>(), 1, 64, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_confirm_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::drbs_modified_conf_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_modified_conf_list_l>(), bref, 1, 64, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_confirm_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_mod_confirm_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "OCTET STRING",
                                "DRBs-ModifiedConf-List",
                                "OCTET STRING",
                                "CriticalityDiagnostics",
                                "ExecuteDuplication",
                                "ResourceCoordinationTransferInformation"};
  return convert_enum_idx(names, 8, value, "ue_context_mod_confirm_ies_o::value_c::types");
}

// UEContextModificationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool ue_context_mod_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_fail_ies_o::value_c ue_context_mod_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void ue_context_mod_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }
}
ue_context_mod_fail_ies_o::value_c::value_c(const ue_context_mod_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }
}
ue_context_mod_fail_ies_o::value_c&
ue_context_mod_fail_ies_o::value_c::operator=(const ue_context_mod_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_mod_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& ue_context_mod_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_mod_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& ue_context_mod_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void ue_context_mod_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_mod_fail_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "Cause", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 4, value, "ue_context_mod_fail_ies_o::value_c::types");
}

// UEContextModificationRefuseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_refuse_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool ue_context_mod_refuse_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_refuse_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_refuse_ies_o::value_c ue_context_mod_refuse_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_refuse_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_refuse_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void ue_context_mod_refuse_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }
}
ue_context_mod_refuse_ies_o::value_c::value_c(const ue_context_mod_refuse_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }
}
ue_context_mod_refuse_ies_o::value_c&
ue_context_mod_refuse_ies_o::value_c::operator=(const ue_context_mod_refuse_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_mod_refuse_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& ue_context_mod_refuse_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_refuse_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_mod_refuse_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& ue_context_mod_refuse_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void ue_context_mod_refuse_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_refuse_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_refuse_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_refuse_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_mod_refuse_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "Cause", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 4, value, "ue_context_mod_refuse_ies_o::value_c::types");
}

// UEContextModificationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 63, 107, 96,  38,  9,   79,  49,  87,  50,  56,  52,  76,  37, 31,
                                   72, 33, 97, 108, 159, 174, 175, 162, 158, 109, 184, 195, 182, 215, 94};
  return map_enum_number(names, 31, idx, "id");
}
bool ue_context_mod_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 63, 107, 96,  38,  9,   79,  49,  87,  50,  56,  52,  76,  37, 31,
                                   72, 33, 97, 108, 159, 174, 175, 162, 158, 109, 184, 195, 182, 215, 94};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 63:
      return crit_e::ignore;
    case 107:
      return crit_e::reject;
    case 96:
      return crit_e::ignore;
    case 38:
      return crit_e::ignore;
    case 9:
      return crit_e::reject;
    case 79:
      return crit_e::ignore;
    case 49:
      return crit_e::ignore;
    case 87:
      return crit_e::ignore;
    case 50:
      return crit_e::reject;
    case 56:
      return crit_e::ignore;
    case 52:
      return crit_e::ignore;
    case 76:
      return crit_e::reject;
    case 37:
      return crit_e::reject;
    case 31:
      return crit_e::reject;
    case 72:
      return crit_e::reject;
    case 33:
      return crit_e::reject;
    case 97:
      return crit_e::reject;
    case 108:
      return crit_e::reject;
    case 159:
      return crit_e::ignore;
    case 174:
      return crit_e::ignore;
    case 175:
      return crit_e::ignore;
    case 162:
      return crit_e::reject;
    case 158:
      return crit_e::ignore;
    case 109:
      return crit_e::ignore;
    case 184:
      return crit_e::ignore;
    case 195:
      return crit_e::ignore;
    case 182:
      return crit_e::ignore;
    case 215:
      return crit_e::ignore;
    case 94:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_request_ies_o::value_c ue_context_mod_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 63:
      ret.set(value_c::types::sp_cell_id);
      break;
    case 107:
      ret.set(value_c::types::serv_cell_idx);
      break;
    case 96:
      ret.set(value_c::types::sp_cell_ul_cfg);
      break;
    case 38:
      ret.set(value_c::types::drx_cycle);
      break;
    case 9:
      ret.set(value_c::types::cu_to_du_rrc_info);
      break;
    case 79:
      ret.set(value_c::types::tx_action_ind);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 87:
      ret.set(value_c::types::rrc_recfg_complete_ind);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 56:
      ret.set(value_c::types::scell_to_be_setup_mod_list);
      break;
    case 52:
      ret.set(value_c::types::scell_to_be_remd_list);
      break;
    case 76:
      ret.set(value_c::types::srbs_to_be_setup_mod_list);
      break;
    case 37:
      ret.set(value_c::types::drbs_to_be_setup_mod_list);
      break;
    case 31:
      ret.set(value_c::types::drbs_to_be_modified_list);
      break;
    case 72:
      ret.set(value_c::types::srbs_to_be_released_list);
      break;
    case 33:
      ret.set(value_c::types::drbs_to_be_released_list);
      break;
    case 97:
      ret.set(value_c::types::inactivity_monitoring_request);
      break;
    case 108:
      ret.set(value_c::types::rat_freq_prio_info);
      break;
    case 159:
      ret.set(value_c::types::drx_cfg_ind);
      break;
    case 174:
      ret.set(value_c::types::rlc_fail_ind);
      break;
    case 175:
      ret.set(value_c::types::ul_tx_direct_current_list_info);
      break;
    case 162:
      ret.set(value_c::types::gnb_du_cfg_query);
      break;
    case 158:
      ret.set(value_c::types::gnb_du_ue_ambr_ul);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    case 195:
      ret.set(value_c::types::res_coordination_transfer_info);
      break;
    case 182:
      ret.set(value_c::types::serving_cell_mo);
      break;
    case 215:
      ret.set(value_c::types::needfor_gap);
      break;
    case 94:
      ret.set(value_c::types::full_cfg);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 63:
      return presence_e::optional;
    case 107:
      return presence_e::optional;
    case 96:
      return presence_e::optional;
    case 38:
      return presence_e::optional;
    case 9:
      return presence_e::optional;
    case 79:
      return presence_e::optional;
    case 49:
      return presence_e::optional;
    case 87:
      return presence_e::optional;
    case 50:
      return presence_e::optional;
    case 56:
      return presence_e::optional;
    case 52:
      return presence_e::optional;
    case 76:
      return presence_e::optional;
    case 37:
      return presence_e::optional;
    case 31:
      return presence_e::optional;
    case 72:
      return presence_e::optional;
    case 33:
      return presence_e::optional;
    case 97:
      return presence_e::optional;
    case 108:
      return presence_e::optional;
    case 159:
      return presence_e::optional;
    case 174:
      return presence_e::optional;
    case 175:
      return presence_e::optional;
    case 162:
      return presence_e::optional;
    case 158:
      return presence_e::optional;
    case 109:
      return presence_e::optional;
    case 184:
      return presence_e::optional;
    case 195:
      return presence_e::optional;
    case 182:
      return presence_e::optional;
    case 215:
      return presence_e::optional;
    case 94:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::sp_cell_id:
      c.destroy<nr_cgi_s>();
      break;
    case types::drx_cycle:
      c.destroy<drx_cycle_s>();
      break;
    case types::cu_to_du_rrc_info:
      c.destroy<cu_to_du_rrc_info_s>();
      break;
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_mod_list:
      c.destroy<scell_to_be_setup_mod_list_l>();
      break;
    case types::scell_to_be_remd_list:
      c.destroy<scell_to_be_remd_list_l>();
      break;
    case types::srbs_to_be_setup_mod_list:
      c.destroy<srbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_setup_mod_list:
      c.destroy<drbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_modified_list:
      c.destroy<drbs_to_be_modified_list_l>();
      break;
    case types::srbs_to_be_released_list:
      c.destroy<srbs_to_be_released_list_l>();
      break;
    case types::drbs_to_be_released_list:
      c.destroy<drbs_to_be_released_list_l>();
      break;
    case types::rat_freq_prio_info:
      c.destroy<rat_freq_prio_info_c>();
      break;
    case types::rlc_fail_ind:
      c.destroy<rlc_fail_ind_s>();
      break;
    case types::ul_tx_direct_current_list_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::res_coordination_transfer_info:
      c.destroy<res_coordination_transfer_info_s>();
      break;
    default:
      break;
  }
}
void ue_context_mod_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::sp_cell_id:
      c.init<nr_cgi_s>();
      break;
    case types::serv_cell_idx:
      break;
    case types::sp_cell_ul_cfg:
      break;
    case types::drx_cycle:
      c.init<drx_cycle_s>();
      break;
    case types::cu_to_du_rrc_info:
      c.init<cu_to_du_rrc_info_s>();
      break;
    case types::tx_action_ind:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::rrc_recfg_complete_ind:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_mod_list:
      c.init<scell_to_be_setup_mod_list_l>();
      break;
    case types::scell_to_be_remd_list:
      c.init<scell_to_be_remd_list_l>();
      break;
    case types::srbs_to_be_setup_mod_list:
      c.init<srbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_setup_mod_list:
      c.init<drbs_to_be_setup_mod_list_l>();
      break;
    case types::drbs_to_be_modified_list:
      c.init<drbs_to_be_modified_list_l>();
      break;
    case types::srbs_to_be_released_list:
      c.init<srbs_to_be_released_list_l>();
      break;
    case types::drbs_to_be_released_list:
      c.init<drbs_to_be_released_list_l>();
      break;
    case types::inactivity_monitoring_request:
      break;
    case types::rat_freq_prio_info:
      c.init<rat_freq_prio_info_c>();
      break;
    case types::drx_cfg_ind:
      break;
    case types::rlc_fail_ind:
      c.init<rlc_fail_ind_s>();
      break;
    case types::ul_tx_direct_current_list_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::gnb_du_cfg_query:
      break;
    case types::gnb_du_ue_ambr_ul:
      break;
    case types::execute_dupl:
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::res_coordination_transfer_info:
      c.init<res_coordination_transfer_info_s>();
      break;
    case types::serving_cell_mo:
      break;
    case types::needfor_gap:
      break;
    case types::full_cfg:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }
}
ue_context_mod_request_ies_o::value_c::value_c(const ue_context_mod_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.init(other.c.get<cell_ul_cfg_e>());
      break;
    case types::drx_cycle:
      c.init(other.c.get<drx_cycle_s>());
      break;
    case types::cu_to_du_rrc_info:
      c.init(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::tx_action_ind:
      c.init(other.c.get<tx_action_ind_e>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rrc_recfg_complete_ind:
      c.init(other.c.get<rrc_recfg_complete_ind_e>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_mod_list:
      c.init(other.c.get<scell_to_be_setup_mod_list_l>());
      break;
    case types::scell_to_be_remd_list:
      c.init(other.c.get<scell_to_be_remd_list_l>());
      break;
    case types::srbs_to_be_setup_mod_list:
      c.init(other.c.get<srbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_setup_mod_list:
      c.init(other.c.get<drbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_modified_list:
      c.init(other.c.get<drbs_to_be_modified_list_l>());
      break;
    case types::srbs_to_be_released_list:
      c.init(other.c.get<srbs_to_be_released_list_l>());
      break;
    case types::drbs_to_be_released_list:
      c.init(other.c.get<drbs_to_be_released_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.init(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.init(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::drx_cfg_ind:
      c.init(other.c.get<drx_cfg_ind_e>());
      break;
    case types::rlc_fail_ind:
      c.init(other.c.get<rlc_fail_ind_s>());
      break;
    case types::ul_tx_direct_current_list_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::gnb_du_cfg_query:
      c.init(other.c.get<gnb_du_cfg_query_e>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.init(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.init(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.init(other.c.get<uint8_t>());
      break;
    case types::needfor_gap:
      c.init(other.c.get<needfor_gap_e>());
      break;
    case types::full_cfg:
      c.init(other.c.get<full_cfg_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }
}
ue_context_mod_request_ies_o::value_c&
ue_context_mod_request_ies_o::value_c::operator=(const ue_context_mod_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.set(other.c.get<cell_ul_cfg_e>());
      break;
    case types::drx_cycle:
      c.set(other.c.get<drx_cycle_s>());
      break;
    case types::cu_to_du_rrc_info:
      c.set(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::tx_action_ind:
      c.set(other.c.get<tx_action_ind_e>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::rrc_recfg_complete_ind:
      c.set(other.c.get<rrc_recfg_complete_ind_e>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_mod_list:
      c.set(other.c.get<scell_to_be_setup_mod_list_l>());
      break;
    case types::scell_to_be_remd_list:
      c.set(other.c.get<scell_to_be_remd_list_l>());
      break;
    case types::srbs_to_be_setup_mod_list:
      c.set(other.c.get<srbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_setup_mod_list:
      c.set(other.c.get<drbs_to_be_setup_mod_list_l>());
      break;
    case types::drbs_to_be_modified_list:
      c.set(other.c.get<drbs_to_be_modified_list_l>());
      break;
    case types::srbs_to_be_released_list:
      c.set(other.c.get<srbs_to_be_released_list_l>());
      break;
    case types::drbs_to_be_released_list:
      c.set(other.c.get<drbs_to_be_released_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.set(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.set(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::drx_cfg_ind:
      c.set(other.c.get<drx_cfg_ind_e>());
      break;
    case types::rlc_fail_ind:
      c.set(other.c.get<rlc_fail_ind_s>());
      break;
    case types::ul_tx_direct_current_list_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::gnb_du_cfg_query:
      c.set(other.c.get<gnb_du_cfg_query_e>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.set(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.set(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.set(other.c.get<uint8_t>());
      break;
    case types::needfor_gap:
      c.set(other.c.get<needfor_gap_e>());
      break;
    case types::full_cfg:
      c.set(other.c.get<full_cfg_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& ue_context_mod_request_ies_o::value_c::sp_cell_id()
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
uint8_t& ue_context_mod_request_ies_o::value_c::serv_cell_idx()
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
cell_ul_cfg_e& ue_context_mod_request_ies_o::value_c::sp_cell_ul_cfg()
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
drx_cycle_s& ue_context_mod_request_ies_o::value_c::drx_cycle()
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
cu_to_du_rrc_info_s& ue_context_mod_request_ies_o::value_c::cu_to_du_rrc_info()
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
tx_action_ind_e& ue_context_mod_request_ies_o::value_c::tx_action_ind()
{
  assert_choice_type(types::tx_action_ind, type_, "Value");
  return c.get<tx_action_ind_e>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
rrc_recfg_complete_ind_e& ue_context_mod_request_ies_o::value_c::rrc_recfg_complete_ind()
{
  assert_choice_type(types::rrc_recfg_complete_ind, type_, "Value");
  return c.get<rrc_recfg_complete_ind_e>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
scell_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_setup_mod_list()
{
  assert_choice_type(types::scell_to_be_setup_mod_list, type_, "Value");
  return c.get<scell_to_be_setup_mod_list_l>();
}
scell_to_be_remd_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_remd_list()
{
  assert_choice_type(types::scell_to_be_remd_list, type_, "Value");
  return c.get<scell_to_be_remd_list_l>();
}
srbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_setup_mod_list()
{
  assert_choice_type(types::srbs_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_to_be_setup_mod_list_l>();
}
drbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_setup_mod_list()
{
  assert_choice_type(types::drbs_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_to_be_setup_mod_list_l>();
}
drbs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_modified_list()
{
  assert_choice_type(types::drbs_to_be_modified_list, type_, "Value");
  return c.get<drbs_to_be_modified_list_l>();
}
srbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_released_list()
{
  assert_choice_type(types::srbs_to_be_released_list, type_, "Value");
  return c.get<srbs_to_be_released_list_l>();
}
drbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_released_list()
{
  assert_choice_type(types::drbs_to_be_released_list, type_, "Value");
  return c.get<drbs_to_be_released_list_l>();
}
inactivity_monitoring_request_e& ue_context_mod_request_ies_o::value_c::inactivity_monitoring_request()
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
rat_freq_prio_info_c& ue_context_mod_request_ies_o::value_c::rat_freq_prio_info()
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
drx_cfg_ind_e& ue_context_mod_request_ies_o::value_c::drx_cfg_ind()
{
  assert_choice_type(types::drx_cfg_ind, type_, "Value");
  return c.get<drx_cfg_ind_e>();
}
rlc_fail_ind_s& ue_context_mod_request_ies_o::value_c::rlc_fail_ind()
{
  assert_choice_type(types::rlc_fail_ind, type_, "Value");
  return c.get<rlc_fail_ind_s>();
}
unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_list_info()
{
  assert_choice_type(types::ul_tx_direct_current_list_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
gnb_du_cfg_query_e& ue_context_mod_request_ies_o::value_c::gnb_du_cfg_query()
{
  assert_choice_type(types::gnb_du_cfg_query, type_, "Value");
  return c.get<gnb_du_cfg_query_e>();
}
uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_ambr_ul()
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
execute_dupl_e& ue_context_mod_request_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
rrc_delivery_status_request_e& ue_context_mod_request_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
res_coordination_transfer_info_s& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_info()
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
uint8_t& ue_context_mod_request_ies_o::value_c::serving_cell_mo()
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
needfor_gap_e& ue_context_mod_request_ies_o::value_c::needfor_gap()
{
  assert_choice_type(types::needfor_gap, type_, "Value");
  return c.get<needfor_gap_e>();
}
full_cfg_e& ue_context_mod_request_ies_o::value_c::full_cfg()
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& ue_context_mod_request_ies_o::value_c::sp_cell_id() const
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint8_t& ue_context_mod_request_ies_o::value_c::serv_cell_idx() const
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
const cell_ul_cfg_e& ue_context_mod_request_ies_o::value_c::sp_cell_ul_cfg() const
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
const drx_cycle_s& ue_context_mod_request_ies_o::value_c::drx_cycle() const
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
const cu_to_du_rrc_info_s& ue_context_mod_request_ies_o::value_c::cu_to_du_rrc_info() const
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
const tx_action_ind_e& ue_context_mod_request_ies_o::value_c::tx_action_ind() const
{
  assert_choice_type(types::tx_action_ind, type_, "Value");
  return c.get<tx_action_ind_e>();
}
const unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const rrc_recfg_complete_ind_e& ue_context_mod_request_ies_o::value_c::rrc_recfg_complete_ind() const
{
  assert_choice_type(types::rrc_recfg_complete_ind, type_, "Value");
  return c.get<rrc_recfg_complete_ind_e>();
}
const unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const scell_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_setup_mod_list() const
{
  assert_choice_type(types::scell_to_be_setup_mod_list, type_, "Value");
  return c.get<scell_to_be_setup_mod_list_l>();
}
const scell_to_be_remd_list_l& ue_context_mod_request_ies_o::value_c::scell_to_be_remd_list() const
{
  assert_choice_type(types::scell_to_be_remd_list, type_, "Value");
  return c.get<scell_to_be_remd_list_l>();
}
const srbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::srbs_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_to_be_setup_mod_list_l>();
}
const drbs_to_be_setup_mod_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::drbs_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_to_be_setup_mod_list_l>();
}
const drbs_to_be_modified_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_modified_list() const
{
  assert_choice_type(types::drbs_to_be_modified_list, type_, "Value");
  return c.get<drbs_to_be_modified_list_l>();
}
const srbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::srbs_to_be_released_list() const
{
  assert_choice_type(types::srbs_to_be_released_list, type_, "Value");
  return c.get<srbs_to_be_released_list_l>();
}
const drbs_to_be_released_list_l& ue_context_mod_request_ies_o::value_c::drbs_to_be_released_list() const
{
  assert_choice_type(types::drbs_to_be_released_list, type_, "Value");
  return c.get<drbs_to_be_released_list_l>();
}
const inactivity_monitoring_request_e& ue_context_mod_request_ies_o::value_c::inactivity_monitoring_request() const
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
const rat_freq_prio_info_c& ue_context_mod_request_ies_o::value_c::rat_freq_prio_info() const
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
const drx_cfg_ind_e& ue_context_mod_request_ies_o::value_c::drx_cfg_ind() const
{
  assert_choice_type(types::drx_cfg_ind, type_, "Value");
  return c.get<drx_cfg_ind_e>();
}
const rlc_fail_ind_s& ue_context_mod_request_ies_o::value_c::rlc_fail_ind() const
{
  assert_choice_type(types::rlc_fail_ind, type_, "Value");
  return c.get<rlc_fail_ind_s>();
}
const unbounded_octstring<true>& ue_context_mod_request_ies_o::value_c::ul_tx_direct_current_list_info() const
{
  assert_choice_type(types::ul_tx_direct_current_list_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const gnb_du_cfg_query_e& ue_context_mod_request_ies_o::value_c::gnb_du_cfg_query() const
{
  assert_choice_type(types::gnb_du_cfg_query, type_, "Value");
  return c.get<gnb_du_cfg_query_e>();
}
const uint64_t& ue_context_mod_request_ies_o::value_c::gnb_du_ue_ambr_ul() const
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
const execute_dupl_e& ue_context_mod_request_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const rrc_delivery_status_request_e& ue_context_mod_request_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const res_coordination_transfer_info_s& ue_context_mod_request_ies_o::value_c::res_coordination_transfer_info() const
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
const uint8_t& ue_context_mod_request_ies_o::value_c::serving_cell_mo() const
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
const needfor_gap_e& ue_context_mod_request_ies_o::value_c::needfor_gap() const
{
  assert_choice_type(types::needfor_gap, type_, "Value");
  return c.get<needfor_gap_e>();
}
const full_cfg_e& ue_context_mod_request_ies_o::value_c::full_cfg() const
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
void ue_context_mod_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::serv_cell_idx:
      j.write_int("INTEGER (0..31,...)", c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      j.write_str("CellULConfigured", c.get<cell_ul_cfg_e>().to_string());
      break;
    case types::drx_cycle:
      j.write_fieldname("DRXCycle");
      c.get<drx_cycle_s>().to_json(j);
      break;
    case types::cu_to_du_rrc_info:
      j.write_fieldname("CUtoDURRCInformation");
      c.get<cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::tx_action_ind:
      j.write_str("TransmissionActionIndicator", c.get<tx_action_ind_e>().to_string());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::rrc_recfg_complete_ind:
      j.write_str("RRCReconfigurationCompleteIndicator", c.get<rrc_recfg_complete_ind_e>().to_string());
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::scell_to_be_setup_mod_list:
      j.start_array("SCell-ToBeSetupMod-List");
      for (const auto& e1 : c.get<scell_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::scell_to_be_remd_list:
      j.start_array("SCell-ToBeRemoved-List");
      for (const auto& e1 : c.get<scell_to_be_remd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_to_be_setup_mod_list:
      j.start_array("SRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<srbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_setup_mod_list:
      j.start_array("DRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<drbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_modified_list:
      j.start_array("DRBs-ToBeModified-List");
      for (const auto& e1 : c.get<drbs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_to_be_released_list:
      j.start_array("SRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<srbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_released_list:
      j.start_array("DRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<drbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_request:
      j.write_str("InactivityMonitoringRequest", "true");
      break;
    case types::rat_freq_prio_info:
      j.write_fieldname("RAT-FrequencyPriorityInformation");
      c.get<rat_freq_prio_info_c>().to_json(j);
      break;
    case types::drx_cfg_ind:
      j.write_str("DRXConfigurationIndicator", "release");
      break;
    case types::rlc_fail_ind:
      j.write_fieldname("RLCFailureIndication");
      c.get<rlc_fail_ind_s>().to_json(j);
      break;
    case types::ul_tx_direct_current_list_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::gnb_du_cfg_query:
      j.write_str("GNB-DUConfigurationQuery", "true");
      break;
    case types::gnb_du_ue_ambr_ul:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    case types::res_coordination_transfer_info:
      j.write_fieldname("ResourceCoordinationTransferInformation");
      c.get<res_coordination_transfer_info_s>().to_json(j);
      break;
    case types::serving_cell_mo:
      j.write_int("INTEGER (1..64,...)", c.get<uint8_t>());
      break;
    case types::needfor_gap:
      j.write_str("NeedforGap", "true");
      break;
    case types::full_cfg:
      j.write_str("FullConfiguration", "full");
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().pack(bref));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().pack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::tx_action_ind:
      HANDLE_CODE(c.get<tx_action_ind_e>().pack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::rrc_recfg_complete_ind:
      HANDLE_CODE(c.get<rrc_recfg_complete_ind_e>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::scell_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::scell_to_be_remd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_to_be_remd_list_l>(), 1, 32, true));
      break;
    case types::srbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_to_be_setup_mod_list_l>(), 1, 8, true));
      break;
    case types::drbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_setup_mod_list_l>(), 1, 64, true));
      break;
    case types::drbs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_modified_list_l>(), 1, 64, true));
      break;
    case types::srbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_to_be_released_list_l>(), 1, 8, true));
      break;
    case types::drbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_released_list_l>(), 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().pack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().pack(bref));
      break;
    case types::drx_cfg_ind:
      HANDLE_CODE(c.get<drx_cfg_ind_e>().pack(bref));
      break;
    case types::rlc_fail_ind:
      HANDLE_CODE(c.get<rlc_fail_ind_s>().pack(bref));
      break;
    case types::ul_tx_direct_current_list_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::gnb_du_cfg_query:
      HANDLE_CODE(c.get<gnb_du_cfg_query_e>().pack(bref));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().pack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::needfor_gap:
      HANDLE_CODE(c.get<needfor_gap_e>().pack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().unpack(bref));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().unpack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::tx_action_ind:
      HANDLE_CODE(c.get<tx_action_ind_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::rrc_recfg_complete_ind:
      HANDLE_CODE(c.get<rrc_recfg_complete_ind_e>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::scell_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::scell_to_be_remd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_to_be_remd_list_l>(), bref, 1, 32, true));
      break;
    case types::srbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_to_be_setup_mod_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_setup_mod_list_l>(), bref, 1, 64, true));
      break;
    case types::drbs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_to_be_released_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_released_list_l>(), bref, 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().unpack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().unpack(bref));
      break;
    case types::drx_cfg_ind:
      HANDLE_CODE(c.get<drx_cfg_ind_e>().unpack(bref));
      break;
    case types::rlc_fail_ind:
      HANDLE_CODE(c.get<rlc_fail_ind_s>().unpack(bref));
      break;
    case types::ul_tx_direct_current_list_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::gnb_du_cfg_query:
      HANDLE_CODE(c.get<gnb_du_cfg_query_e>().unpack(bref));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().unpack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::needfor_gap:
      HANDLE_CODE(c.get<needfor_gap_e>().unpack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_mod_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "NRCGI",
                                "INTEGER (0..31,...)",
                                "CellULConfigured",
                                "DRXCycle",
                                "CUtoDURRCInformation",
                                "TransmissionActionIndicator",
                                "OCTET STRING",
                                "RRCReconfigurationCompleteIndicator",
                                "OCTET STRING",
                                "SCell-ToBeSetupMod-List",
                                "SCell-ToBeRemoved-List",
                                "SRBs-ToBeSetupMod-List",
                                "DRBs-ToBeSetupMod-List",
                                "DRBs-ToBeModified-List",
                                "SRBs-ToBeReleased-List",
                                "DRBs-ToBeReleased-List",
                                "InactivityMonitoringRequest",
                                "RAT-FrequencyPriorityInformation",
                                "DRXConfigurationIndicator",
                                "RLCFailureIndication",
                                "OCTET STRING",
                                "GNB-DUConfigurationQuery",
                                "INTEGER (0..4000000000000,...)",
                                "ExecuteDuplication",
                                "RRCDeliveryStatusRequest",
                                "ResourceCoordinationTransferInformation",
                                "INTEGER (1..64,...)",
                                "NeedforGap",
                                "FullConfiguration"};
  return convert_enum_idx(names, 31, value, "ue_context_mod_request_ies_o::value_c::types");
}

// UEContextModificationRequiredIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_required_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 49, 39, 23, 70, 25, 0};
  return map_enum_number(names, 8, idx, "id");
}
bool ue_context_mod_required_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 49, 39, 23, 70, 25, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_required_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 49:
      return crit_e::ignore;
    case 39:
      return crit_e::reject;
    case 23:
      return crit_e::reject;
    case 70:
      return crit_e::reject;
    case 25:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_required_ies_o::value_c ue_context_mod_required_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 39:
      ret.set(value_c::types::du_to_cu_rrc_info);
      break;
    case 23:
      ret.set(value_c::types::drbs_required_to_be_modified_list);
      break;
    case 70:
      ret.set(value_c::types::srbs_required_to_be_released_list);
      break;
    case 25:
      ret.set(value_c::types::drbs_required_to_be_released_list);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_required_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 49:
      return presence_e::optional;
    case 39:
      return presence_e::optional;
    case 23:
      return presence_e::optional;
    case 70:
      return presence_e::optional;
    case 25:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_required_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.destroy<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_required_to_be_modified_list:
      c.destroy<drbs_required_to_be_modified_list_l>();
      break;
    case types::srbs_required_to_be_released_list:
      c.destroy<srbs_required_to_be_released_list_l>();
      break;
    case types::drbs_required_to_be_released_list:
      c.destroy<drbs_required_to_be_released_list_l>();
      break;
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void ue_context_mod_required_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.init<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_required_to_be_modified_list:
      c.init<drbs_required_to_be_modified_list_l>();
      break;
    case types::srbs_required_to_be_released_list:
      c.init<srbs_required_to_be_released_list_l>();
      break;
    case types::drbs_required_to_be_released_list:
      c.init<drbs_required_to_be_released_list_l>();
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }
}
ue_context_mod_required_ies_o::value_c::value_c(const ue_context_mod_required_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.init(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_required_to_be_modified_list:
      c.init(other.c.get<drbs_required_to_be_modified_list_l>());
      break;
    case types::srbs_required_to_be_released_list:
      c.init(other.c.get<srbs_required_to_be_released_list_l>());
      break;
    case types::drbs_required_to_be_released_list:
      c.init(other.c.get<drbs_required_to_be_released_list_l>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }
}
ue_context_mod_required_ies_o::value_c&
ue_context_mod_required_ies_o::value_c::operator=(const ue_context_mod_required_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.set(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_required_to_be_modified_list:
      c.set(other.c.get<drbs_required_to_be_modified_list_l>());
      break;
    case types::srbs_required_to_be_released_list:
      c.set(other.c.get<srbs_required_to_be_released_list_l>());
      break;
    case types::drbs_required_to_be_released_list:
      c.set(other.c.get<drbs_required_to_be_released_list_l>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_required_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_required_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
unbounded_octstring<true>& ue_context_mod_required_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
du_to_cu_rrc_info_s& ue_context_mod_required_ies_o::value_c::du_to_cu_rrc_info()
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
drbs_required_to_be_modified_list_l& ue_context_mod_required_ies_o::value_c::drbs_required_to_be_modified_list()
{
  assert_choice_type(types::drbs_required_to_be_modified_list, type_, "Value");
  return c.get<drbs_required_to_be_modified_list_l>();
}
srbs_required_to_be_released_list_l& ue_context_mod_required_ies_o::value_c::srbs_required_to_be_released_list()
{
  assert_choice_type(types::srbs_required_to_be_released_list, type_, "Value");
  return c.get<srbs_required_to_be_released_list_l>();
}
drbs_required_to_be_released_list_l& ue_context_mod_required_ies_o::value_c::drbs_required_to_be_released_list()
{
  assert_choice_type(types::drbs_required_to_be_released_list, type_, "Value");
  return c.get<drbs_required_to_be_released_list_l>();
}
cause_c& ue_context_mod_required_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& ue_context_mod_required_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_required_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const unbounded_octstring<true>& ue_context_mod_required_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const du_to_cu_rrc_info_s& ue_context_mod_required_ies_o::value_c::du_to_cu_rrc_info() const
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
const drbs_required_to_be_modified_list_l&
ue_context_mod_required_ies_o::value_c::drbs_required_to_be_modified_list() const
{
  assert_choice_type(types::drbs_required_to_be_modified_list, type_, "Value");
  return c.get<drbs_required_to_be_modified_list_l>();
}
const srbs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::srbs_required_to_be_released_list() const
{
  assert_choice_type(types::srbs_required_to_be_released_list, type_, "Value");
  return c.get<srbs_required_to_be_released_list_l>();
}
const drbs_required_to_be_released_list_l&
ue_context_mod_required_ies_o::value_c::drbs_required_to_be_released_list() const
{
  assert_choice_type(types::drbs_required_to_be_released_list, type_, "Value");
  return c.get<drbs_required_to_be_released_list_l>();
}
const cause_c& ue_context_mod_required_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void ue_context_mod_required_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::du_to_cu_rrc_info:
      j.write_fieldname("DUtoCURRCInformation");
      c.get<du_to_cu_rrc_info_s>().to_json(j);
      break;
    case types::drbs_required_to_be_modified_list:
      j.start_array("DRBs-Required-ToBeModified-List");
      for (const auto& e1 : c.get<drbs_required_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_required_to_be_released_list:
      j.start_array("SRBs-Required-ToBeReleased-List");
      for (const auto& e1 : c.get<srbs_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_required_to_be_released_list:
      j.start_array("DRBs-Required-ToBeReleased-List");
      for (const auto& e1 : c.get<drbs_required_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_required_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().pack(bref));
      break;
    case types::drbs_required_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_required_to_be_modified_list_l>(), 1, 64, true));
      break;
    case types::srbs_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_required_to_be_released_list_l>(), 1, 8, true));
      break;
    case types::drbs_required_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_required_to_be_released_list_l>(), 1, 64, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_required_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().unpack(bref));
      break;
    case types::drbs_required_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_required_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_required_to_be_released_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_required_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_required_to_be_released_list_l>(), bref, 1, 64, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_required_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_mod_required_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "OCTET STRING",
                                "DUtoCURRCInformation",
                                "DRBs-Required-ToBeModified-List",
                                "SRBs-Required-ToBeReleased-List",
                                "DRBs-Required-ToBeReleased-List",
                                "Cause"};
  return convert_enum_idx(names, 8, value, "ue_context_mod_required_ies_o::value_c::types");
}

// UEContextModificationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_mod_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 49, 39, 29, 21, 68, 17, 85, 13, 98, 7, 95, 198, 204, 206, 94};
  return map_enum_number(names, 17, idx, "id");
}
bool ue_context_mod_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 49, 39, 29, 21, 68, 17, 85, 13, 98, 7, 95, 198, 204, 206, 94};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_mod_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 49:
      return crit_e::ignore;
    case 39:
      return crit_e::reject;
    case 29:
      return crit_e::ignore;
    case 21:
      return crit_e::ignore;
    case 68:
      return crit_e::ignore;
    case 17:
      return crit_e::ignore;
    case 85:
      return crit_e::ignore;
    case 13:
      return crit_e::ignore;
    case 98:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 95:
      return crit_e::ignore;
    case 198:
      return crit_e::ignore;
    case 204:
      return crit_e::ignore;
    case 206:
      return crit_e::ignore;
    case 94:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_mod_resp_ies_o::value_c ue_context_mod_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 39:
      ret.set(value_c::types::du_to_cu_rrc_info);
      break;
    case 29:
      ret.set(value_c::types::drbs_setup_mod_list);
      break;
    case 21:
      ret.set(value_c::types::drbs_modified_list);
      break;
    case 68:
      ret.set(value_c::types::srbs_failed_to_be_setup_mod_list);
      break;
    case 17:
      ret.set(value_c::types::drbs_failed_to_be_setup_mod_list);
      break;
    case 85:
      ret.set(value_c::types::scell_failedto_setup_mod_list);
      break;
    case 13:
      ret.set(value_c::types::drbs_failed_to_be_modified_list);
      break;
    case 98:
      ret.set(value_c::types::inactivity_monitoring_resp);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 95:
      ret.set(value_c::types::c_rnti);
      break;
    case 198:
      ret.set(value_c::types::associated_scell_list);
      break;
    case 204:
      ret.set(value_c::types::srbs_setup_mod_list);
      break;
    case 206:
      ret.set(value_c::types::srbs_modified_list);
      break;
    case 94:
      ret.set(value_c::types::full_cfg);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_mod_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 49:
      return presence_e::optional;
    case 39:
      return presence_e::optional;
    case 29:
      return presence_e::optional;
    case 21:
      return presence_e::optional;
    case 68:
      return presence_e::optional;
    case 17:
      return presence_e::optional;
    case 85:
      return presence_e::optional;
    case 13:
      return presence_e::optional;
    case 98:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 95:
      return presence_e::optional;
    case 198:
      return presence_e::optional;
    case 204:
      return presence_e::optional;
    case 206:
      return presence_e::optional;
    case 94:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_mod_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.destroy<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_setup_mod_list:
      c.destroy<drbs_setup_mod_list_l>();
      break;
    case types::drbs_modified_list:
      c.destroy<drbs_modified_list_l>();
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.destroy<srbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.destroy<drbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::scell_failedto_setup_mod_list:
      c.destroy<scell_failedto_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_modified_list:
      c.destroy<drbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::associated_scell_list:
      c.destroy<associated_scell_list_l>();
      break;
    case types::srbs_setup_mod_list:
      c.destroy<srbs_setup_mod_list_l>();
      break;
    case types::srbs_modified_list:
      c.destroy<srbs_modified_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_mod_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::du_to_cu_rrc_info:
      c.init<du_to_cu_rrc_info_s>();
      break;
    case types::drbs_setup_mod_list:
      c.init<drbs_setup_mod_list_l>();
      break;
    case types::drbs_modified_list:
      c.init<drbs_modified_list_l>();
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.init<srbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.init<drbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::scell_failedto_setup_mod_list:
      c.init<scell_failedto_setup_mod_list_l>();
      break;
    case types::drbs_failed_to_be_modified_list:
      c.init<drbs_failed_to_be_modified_list_l>();
      break;
    case types::inactivity_monitoring_resp:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::c_rnti:
      break;
    case types::associated_scell_list:
      c.init<associated_scell_list_l>();
      break;
    case types::srbs_setup_mod_list:
      c.init<srbs_setup_mod_list_l>();
      break;
    case types::srbs_modified_list:
      c.init<srbs_modified_list_l>();
      break;
    case types::full_cfg:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }
}
ue_context_mod_resp_ies_o::value_c::value_c(const ue_context_mod_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.init(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_setup_mod_list:
      c.init(other.c.get<drbs_setup_mod_list_l>());
      break;
    case types::drbs_modified_list:
      c.init(other.c.get<drbs_modified_list_l>());
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<srbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<drbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::scell_failedto_setup_mod_list:
      c.init(other.c.get<scell_failedto_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_modified_list:
      c.init(other.c.get<drbs_failed_to_be_modified_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.init(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::c_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::associated_scell_list:
      c.init(other.c.get<associated_scell_list_l>());
      break;
    case types::srbs_setup_mod_list:
      c.init(other.c.get<srbs_setup_mod_list_l>());
      break;
    case types::srbs_modified_list:
      c.init(other.c.get<srbs_modified_list_l>());
      break;
    case types::full_cfg:
      c.init(other.c.get<full_cfg_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }
}
ue_context_mod_resp_ies_o::value_c&
ue_context_mod_resp_ies_o::value_c::operator=(const ue_context_mod_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::du_to_cu_rrc_info:
      c.set(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::drbs_setup_mod_list:
      c.set(other.c.get<drbs_setup_mod_list_l>());
      break;
    case types::drbs_modified_list:
      c.set(other.c.get<drbs_modified_list_l>());
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<srbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<drbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::scell_failedto_setup_mod_list:
      c.set(other.c.get<scell_failedto_setup_mod_list_l>());
      break;
    case types::drbs_failed_to_be_modified_list:
      c.set(other.c.get<drbs_failed_to_be_modified_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.set(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::c_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::associated_scell_list:
      c.set(other.c.get<associated_scell_list_l>());
      break;
    case types::srbs_setup_mod_list:
      c.set(other.c.get<srbs_setup_mod_list_l>());
      break;
    case types::srbs_modified_list:
      c.set(other.c.get<srbs_modified_list_l>());
      break;
    case types::full_cfg:
      c.set(other.c.get<full_cfg_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
unbounded_octstring<true>& ue_context_mod_resp_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
du_to_cu_rrc_info_s& ue_context_mod_resp_ies_o::value_c::du_to_cu_rrc_info()
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
drbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_setup_mod_list()
{
  assert_choice_type(types::drbs_setup_mod_list, type_, "Value");
  return c.get<drbs_setup_mod_list_l>();
}
drbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_modified_list()
{
  assert_choice_type(types::drbs_modified_list, type_, "Value");
  return c.get<drbs_modified_list_l>();
}
srbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::srbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_mod_list_l>();
}
drbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::drbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_mod_list_l>();
}
scell_failedto_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::scell_failedto_setup_mod_list()
{
  assert_choice_type(types::scell_failedto_setup_mod_list, type_, "Value");
  return c.get<scell_failedto_setup_mod_list_l>();
}
drbs_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_modified_list()
{
  assert_choice_type(types::drbs_failed_to_be_modified_list, type_, "Value");
  return c.get<drbs_failed_to_be_modified_list_l>();
}
inactivity_monitoring_resp_e& ue_context_mod_resp_ies_o::value_c::inactivity_monitoring_resp()
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
crit_diagnostics_s& ue_context_mod_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
uint32_t& ue_context_mod_resp_ies_o::value_c::c_rnti()
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
associated_scell_list_l& ue_context_mod_resp_ies_o::value_c::associated_scell_list()
{
  assert_choice_type(types::associated_scell_list, type_, "Value");
  return c.get<associated_scell_list_l>();
}
srbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_setup_mod_list()
{
  assert_choice_type(types::srbs_setup_mod_list, type_, "Value");
  return c.get<srbs_setup_mod_list_l>();
}
srbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::srbs_modified_list()
{
  assert_choice_type(types::srbs_modified_list, type_, "Value");
  return c.get<srbs_modified_list_l>();
}
full_cfg_e& ue_context_mod_resp_ies_o::value_c::full_cfg()
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
const uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_mod_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const unbounded_octstring<true>& ue_context_mod_resp_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const du_to_cu_rrc_info_s& ue_context_mod_resp_ies_o::value_c::du_to_cu_rrc_info() const
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
const drbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_setup_mod_list() const
{
  assert_choice_type(types::drbs_setup_mod_list, type_, "Value");
  return c.get<drbs_setup_mod_list_l>();
}
const drbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_modified_list() const
{
  assert_choice_type(types::drbs_modified_list, type_, "Value");
  return c.get<drbs_modified_list_l>();
}
const srbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::srbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_mod_list_l>();
}
const drbs_failed_to_be_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::drbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_mod_list_l>();
}
const scell_failedto_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::scell_failedto_setup_mod_list() const
{
  assert_choice_type(types::scell_failedto_setup_mod_list, type_, "Value");
  return c.get<scell_failedto_setup_mod_list_l>();
}
const drbs_failed_to_be_modified_list_l& ue_context_mod_resp_ies_o::value_c::drbs_failed_to_be_modified_list() const
{
  assert_choice_type(types::drbs_failed_to_be_modified_list, type_, "Value");
  return c.get<drbs_failed_to_be_modified_list_l>();
}
const inactivity_monitoring_resp_e& ue_context_mod_resp_ies_o::value_c::inactivity_monitoring_resp() const
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
const crit_diagnostics_s& ue_context_mod_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint32_t& ue_context_mod_resp_ies_o::value_c::c_rnti() const
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
const associated_scell_list_l& ue_context_mod_resp_ies_o::value_c::associated_scell_list() const
{
  assert_choice_type(types::associated_scell_list, type_, "Value");
  return c.get<associated_scell_list_l>();
}
const srbs_setup_mod_list_l& ue_context_mod_resp_ies_o::value_c::srbs_setup_mod_list() const
{
  assert_choice_type(types::srbs_setup_mod_list, type_, "Value");
  return c.get<srbs_setup_mod_list_l>();
}
const srbs_modified_list_l& ue_context_mod_resp_ies_o::value_c::srbs_modified_list() const
{
  assert_choice_type(types::srbs_modified_list, type_, "Value");
  return c.get<srbs_modified_list_l>();
}
const full_cfg_e& ue_context_mod_resp_ies_o::value_c::full_cfg() const
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
void ue_context_mod_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::du_to_cu_rrc_info:
      j.write_fieldname("DUtoCURRCInformation");
      c.get<du_to_cu_rrc_info_s>().to_json(j);
      break;
    case types::drbs_setup_mod_list:
      j.start_array("DRBs-SetupMod-List");
      for (const auto& e1 : c.get<drbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_modified_list:
      j.start_array("DRBs-Modified-List");
      for (const auto& e1 : c.get<drbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      j.start_array("SRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<srbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      j.start_array("DRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<drbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::scell_failedto_setup_mod_list:
      j.start_array("SCell-FailedtoSetupMod-List");
      for (const auto& e1 : c.get<scell_failedto_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_failed_to_be_modified_list:
      j.start_array("DRBs-FailedToBeModified-List");
      for (const auto& e1 : c.get<drbs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_resp:
      j.write_str("InactivityMonitoringResponse", "not-supported");
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::c_rnti:
      j.write_int("INTEGER (0..65535,...)", c.get<uint32_t>());
      break;
    case types::associated_scell_list:
      j.start_array("Associated-SCell-List");
      for (const auto& e1 : c.get<associated_scell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_setup_mod_list:
      j.start_array("SRBs-SetupMod-List");
      for (const auto& e1 : c.get<srbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_modified_list:
      j.start_array("SRBs-Modified-List");
      for (const auto& e1 : c.get<srbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::full_cfg:
      j.write_str("FullConfiguration", "full");
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_mod_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().pack(bref));
      break;
    case types::drbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_setup_mod_list_l>(), 1, 64, true));
      break;
    case types::drbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_modified_list_l>(), 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_failed_to_be_setup_mod_list_l>(), 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_failed_to_be_setup_mod_list_l>(), 1, 64, true));
      break;
    case types::scell_failedto_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_failedto_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::drbs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_failed_to_be_modified_list_l>(), 1, 64, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::associated_scell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<associated_scell_list_l>(), 1, 32, true));
      break;
    case types::srbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_setup_mod_list_l>(), 1, 8, true));
      break;
    case types::srbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_modified_list_l>(), 1, 8, true));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().unpack(bref));
      break;
    case types::drbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_setup_mod_list_l>(), bref, 1, 64, true));
      break;
    case types::drbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_failed_to_be_setup_mod_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_failed_to_be_setup_mod_list_l>(), bref, 1, 64, true));
      break;
    case types::scell_failedto_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_failedto_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::drbs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_failed_to_be_modified_list_l>(), bref, 1, 64, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::associated_scell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<associated_scell_list_l>(), bref, 1, 32, true));
      break;
    case types::srbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_setup_mod_list_l>(), bref, 1, 8, true));
      break;
    case types::srbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_modified_list_l>(), bref, 1, 8, true));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_mod_resp_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "OCTET STRING",
                                "DUtoCURRCInformation",
                                "DRBs-SetupMod-List",
                                "DRBs-Modified-List",
                                "SRBs-FailedToBeSetupMod-List",
                                "DRBs-FailedToBeSetupMod-List",
                                "SCell-FailedtoSetupMod-List",
                                "DRBs-FailedToBeModified-List",
                                "InactivityMonitoringResponse",
                                "CriticalityDiagnostics",
                                "INTEGER (0..65535,...)",
                                "Associated-SCell-List",
                                "SRBs-SetupMod-List",
                                "SRBs-Modified-List",
                                "FullConfiguration"};
  return convert_enum_idx(names, 17, value, "ue_context_mod_resp_ies_o::value_c::types");
}

// UEContextReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 50, 64, 47, 109, 184};
  return map_enum_number(names, 8, idx, "id");
}
bool ue_context_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 50, 64, 47, 109, 184};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 50:
      return crit_e::ignore;
    case 64:
      return crit_e::ignore;
    case 47:
      return crit_e::ignore;
    case 109:
      return crit_e::ignore;
    case 184:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_release_cmd_ies_o::value_c ue_context_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    case 47:
      ret.set(value_c::types::old_gnb_du_ue_f1ap_id);
      break;
    case 109:
      ret.set(value_c::types::execute_dupl);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 50:
      return presence_e::optional;
    case 64:
      return presence_e::conditional;
    case 47:
      return presence_e::optional;
    case 109:
      return presence_e::optional;
    case 184:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void ue_context_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::srb_id:
      break;
    case types::old_gnb_du_ue_f1ap_id:
      break;
    case types::execute_dupl:
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }
}
ue_context_release_cmd_ies_o::value_c::value_c(const ue_context_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.init(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }
}
ue_context_release_cmd_ies_o::value_c&
ue_context_release_cmd_ies_o::value_c::operator=(const ue_context_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::execute_dupl:
      c.set(other.c.get<execute_dupl_e>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
unbounded_octstring<true>& ue_context_release_cmd_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
uint8_t& ue_context_release_cmd_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
uint64_t& ue_context_release_cmd_ies_o::value_c::old_gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
execute_dupl_e& ue_context_release_cmd_ies_o::value_c::execute_dupl()
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
rrc_delivery_status_request_e& ue_context_release_cmd_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_release_cmd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const unbounded_octstring<true>& ue_context_release_cmd_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint8_t& ue_context_release_cmd_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& ue_context_release_cmd_ies_o::value_c::old_gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::old_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const execute_dupl_e& ue_context_release_cmd_ies_o::value_c::execute_dupl() const
{
  assert_choice_type(types::execute_dupl, type_, "Value");
  return c.get<execute_dupl_e>();
}
const rrc_delivery_status_request_e& ue_context_release_cmd_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
void ue_context_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    case types::old_gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::execute_dupl:
      j.write_str("ExecuteDuplication", "true");
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().pack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::old_gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::execute_dupl:
      HANDLE_CODE(c.get<execute_dupl_e>().unpack(bref));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_release_cmd_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "Cause",
                                "OCTET STRING",
                                "INTEGER (0..3,...)",
                                "INTEGER (0..4294967295)",
                                "ExecuteDuplication",
                                "RRCDeliveryStatusRequest"};
  return convert_enum_idx(names, 8, value, "ue_context_release_cmd_ies_o::value_c::types");
}

// UEContextReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool ue_context_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_release_complete_ies_o::value_c ue_context_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void ue_context_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }
}
ue_context_release_complete_ies_o::value_c::value_c(const ue_context_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }
}
ue_context_release_complete_ies_o::value_c&
ue_context_release_complete_ies_o::value_c::operator=(const ue_context_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_release_complete_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_release_complete_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
crit_diagnostics_s& ue_context_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& ue_context_release_complete_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_release_complete_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const crit_diagnostics_s& ue_context_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void ue_context_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_release_complete_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "CriticalityDiagnostics"};
  return convert_enum_idx(names, 3, value, "ue_context_release_complete_ies_o::value_c::types");
}

// UEContextReleaseRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_release_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool ue_context_release_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_release_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_release_request_ies_o::value_c ue_context_release_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_release_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_release_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void ue_context_release_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }
}
ue_context_release_request_ies_o::value_c::value_c(const ue_context_release_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }
}
ue_context_release_request_ies_o::value_c&
ue_context_release_request_ies_o::value_c::operator=(const ue_context_release_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_release_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_release_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_release_request_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& ue_context_release_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_release_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_release_request_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void ue_context_release_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_release_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_release_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "Cause"};
  return convert_enum_idx(names, 3, value, "ue_context_release_request_ies_o::value_c::types");
}

// UEContextSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7, 92};
  return map_enum_number(names, 5, idx, "id");
}
bool ue_context_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7, 92};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 92:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_setup_fail_ies_o::value_c ue_context_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 92:
      ret.set(value_c::types::potential_sp_cell_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    case 92:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::potential_sp_cell_list:
      c.destroy<potential_sp_cell_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::potential_sp_cell_list:
      c.init<potential_sp_cell_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }
}
ue_context_setup_fail_ies_o::value_c::value_c(const ue_context_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::potential_sp_cell_list:
      c.init(other.c.get<potential_sp_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }
}
ue_context_setup_fail_ies_o::value_c&
ue_context_setup_fail_ies_o::value_c::operator=(const ue_context_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::potential_sp_cell_list:
      c.set(other.c.get<potential_sp_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& ue_context_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& ue_context_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
potential_sp_cell_list_l& ue_context_setup_fail_ies_o::value_c::potential_sp_cell_list()
{
  assert_choice_type(types::potential_sp_cell_list, type_, "Value");
  return c.get<potential_sp_cell_list_l>();
}
const uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_setup_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& ue_context_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& ue_context_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const potential_sp_cell_list_l& ue_context_setup_fail_ies_o::value_c::potential_sp_cell_list() const
{
  assert_choice_type(types::potential_sp_cell_list, type_, "Value");
  return c.get<potential_sp_cell_list_l>();
}
void ue_context_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::potential_sp_cell_list:
      j.start_array("Potential-SpCell-List");
      for (const auto& e1 : c.get<potential_sp_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::potential_sp_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<potential_sp_cell_list_l>(), 0, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::potential_sp_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<potential_sp_cell_list_l>(), bref, 0, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_setup_fail_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {
      "INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "Cause", "CriticalityDiagnostics", "Potential-SpCell-List"};
  return convert_enum_idx(names, 5, value, "ue_context_setup_fail_ies_o::value_c::types");
}

// UEContextSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41,  63, 107, 96,  9,   90,  38,  49,  54,  74, 35,
                                   97, 108, 50, 126, 165, 158, 184, 195, 182, 217, 226};
  return map_enum_number(names, 23, idx, "id");
}
bool ue_context_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41,  63, 107, 96,  9,   90,  38,  49,  54,  74, 35,
                                   97, 108, 50, 126, 165, 158, 184, 195, 182, 217, 226};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::ignore;
    case 63:
      return crit_e::reject;
    case 107:
      return crit_e::reject;
    case 96:
      return crit_e::ignore;
    case 9:
      return crit_e::reject;
    case 90:
      return crit_e::ignore;
    case 38:
      return crit_e::ignore;
    case 49:
      return crit_e::ignore;
    case 54:
      return crit_e::ignore;
    case 74:
      return crit_e::reject;
    case 35:
      return crit_e::reject;
    case 97:
      return crit_e::reject;
    case 108:
      return crit_e::reject;
    case 50:
      return crit_e::ignore;
    case 126:
      return crit_e::ignore;
    case 165:
      return crit_e::ignore;
    case 158:
      return crit_e::ignore;
    case 184:
      return crit_e::ignore;
    case 195:
      return crit_e::ignore;
    case 182:
      return crit_e::ignore;
    case 217:
      return crit_e::reject;
    case 226:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_setup_request_ies_o::value_c ue_context_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 63:
      ret.set(value_c::types::sp_cell_id);
      break;
    case 107:
      ret.set(value_c::types::serv_cell_idx);
      break;
    case 96:
      ret.set(value_c::types::sp_cell_ul_cfg);
      break;
    case 9:
      ret.set(value_c::types::cu_to_du_rrc_info);
      break;
    case 90:
      ret.set(value_c::types::candidate_sp_cell_list);
      break;
    case 38:
      ret.set(value_c::types::drx_cycle);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 54:
      ret.set(value_c::types::scell_to_be_setup_list);
      break;
    case 74:
      ret.set(value_c::types::srbs_to_be_setup_list);
      break;
    case 35:
      ret.set(value_c::types::drbs_to_be_setup_list);
      break;
    case 97:
      ret.set(value_c::types::inactivity_monitoring_request);
      break;
    case 108:
      ret.set(value_c::types::rat_freq_prio_info);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 126:
      ret.set(value_c::types::masked_imeisv);
      break;
    case 165:
      ret.set(value_c::types::serving_plmn);
      break;
    case 158:
      ret.set(value_c::types::gnb_du_ue_ambr_ul);
      break;
    case 184:
      ret.set(value_c::types::rrc_delivery_status_request);
      break;
    case 195:
      ret.set(value_c::types::res_coordination_transfer_info);
      break;
    case 182:
      ret.set(value_c::types::serving_cell_mo);
      break;
    case 217:
      ret.set(value_c::types::new_gnb_cu_ue_f1ap_id);
      break;
    case 226:
      ret.set(value_c::types::ran_ue_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::optional;
    case 63:
      return presence_e::mandatory;
    case 107:
      return presence_e::mandatory;
    case 96:
      return presence_e::optional;
    case 9:
      return presence_e::mandatory;
    case 90:
      return presence_e::optional;
    case 38:
      return presence_e::optional;
    case 49:
      return presence_e::optional;
    case 54:
      return presence_e::optional;
    case 74:
      return presence_e::optional;
    case 35:
      return presence_e::optional;
    case 97:
      return presence_e::optional;
    case 108:
      return presence_e::optional;
    case 50:
      return presence_e::optional;
    case 126:
      return presence_e::optional;
    case 165:
      return presence_e::optional;
    case 158:
      return presence_e::conditional;
    case 184:
      return presence_e::optional;
    case 195:
      return presence_e::optional;
    case 182:
      return presence_e::optional;
    case 217:
      return presence_e::optional;
    case 226:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::sp_cell_id:
      c.destroy<nr_cgi_s>();
      break;
    case types::cu_to_du_rrc_info:
      c.destroy<cu_to_du_rrc_info_s>();
      break;
    case types::candidate_sp_cell_list:
      c.destroy<candidate_sp_cell_list_l>();
      break;
    case types::drx_cycle:
      c.destroy<drx_cycle_s>();
      break;
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_list:
      c.destroy<scell_to_be_setup_list_l>();
      break;
    case types::srbs_to_be_setup_list:
      c.destroy<srbs_to_be_setup_list_l>();
      break;
    case types::drbs_to_be_setup_list:
      c.destroy<drbs_to_be_setup_list_l>();
      break;
    case types::rat_freq_prio_info:
      c.destroy<rat_freq_prio_info_c>();
      break;
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::masked_imeisv:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    case types::serving_plmn:
      c.destroy<fixed_octstring<3, true>>();
      break;
    case types::res_coordination_transfer_info:
      c.destroy<res_coordination_transfer_info_s>();
      break;
    case types::ran_ue_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    default:
      break;
  }
}
void ue_context_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::sp_cell_id:
      c.init<nr_cgi_s>();
      break;
    case types::serv_cell_idx:
      break;
    case types::sp_cell_ul_cfg:
      break;
    case types::cu_to_du_rrc_info:
      c.init<cu_to_du_rrc_info_s>();
      break;
    case types::candidate_sp_cell_list:
      c.init<candidate_sp_cell_list_l>();
      break;
    case types::drx_cycle:
      c.init<drx_cycle_s>();
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::scell_to_be_setup_list:
      c.init<scell_to_be_setup_list_l>();
      break;
    case types::srbs_to_be_setup_list:
      c.init<srbs_to_be_setup_list_l>();
      break;
    case types::drbs_to_be_setup_list:
      c.init<drbs_to_be_setup_list_l>();
      break;
    case types::inactivity_monitoring_request:
      break;
    case types::rat_freq_prio_info:
      c.init<rat_freq_prio_info_c>();
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::masked_imeisv:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::serving_plmn:
      c.init<fixed_octstring<3, true>>();
      break;
    case types::gnb_du_ue_ambr_ul:
      break;
    case types::rrc_delivery_status_request:
      break;
    case types::res_coordination_transfer_info:
      c.init<res_coordination_transfer_info_s>();
      break;
    case types::serving_cell_mo:
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      break;
    case types::ran_ue_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }
}
ue_context_setup_request_ies_o::value_c::value_c(const ue_context_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.init(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.init(other.c.get<cell_ul_cfg_e>());
      break;
    case types::cu_to_du_rrc_info:
      c.init(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::candidate_sp_cell_list:
      c.init(other.c.get<candidate_sp_cell_list_l>());
      break;
    case types::drx_cycle:
      c.init(other.c.get<drx_cycle_s>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_list:
      c.init(other.c.get<scell_to_be_setup_list_l>());
      break;
    case types::srbs_to_be_setup_list:
      c.init(other.c.get<srbs_to_be_setup_list_l>());
      break;
    case types::drbs_to_be_setup_list:
      c.init(other.c.get<drbs_to_be_setup_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.init(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.init(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::masked_imeisv:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::serving_plmn:
      c.init(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.init(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status_request:
      c.init(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.init(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.init(other.c.get<uint8_t>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }
}
ue_context_setup_request_ies_o::value_c&
ue_context_setup_request_ies_o::value_c::operator=(const ue_context_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::serv_cell_idx:
      c.set(other.c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      c.set(other.c.get<cell_ul_cfg_e>());
      break;
    case types::cu_to_du_rrc_info:
      c.set(other.c.get<cu_to_du_rrc_info_s>());
      break;
    case types::candidate_sp_cell_list:
      c.set(other.c.get<candidate_sp_cell_list_l>());
      break;
    case types::drx_cycle:
      c.set(other.c.get<drx_cycle_s>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::scell_to_be_setup_list:
      c.set(other.c.get<scell_to_be_setup_list_l>());
      break;
    case types::srbs_to_be_setup_list:
      c.set(other.c.get<srbs_to_be_setup_list_l>());
      break;
    case types::drbs_to_be_setup_list:
      c.set(other.c.get<drbs_to_be_setup_list_l>());
      break;
    case types::inactivity_monitoring_request:
      c.set(other.c.get<inactivity_monitoring_request_e>());
      break;
    case types::rat_freq_prio_info:
      c.set(other.c.get<rat_freq_prio_info_c>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::masked_imeisv:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::serving_plmn:
      c.set(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::gnb_du_ue_ambr_ul:
      c.set(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status_request:
      c.set(other.c.get<rrc_delivery_status_request_e>());
      break;
    case types::res_coordination_transfer_info:
      c.set(other.c.get<res_coordination_transfer_info_s>());
      break;
    case types::serving_cell_mo:
      c.set(other.c.get<uint8_t>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_setup_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& ue_context_setup_request_ies_o::value_c::sp_cell_id()
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
uint8_t& ue_context_setup_request_ies_o::value_c::serv_cell_idx()
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
cell_ul_cfg_e& ue_context_setup_request_ies_o::value_c::sp_cell_ul_cfg()
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
cu_to_du_rrc_info_s& ue_context_setup_request_ies_o::value_c::cu_to_du_rrc_info()
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
candidate_sp_cell_list_l& ue_context_setup_request_ies_o::value_c::candidate_sp_cell_list()
{
  assert_choice_type(types::candidate_sp_cell_list, type_, "Value");
  return c.get<candidate_sp_cell_list_l>();
}
drx_cycle_s& ue_context_setup_request_ies_o::value_c::drx_cycle()
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
scell_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::scell_to_be_setup_list()
{
  assert_choice_type(types::scell_to_be_setup_list, type_, "Value");
  return c.get<scell_to_be_setup_list_l>();
}
srbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::srbs_to_be_setup_list()
{
  assert_choice_type(types::srbs_to_be_setup_list, type_, "Value");
  return c.get<srbs_to_be_setup_list_l>();
}
drbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::drbs_to_be_setup_list()
{
  assert_choice_type(types::drbs_to_be_setup_list, type_, "Value");
  return c.get<drbs_to_be_setup_list_l>();
}
inactivity_monitoring_request_e& ue_context_setup_request_ies_o::value_c::inactivity_monitoring_request()
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
rat_freq_prio_info_c& ue_context_setup_request_ies_o::value_c::rat_freq_prio_info()
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
fixed_bitstring<64, false, true>& ue_context_setup_request_ies_o::value_c::masked_imeisv()
{
  assert_choice_type(types::masked_imeisv, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
fixed_octstring<3, true>& ue_context_setup_request_ies_o::value_c::serving_plmn()
{
  assert_choice_type(types::serving_plmn, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_ambr_ul()
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
rrc_delivery_status_request_e& ue_context_setup_request_ies_o::value_c::rrc_delivery_status_request()
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
res_coordination_transfer_info_s& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_info()
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
uint8_t& ue_context_setup_request_ies_o::value_c::serving_cell_mo()
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
uint64_t& ue_context_setup_request_ies_o::value_c::new_gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
fixed_octstring<8, true>& ue_context_setup_request_ies_o::value_c::ran_ue_id()
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& ue_context_setup_request_ies_o::value_c::sp_cell_id() const
{
  assert_choice_type(types::sp_cell_id, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint8_t& ue_context_setup_request_ies_o::value_c::serv_cell_idx() const
{
  assert_choice_type(types::serv_cell_idx, type_, "Value");
  return c.get<uint8_t>();
}
const cell_ul_cfg_e& ue_context_setup_request_ies_o::value_c::sp_cell_ul_cfg() const
{
  assert_choice_type(types::sp_cell_ul_cfg, type_, "Value");
  return c.get<cell_ul_cfg_e>();
}
const cu_to_du_rrc_info_s& ue_context_setup_request_ies_o::value_c::cu_to_du_rrc_info() const
{
  assert_choice_type(types::cu_to_du_rrc_info, type_, "Value");
  return c.get<cu_to_du_rrc_info_s>();
}
const candidate_sp_cell_list_l& ue_context_setup_request_ies_o::value_c::candidate_sp_cell_list() const
{
  assert_choice_type(types::candidate_sp_cell_list, type_, "Value");
  return c.get<candidate_sp_cell_list_l>();
}
const drx_cycle_s& ue_context_setup_request_ies_o::value_c::drx_cycle() const
{
  assert_choice_type(types::drx_cycle, type_, "Value");
  return c.get<drx_cycle_s>();
}
const unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const scell_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::scell_to_be_setup_list() const
{
  assert_choice_type(types::scell_to_be_setup_list, type_, "Value");
  return c.get<scell_to_be_setup_list_l>();
}
const srbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::srbs_to_be_setup_list() const
{
  assert_choice_type(types::srbs_to_be_setup_list, type_, "Value");
  return c.get<srbs_to_be_setup_list_l>();
}
const drbs_to_be_setup_list_l& ue_context_setup_request_ies_o::value_c::drbs_to_be_setup_list() const
{
  assert_choice_type(types::drbs_to_be_setup_list, type_, "Value");
  return c.get<drbs_to_be_setup_list_l>();
}
const inactivity_monitoring_request_e& ue_context_setup_request_ies_o::value_c::inactivity_monitoring_request() const
{
  assert_choice_type(types::inactivity_monitoring_request, type_, "Value");
  return c.get<inactivity_monitoring_request_e>();
}
const rat_freq_prio_info_c& ue_context_setup_request_ies_o::value_c::rat_freq_prio_info() const
{
  assert_choice_type(types::rat_freq_prio_info, type_, "Value");
  return c.get<rat_freq_prio_info_c>();
}
const unbounded_octstring<true>& ue_context_setup_request_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const fixed_bitstring<64, false, true>& ue_context_setup_request_ies_o::value_c::masked_imeisv() const
{
  assert_choice_type(types::masked_imeisv, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const fixed_octstring<3, true>& ue_context_setup_request_ies_o::value_c::serving_plmn() const
{
  assert_choice_type(types::serving_plmn, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::gnb_du_ue_ambr_ul() const
{
  assert_choice_type(types::gnb_du_ue_ambr_ul, type_, "Value");
  return c.get<uint64_t>();
}
const rrc_delivery_status_request_e& ue_context_setup_request_ies_o::value_c::rrc_delivery_status_request() const
{
  assert_choice_type(types::rrc_delivery_status_request, type_, "Value");
  return c.get<rrc_delivery_status_request_e>();
}
const res_coordination_transfer_info_s& ue_context_setup_request_ies_o::value_c::res_coordination_transfer_info() const
{
  assert_choice_type(types::res_coordination_transfer_info, type_, "Value");
  return c.get<res_coordination_transfer_info_s>();
}
const uint8_t& ue_context_setup_request_ies_o::value_c::serving_cell_mo() const
{
  assert_choice_type(types::serving_cell_mo, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& ue_context_setup_request_ies_o::value_c::new_gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::new_gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const fixed_octstring<8, true>& ue_context_setup_request_ies_o::value_c::ran_ue_id() const
{
  assert_choice_type(types::ran_ue_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
void ue_context_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::sp_cell_id:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::serv_cell_idx:
      j.write_int("INTEGER (0..31,...)", c.get<uint8_t>());
      break;
    case types::sp_cell_ul_cfg:
      j.write_str("CellULConfigured", c.get<cell_ul_cfg_e>().to_string());
      break;
    case types::cu_to_du_rrc_info:
      j.write_fieldname("CUtoDURRCInformation");
      c.get<cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::candidate_sp_cell_list:
      j.start_array("Candidate-SpCell-List");
      for (const auto& e1 : c.get<candidate_sp_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drx_cycle:
      j.write_fieldname("DRXCycle");
      c.get<drx_cycle_s>().to_json(j);
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::scell_to_be_setup_list:
      j.start_array("SCell-ToBeSetup-List");
      for (const auto& e1 : c.get<scell_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_to_be_setup_list:
      j.start_array("SRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<srbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_to_be_setup_list:
      j.start_array("DRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<drbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_request:
      j.write_str("InactivityMonitoringRequest", "true");
      break;
    case types::rat_freq_prio_info:
      j.write_fieldname("RAT-FrequencyPriorityInformation");
      c.get<rat_freq_prio_info_c>().to_json(j);
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::masked_imeisv:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    case types::serving_plmn:
      j.write_str("OCTET STRING", c.get<fixed_octstring<3, true>>().to_string());
      break;
    case types::gnb_du_ue_ambr_ul:
      j.write_int("INTEGER (0..4000000000000,...)", c.get<uint64_t>());
      break;
    case types::rrc_delivery_status_request:
      j.write_str("RRCDeliveryStatusRequest", "true");
      break;
    case types::res_coordination_transfer_info:
      j.write_fieldname("ResourceCoordinationTransferInformation");
      c.get<res_coordination_transfer_info_s>().to_json(j);
      break;
    case types::serving_cell_mo:
      j.write_int("INTEGER (1..64,...)", c.get<uint8_t>());
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().pack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::candidate_sp_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<candidate_sp_cell_list_l>(), 1, 64, true));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().pack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::scell_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::srbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_to_be_setup_list_l>(), 1, 8, true));
      break;
    case types::drbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_to_be_setup_list_l>(), 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().pack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().pack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::masked_imeisv:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    case types::serving_plmn:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().pack(bref)));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().pack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().pack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sp_cell_id:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::serv_cell_idx:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)31u, true, true));
      break;
    case types::sp_cell_ul_cfg:
      HANDLE_CODE(c.get<cell_ul_cfg_e>().unpack(bref));
      break;
    case types::cu_to_du_rrc_info:
      HANDLE_CODE(c.get<cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::candidate_sp_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<candidate_sp_cell_list_l>(), bref, 1, 64, true));
      break;
    case types::drx_cycle:
      HANDLE_CODE(c.get<drx_cycle_s>().unpack(bref));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::scell_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::srbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_to_be_setup_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_to_be_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::inactivity_monitoring_request:
      HANDLE_CODE(c.get<inactivity_monitoring_request_e>().unpack(bref));
      break;
    case types::rat_freq_prio_info:
      HANDLE_CODE(c.get<rat_freq_prio_info_c>().unpack(bref));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::masked_imeisv:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    case types::serving_plmn:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().unpack(bref)));
      break;
    case types::gnb_du_ue_ambr_ul:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4000000000000u, true, true));
      break;
    case types::rrc_delivery_status_request:
      HANDLE_CODE(c.get<rrc_delivery_status_request_e>().unpack(bref));
      break;
    case types::res_coordination_transfer_info:
      HANDLE_CODE(c.get<res_coordination_transfer_info_s>().unpack(bref));
      break;
    case types::serving_cell_mo:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)64u, true, true));
      break;
    case types::new_gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_setup_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "NRCGI",
                                "INTEGER (0..31,...)",
                                "CellULConfigured",
                                "CUtoDURRCInformation",
                                "Candidate-SpCell-List",
                                "DRXCycle",
                                "OCTET STRING",
                                "SCell-ToBeSetup-List",
                                "SRBs-ToBeSetup-List",
                                "DRBs-ToBeSetup-List",
                                "InactivityMonitoringRequest",
                                "RAT-FrequencyPriorityInformation",
                                "OCTET STRING",
                                "BIT STRING",
                                "OCTET STRING",
                                "INTEGER (0..4000000000000,...)",
                                "RRCDeliveryStatusRequest",
                                "ResourceCoordinationTransferInformation",
                                "INTEGER (1..64,...)",
                                "INTEGER (0..4294967295)",
                                "OCTET STRING"};
  return convert_enum_idx(names, 23, value, "ue_context_setup_request_ies_o::value_c::types");
}

// UEContextSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_context_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 39, 95, 49, 94, 27, 66, 15, 83, 98, 7, 202};
  return map_enum_number(names, 13, idx, "id");
}
bool ue_context_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 39, 95, 49, 94, 27, 66, 15, 83, 98, 7, 202};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_context_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 39:
      return crit_e::reject;
    case 95:
      return crit_e::ignore;
    case 49:
      return crit_e::ignore;
    case 94:
      return crit_e::reject;
    case 27:
      return crit_e::ignore;
    case 66:
      return crit_e::ignore;
    case 15:
      return crit_e::ignore;
    case 83:
      return crit_e::ignore;
    case 98:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 202:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_context_setup_resp_ies_o::value_c ue_context_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 39:
      ret.set(value_c::types::du_to_cu_rrc_info);
      break;
    case 95:
      ret.set(value_c::types::c_rnti);
      break;
    case 49:
      ret.set(value_c::types::res_coordination_transfer_container);
      break;
    case 94:
      ret.set(value_c::types::full_cfg);
      break;
    case 27:
      ret.set(value_c::types::drbs_setup_list);
      break;
    case 66:
      ret.set(value_c::types::srbs_failed_to_be_setup_list);
      break;
    case 15:
      ret.set(value_c::types::drbs_failed_to_be_setup_list);
      break;
    case 83:
      ret.set(value_c::types::scell_failedto_setup_list);
      break;
    case 98:
      ret.set(value_c::types::inactivity_monitoring_resp);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 202:
      ret.set(value_c::types::srbs_setup_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_context_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 39:
      return presence_e::mandatory;
    case 95:
      return presence_e::optional;
    case 49:
      return presence_e::optional;
    case 94:
      return presence_e::optional;
    case 27:
      return presence_e::optional;
    case 66:
      return presence_e::optional;
    case 15:
      return presence_e::optional;
    case 83:
      return presence_e::optional;
    case 98:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 202:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_context_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::du_to_cu_rrc_info:
      c.destroy<du_to_cu_rrc_info_s>();
      break;
    case types::res_coordination_transfer_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::drbs_setup_list:
      c.destroy<drbs_setup_list_l>();
      break;
    case types::srbs_failed_to_be_setup_list:
      c.destroy<srbs_failed_to_be_setup_list_l>();
      break;
    case types::drbs_failed_to_be_setup_list:
      c.destroy<drbs_failed_to_be_setup_list_l>();
      break;
    case types::scell_failedto_setup_list:
      c.destroy<scell_failedto_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::srbs_setup_list:
      c.destroy<srbs_setup_list_l>();
      break;
    default:
      break;
  }
}
void ue_context_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::du_to_cu_rrc_info:
      c.init<du_to_cu_rrc_info_s>();
      break;
    case types::c_rnti:
      break;
    case types::res_coordination_transfer_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::full_cfg:
      break;
    case types::drbs_setup_list:
      c.init<drbs_setup_list_l>();
      break;
    case types::srbs_failed_to_be_setup_list:
      c.init<srbs_failed_to_be_setup_list_l>();
      break;
    case types::drbs_failed_to_be_setup_list:
      c.init<drbs_failed_to_be_setup_list_l>();
      break;
    case types::scell_failedto_setup_list:
      c.init<scell_failedto_setup_list_l>();
      break;
    case types::inactivity_monitoring_resp:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::srbs_setup_list:
      c.init<srbs_setup_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }
}
ue_context_setup_resp_ies_o::value_c::value_c(const ue_context_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::du_to_cu_rrc_info:
      c.init(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::c_rnti:
      c.init(other.c.get<uint32_t>());
      break;
    case types::res_coordination_transfer_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::full_cfg:
      c.init(other.c.get<full_cfg_e>());
      break;
    case types::drbs_setup_list:
      c.init(other.c.get<drbs_setup_list_l>());
      break;
    case types::srbs_failed_to_be_setup_list:
      c.init(other.c.get<srbs_failed_to_be_setup_list_l>());
      break;
    case types::drbs_failed_to_be_setup_list:
      c.init(other.c.get<drbs_failed_to_be_setup_list_l>());
      break;
    case types::scell_failedto_setup_list:
      c.init(other.c.get<scell_failedto_setup_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.init(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::srbs_setup_list:
      c.init(other.c.get<srbs_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }
}
ue_context_setup_resp_ies_o::value_c&
ue_context_setup_resp_ies_o::value_c::operator=(const ue_context_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::du_to_cu_rrc_info:
      c.set(other.c.get<du_to_cu_rrc_info_s>());
      break;
    case types::c_rnti:
      c.set(other.c.get<uint32_t>());
      break;
    case types::res_coordination_transfer_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::full_cfg:
      c.set(other.c.get<full_cfg_e>());
      break;
    case types::drbs_setup_list:
      c.set(other.c.get<drbs_setup_list_l>());
      break;
    case types::srbs_failed_to_be_setup_list:
      c.set(other.c.get<srbs_failed_to_be_setup_list_l>());
      break;
    case types::drbs_failed_to_be_setup_list:
      c.set(other.c.get<drbs_failed_to_be_setup_list_l>());
      break;
    case types::scell_failedto_setup_list:
      c.set(other.c.get<scell_failedto_setup_list_l>());
      break;
    case types::inactivity_monitoring_resp:
      c.set(other.c.get<inactivity_monitoring_resp_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::srbs_setup_list:
      c.set(other.c.get<srbs_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
du_to_cu_rrc_info_s& ue_context_setup_resp_ies_o::value_c::du_to_cu_rrc_info()
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
uint32_t& ue_context_setup_resp_ies_o::value_c::c_rnti()
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
unbounded_octstring<true>& ue_context_setup_resp_ies_o::value_c::res_coordination_transfer_container()
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
full_cfg_e& ue_context_setup_resp_ies_o::value_c::full_cfg()
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
drbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_setup_list()
{
  assert_choice_type(types::drbs_setup_list, type_, "Value");
  return c.get<drbs_setup_list_l>();
}
srbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_failed_to_be_setup_list()
{
  assert_choice_type(types::srbs_failed_to_be_setup_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_list_l>();
}
drbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_failed_to_be_setup_list()
{
  assert_choice_type(types::drbs_failed_to_be_setup_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_list_l>();
}
scell_failedto_setup_list_l& ue_context_setup_resp_ies_o::value_c::scell_failedto_setup_list()
{
  assert_choice_type(types::scell_failedto_setup_list, type_, "Value");
  return c.get<scell_failedto_setup_list_l>();
}
inactivity_monitoring_resp_e& ue_context_setup_resp_ies_o::value_c::inactivity_monitoring_resp()
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
crit_diagnostics_s& ue_context_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
srbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_setup_list()
{
  assert_choice_type(types::srbs_setup_list, type_, "Value");
  return c.get<srbs_setup_list_l>();
}
const uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_context_setup_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const du_to_cu_rrc_info_s& ue_context_setup_resp_ies_o::value_c::du_to_cu_rrc_info() const
{
  assert_choice_type(types::du_to_cu_rrc_info, type_, "Value");
  return c.get<du_to_cu_rrc_info_s>();
}
const uint32_t& ue_context_setup_resp_ies_o::value_c::c_rnti() const
{
  assert_choice_type(types::c_rnti, type_, "Value");
  return c.get<uint32_t>();
}
const unbounded_octstring<true>& ue_context_setup_resp_ies_o::value_c::res_coordination_transfer_container() const
{
  assert_choice_type(types::res_coordination_transfer_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const full_cfg_e& ue_context_setup_resp_ies_o::value_c::full_cfg() const
{
  assert_choice_type(types::full_cfg, type_, "Value");
  return c.get<full_cfg_e>();
}
const drbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_setup_list() const
{
  assert_choice_type(types::drbs_setup_list, type_, "Value");
  return c.get<drbs_setup_list_l>();
}
const srbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::srbs_failed_to_be_setup_list, type_, "Value");
  return c.get<srbs_failed_to_be_setup_list_l>();
}
const drbs_failed_to_be_setup_list_l& ue_context_setup_resp_ies_o::value_c::drbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::drbs_failed_to_be_setup_list, type_, "Value");
  return c.get<drbs_failed_to_be_setup_list_l>();
}
const scell_failedto_setup_list_l& ue_context_setup_resp_ies_o::value_c::scell_failedto_setup_list() const
{
  assert_choice_type(types::scell_failedto_setup_list, type_, "Value");
  return c.get<scell_failedto_setup_list_l>();
}
const inactivity_monitoring_resp_e& ue_context_setup_resp_ies_o::value_c::inactivity_monitoring_resp() const
{
  assert_choice_type(types::inactivity_monitoring_resp, type_, "Value");
  return c.get<inactivity_monitoring_resp_e>();
}
const crit_diagnostics_s& ue_context_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const srbs_setup_list_l& ue_context_setup_resp_ies_o::value_c::srbs_setup_list() const
{
  assert_choice_type(types::srbs_setup_list, type_, "Value");
  return c.get<srbs_setup_list_l>();
}
void ue_context_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::du_to_cu_rrc_info:
      j.write_fieldname("DUtoCURRCInformation");
      c.get<du_to_cu_rrc_info_s>().to_json(j);
      break;
    case types::c_rnti:
      j.write_int("INTEGER (0..65535,...)", c.get<uint32_t>());
      break;
    case types::res_coordination_transfer_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::full_cfg:
      j.write_str("FullConfiguration", "full");
      break;
    case types::drbs_setup_list:
      j.start_array("DRBs-Setup-List");
      for (const auto& e1 : c.get<drbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::srbs_failed_to_be_setup_list:
      j.start_array("SRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<srbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::drbs_failed_to_be_setup_list:
      j.start_array("DRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<drbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::scell_failedto_setup_list:
      j.start_array("SCell-FailedtoSetup-List");
      for (const auto& e1 : c.get<scell_failedto_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::inactivity_monitoring_resp:
      j.write_str("InactivityMonitoringResponse", "not-supported");
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::srbs_setup_list:
      j.start_array("SRBs-Setup-List");
      for (const auto& e1 : c.get<srbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_context_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().pack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().pack(bref));
      break;
    case types::drbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_setup_list_l>(), 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_failed_to_be_setup_list_l>(), 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drbs_failed_to_be_setup_list_l>(), 1, 64, true));
      break;
    case types::scell_failedto_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<scell_failedto_setup_list_l>(), 1, 32, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::srbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<srbs_setup_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::du_to_cu_rrc_info:
      HANDLE_CODE(c.get<du_to_cu_rrc_info_s>().unpack(bref));
      break;
    case types::c_rnti:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, true, true));
      break;
    case types::res_coordination_transfer_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::full_cfg:
      HANDLE_CODE(c.get<full_cfg_e>().unpack(bref));
      break;
    case types::drbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::srbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_failed_to_be_setup_list_l>(), bref, 1, 8, true));
      break;
    case types::drbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drbs_failed_to_be_setup_list_l>(), bref, 1, 64, true));
      break;
    case types::scell_failedto_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<scell_failedto_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::inactivity_monitoring_resp:
      HANDLE_CODE(c.get<inactivity_monitoring_resp_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::srbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<srbs_setup_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_context_setup_resp_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "DUtoCURRCInformation",
                                "INTEGER (0..65535,...)",
                                "OCTET STRING",
                                "FullConfiguration",
                                "DRBs-Setup-List",
                                "SRBs-FailedToBeSetup-List",
                                "DRBs-FailedToBeSetup-List",
                                "SCell-FailedtoSetup-List",
                                "InactivityMonitoringResponse",
                                "CriticalityDiagnostics",
                                "SRBs-Setup-List"};
  return convert_enum_idx(names, 13, value, "ue_context_setup_resp_ies_o::value_c::types");
}

// UEInactivityNotificationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_inactivity_notif_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 100};
  return map_enum_number(names, 3, idx, "id");
}
bool ue_inactivity_notif_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 100};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ue_inactivity_notif_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 100:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ue_inactivity_notif_ies_o::value_c ue_inactivity_notif_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 100:
      ret.set(value_c::types::drb_activity_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_inactivity_notif_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 100:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ue_inactivity_notif_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::drb_activity_list:
      c.destroy<drb_activity_list_l>();
      break;
    default:
      break;
  }
}
void ue_inactivity_notif_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::drb_activity_list:
      c.init<drb_activity_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }
}
ue_inactivity_notif_ies_o::value_c::value_c(const ue_inactivity_notif_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::drb_activity_list:
      c.init(other.c.get<drb_activity_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }
}
ue_inactivity_notif_ies_o::value_c&
ue_inactivity_notif_ies_o::value_c::operator=(const ue_inactivity_notif_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::drb_activity_list:
      c.set(other.c.get<drb_activity_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }

  return *this;
}
uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
drb_activity_list_l& ue_inactivity_notif_ies_o::value_c::drb_activity_list()
{
  assert_choice_type(types::drb_activity_list, type_, "Value");
  return c.get<drb_activity_list_l>();
}
const uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ue_inactivity_notif_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const drb_activity_list_l& ue_inactivity_notif_ies_o::value_c::drb_activity_list() const
{
  assert_choice_type(types::drb_activity_list, type_, "Value");
  return c.get<drb_activity_list_l>();
}
void ue_inactivity_notif_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::drb_activity_list:
      j.start_array("DRB-Activity-List");
      for (const auto& e1 : c.get<drb_activity_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ue_inactivity_notif_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_activity_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drb_activity_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_inactivity_notif_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_activity_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drb_activity_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "ue_inactivity_notif_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ue_inactivity_notif_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)", "INTEGER (0..4294967295)", "DRB-Activity-List"};
  return convert_enum_idx(names, 3, value, "ue_inactivity_notif_ies_o::value_c::types");
}

// ULRRCMessageTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ul_rrc_msg_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 64, 50, 224, 219};
  return map_enum_number(names, 6, idx, "id");
}
bool ul_rrc_msg_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 64, 50, 224, 219};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ul_rrc_msg_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 64:
      return crit_e::reject;
    case 50:
      return crit_e::reject;
    case 224:
      return crit_e::reject;
    case 219:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ul_rrc_msg_transfer_ies_o::value_c ul_rrc_msg_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    case 50:
      ret.set(value_c::types::rrc_container);
      break;
    case 224:
      ret.set(value_c::types::sel_plmn_id);
      break;
    case 219:
      ret.set(value_c::types::new_gnb_du_ue_f1ap_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ul_rrc_msg_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 64:
      return presence_e::mandatory;
    case 50:
      return presence_e::mandatory;
    case 224:
      return presence_e::optional;
    case 219:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ul_rrc_msg_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rrc_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::sel_plmn_id:
      c.destroy<fixed_octstring<3, true>>();
      break;
    default:
      break;
  }
}
void ul_rrc_msg_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srb_id:
      break;
    case types::rrc_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::sel_plmn_id:
      c.init<fixed_octstring<3, true>>();
      break;
    case types::new_gnb_du_ue_f1ap_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }
}
ul_rrc_msg_transfer_ies_o::value_c::value_c(const ul_rrc_msg_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::rrc_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sel_plmn_id:
      c.init(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }
}
ul_rrc_msg_transfer_ies_o::value_c&
ul_rrc_msg_transfer_ies_o::value_c::operator=(const ul_rrc_msg_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::rrc_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::sel_plmn_id:
      c.set(other.c.get<fixed_octstring<3, true>>());
      break;
    case types::new_gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& ul_rrc_msg_transfer_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
unbounded_octstring<true>& ul_rrc_msg_transfer_ies_o::value_c::rrc_container()
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
fixed_octstring<3, true>& ul_rrc_msg_transfer_ies_o::value_c::sel_plmn_id()
{
  assert_choice_type(types::sel_plmn_id, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
uint64_t& ul_rrc_msg_transfer_ies_o::value_c::new_gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::new_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& ul_rrc_msg_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& ul_rrc_msg_transfer_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const unbounded_octstring<true>& ul_rrc_msg_transfer_ies_o::value_c::rrc_container() const
{
  assert_choice_type(types::rrc_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const fixed_octstring<3, true>& ul_rrc_msg_transfer_ies_o::value_c::sel_plmn_id() const
{
  assert_choice_type(types::sel_plmn_id, type_, "Value");
  return c.get<fixed_octstring<3, true>>();
}
const uint64_t& ul_rrc_msg_transfer_ies_o::value_c::new_gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::new_gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
void ul_rrc_msg_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    case types::rrc_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::sel_plmn_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<3, true>>().to_string());
      break;
    case types::new_gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ul_rrc_msg_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::sel_plmn_id:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().pack(bref)));
      break;
    case types::new_gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_rrc_msg_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    case types::rrc_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::sel_plmn_id:
      HANDLE_CODE((c.get<fixed_octstring<3, true>>().unpack(bref)));
      break;
    case types::new_gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "ul_rrc_msg_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* ul_rrc_msg_transfer_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..4294967295)",
                                "INTEGER (0..4294967295)",
                                "INTEGER (0..3,...)",
                                "OCTET STRING",
                                "OCTET STRING",
                                "INTEGER (0..4294967295)"};
  return convert_enum_idx(names, 6, value, "ul_rrc_msg_transfer_ies_o::value_c::types");
}

// WriteReplaceWarningRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t write_replace_warning_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 140, 141, 142, 144};
  return map_enum_number(names, 5, idx, "id");
}
bool write_replace_warning_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 140, 141, 142, 144};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e write_replace_warning_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 140:
      return crit_e::reject;
    case 141:
      return crit_e::reject;
    case 142:
      return crit_e::reject;
    case 144:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
write_replace_warning_request_ies_o::value_c write_replace_warning_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 140:
      ret.set(value_c::types::pws_sys_info);
      break;
    case 141:
      ret.set(value_c::types::repeat_period);
      break;
    case 142:
      ret.set(value_c::types::numof_broadcast_request);
      break;
    case 144:
      ret.set(value_c::types::cells_to_be_broadcast_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e write_replace_warning_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 140:
      return presence_e::mandatory;
    case 141:
      return presence_e::mandatory;
    case 142:
      return presence_e::mandatory;
    case 144:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void write_replace_warning_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pws_sys_info:
      c.destroy<pws_sys_info_s>();
      break;
    case types::cells_to_be_broadcast_list:
      c.destroy<cells_to_be_broadcast_list_l>();
      break;
    default:
      break;
  }
}
void write_replace_warning_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pws_sys_info:
      c.init<pws_sys_info_s>();
      break;
    case types::repeat_period:
      break;
    case types::numof_broadcast_request:
      break;
    case types::cells_to_be_broadcast_list:
      c.init<cells_to_be_broadcast_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
}
write_replace_warning_request_ies_o::value_c::value_c(const write_replace_warning_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      c.init(other.c.get<pws_sys_info_s>());
      break;
    case types::repeat_period:
      c.init(other.c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      c.init(other.c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      c.init(other.c.get<cells_to_be_broadcast_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
}
write_replace_warning_request_ies_o::value_c&
write_replace_warning_request_ies_o::value_c::operator=(const write_replace_warning_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      c.set(other.c.get<pws_sys_info_s>());
      break;
    case types::repeat_period:
      c.set(other.c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      c.set(other.c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      c.set(other.c.get<cells_to_be_broadcast_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& write_replace_warning_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
pws_sys_info_s& write_replace_warning_request_ies_o::value_c::pws_sys_info()
{
  assert_choice_type(types::pws_sys_info, type_, "Value");
  return c.get<pws_sys_info_s>();
}
uint32_t& write_replace_warning_request_ies_o::value_c::repeat_period()
{
  assert_choice_type(types::repeat_period, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& write_replace_warning_request_ies_o::value_c::numof_broadcast_request()
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
cells_to_be_broadcast_list_l& write_replace_warning_request_ies_o::value_c::cells_to_be_broadcast_list()
{
  assert_choice_type(types::cells_to_be_broadcast_list, type_, "Value");
  return c.get<cells_to_be_broadcast_list_l>();
}
const uint16_t& write_replace_warning_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const pws_sys_info_s& write_replace_warning_request_ies_o::value_c::pws_sys_info() const
{
  assert_choice_type(types::pws_sys_info, type_, "Value");
  return c.get<pws_sys_info_s>();
}
const uint32_t& write_replace_warning_request_ies_o::value_c::repeat_period() const
{
  assert_choice_type(types::repeat_period, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& write_replace_warning_request_ies_o::value_c::numof_broadcast_request() const
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
const cells_to_be_broadcast_list_l& write_replace_warning_request_ies_o::value_c::cells_to_be_broadcast_list() const
{
  assert_choice_type(types::cells_to_be_broadcast_list, type_, "Value");
  return c.get<cells_to_be_broadcast_list_l>();
}
void write_replace_warning_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      j.write_fieldname("PWSSystemInformation");
      c.get<pws_sys_info_s>().to_json(j);
      break;
    case types::repeat_period:
      j.write_int("INTEGER (0..131071,...)", c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      j.write_int("INTEGER (0..65535)", c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      j.start_array("Cells-To-Be-Broadcast-List");
      for (const auto& e1 : c.get<cells_to_be_broadcast_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE write_replace_warning_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_sys_info:
      HANDLE_CODE(c.get<pws_sys_info_s>().pack(bref));
      break;
    case types::repeat_period:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)131071u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::cells_to_be_broadcast_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_broadcast_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_sys_info:
      HANDLE_CODE(c.get<pws_sys_info_s>().unpack(bref));
      break;
    case types::repeat_period:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)131071u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::cells_to_be_broadcast_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_broadcast_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* write_replace_warning_request_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)",
                                "PWSSystemInformation",
                                "INTEGER (0..131071,...)",
                                "INTEGER (0..65535)",
                                "Cells-To-Be-Broadcast-List"};
  return convert_enum_idx(names, 5, value, "write_replace_warning_request_ies_o::value_c::types");
}

// WriteReplaceWarningResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t write_replace_warning_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 146, 7, 189};
  return map_enum_number(names, 4, idx, "id");
}
bool write_replace_warning_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 146, 7, 189};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e write_replace_warning_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 146:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 189:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
write_replace_warning_resp_ies_o::value_c write_replace_warning_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 146:
      ret.set(value_c::types::cells_broadcast_completed_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e write_replace_warning_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 146:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void write_replace_warning_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_broadcast_completed_list:
      c.destroy<cells_broadcast_completed_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    default:
      break;
  }
}
void write_replace_warning_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_broadcast_completed_list:
      c.init<cells_broadcast_completed_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
}
write_replace_warning_resp_ies_o::value_c::value_c(const write_replace_warning_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      c.init(other.c.get<cells_broadcast_completed_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
}
write_replace_warning_resp_ies_o::value_c&
write_replace_warning_resp_ies_o::value_c::operator=(const write_replace_warning_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      c.set(other.c.get<cells_broadcast_completed_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& write_replace_warning_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_broadcast_completed_list_l& write_replace_warning_resp_ies_o::value_c::cells_broadcast_completed_list()
{
  assert_choice_type(types::cells_broadcast_completed_list, type_, "Value");
  return c.get<cells_broadcast_completed_list_l>();
}
crit_diagnostics_s& write_replace_warning_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
ded_si_delivery_needed_ue_list_l& write_replace_warning_resp_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const uint16_t& write_replace_warning_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_broadcast_completed_list_l&
write_replace_warning_resp_ies_o::value_c::cells_broadcast_completed_list() const
{
  assert_choice_type(types::cells_broadcast_completed_list, type_, "Value");
  return c.get<cells_broadcast_completed_list_l>();
}
const crit_diagnostics_s& write_replace_warning_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const ded_si_delivery_needed_ue_list_l&
write_replace_warning_resp_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
void write_replace_warning_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      j.start_array("Cells-Broadcast-Completed-List");
      for (const auto& e1 : c.get<cells_broadcast_completed_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE write_replace_warning_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_completed_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_broadcast_completed_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_completed_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_broadcast_completed_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* write_replace_warning_resp_ies_o::value_c::types_opts::to_string() const
{
  static const char* names[] = {"INTEGER (0..255,...)",
                                "Cells-Broadcast-Completed-List",
                                "CriticalityDiagnostics",
                                "Dedicated-SIDelivery-NeededUE-List"};
  return convert_enum_idx(names, 4, value, "write_replace_warning_resp_ies_o::value_c::types");
}
uint8_t write_replace_warning_resp_ies_o::value_c::types_opts::to_number() const
{
  static const uint8_t numbers[] = {0};
  return map_enum_number(numbers, 1, value, "write_replace_warning_resp_ies_o::value_c::types");
}

template struct asn1::protocol_ie_field_s<f1_removal_fail_ies_o>;

f1_removal_fail_ies_container::f1_removal_fail_ies_container() :
  transaction_id(78, crit_e::reject), cause(0, crit_e::ignore), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE f1_removal_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_removal_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<f1_removal_resp_ies_o>;

f1_removal_resp_ies_container::f1_removal_resp_ies_container() :
  transaction_id(78, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE f1_removal_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_removal_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<f1_setup_fail_ies_o>;

f1_setup_fail_ies_container::f1_setup_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE f1_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<f1_setup_request_ies_o>;

f1_setup_request_ies_container::f1_setup_request_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_du_id(42, crit_e::reject),
  gnb_du_name(45, crit_e::ignore),
  gnb_du_served_cells_list(44, crit_e::reject),
  gnb_du_rrc_version(171, crit_e::reject)
{
}
SRSASN_CODE f1_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += gnb_du_name_present ? 1 : 0;
  nof_ies += gnb_du_served_cells_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_du_id.pack(bref));
  if (gnb_du_name_present) {
    HANDLE_CODE(gnb_du_name.pack(bref));
  }
  if (gnb_du_served_cells_list_present) {
    HANDLE_CODE(gnb_du_served_cells_list.pack(bref));
  }
  HANDLE_CODE(gnb_du_rrc_version.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 42: {
        nof_mandatory_ies--;
        gnb_du_id.id = id;
        HANDLE_CODE(gnb_du_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_id.value.unpack(bref));
        break;
      }
      case 45: {
        gnb_du_name_present = true;
        gnb_du_name.id      = id;
        HANDLE_CODE(gnb_du_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_name.value.unpack(bref));
        break;
      }
      case 44: {
        gnb_du_served_cells_list_present = true;
        gnb_du_served_cells_list.id      = id;
        HANDLE_CODE(gnb_du_served_cells_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_served_cells_list.value.unpack(bref));
        break;
      }
      case 171: {
        nof_mandatory_ies--;
        gnb_du_rrc_version.id = id;
        HANDLE_CODE(gnb_du_rrc_version.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_rrc_version.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_du_id.to_json(j);
  if (gnb_du_name_present) {
    j.write_fieldname("");
    gnb_du_name.to_json(j);
  }
  if (gnb_du_served_cells_list_present) {
    j.write_fieldname("");
    gnb_du_served_cells_list.to_json(j);
  }
  j.write_fieldname("");
  gnb_du_rrc_version.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<f1_setup_resp_ies_o>;

f1_setup_resp_ies_container::f1_setup_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  gnb_cu_name(82, crit_e::ignore),
  cells_to_be_activ_list(3, crit_e::reject),
  gnb_cu_rrc_version(170, crit_e::reject)
{
}
SRSASN_CODE f1_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_cu_name_present ? 1 : 0;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (gnb_cu_name_present) {
    HANDLE_CODE(gnb_cu_name.pack(bref));
  }
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(cells_to_be_activ_list.pack(bref));
  }
  HANDLE_CODE(gnb_cu_rrc_version.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 82: {
        gnb_cu_name_present = true;
        gnb_cu_name.id      = id;
        HANDLE_CODE(gnb_cu_name.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_name.value.unpack(bref));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        cells_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 170: {
        nof_mandatory_ies--;
        gnb_cu_rrc_version.id = id;
        HANDLE_CODE(gnb_cu_rrc_version.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_rrc_version.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (gnb_cu_name_present) {
    j.write_fieldname("");
    gnb_cu_name.to_json(j);
  }
  if (cells_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_to_be_activ_list.to_json(j);
  }
  j.write_fieldname("");
  gnb_cu_rrc_version.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_cu_cfg_upd_ies_o>;

gnb_cu_cfg_upd_ies_container::gnb_cu_cfg_upd_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_to_be_activ_list(3, crit_e::reject),
  cells_to_be_deactiv_list(5, crit_e::reject),
  gnb_cu_tnl_assoc_to_add_list(121, crit_e::ignore),
  gnb_cu_tnl_assoc_to_rem_list(123, crit_e::ignore),
  gnb_cu_tnl_assoc_to_upd_list(125, crit_e::ignore),
  cells_to_be_barred_list(129, crit_e::ignore),
  protected_eutra_res_list(105, crit_e::reject)
{
}
SRSASN_CODE gnb_cu_cfg_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += cells_to_be_deactiv_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_add_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_rem_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_upd_list_present ? 1 : 0;
  nof_ies += cells_to_be_barred_list_present ? 1 : 0;
  nof_ies += protected_eutra_res_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(cells_to_be_activ_list.pack(bref));
  }
  if (cells_to_be_deactiv_list_present) {
    HANDLE_CODE(cells_to_be_deactiv_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_to_add_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_to_add_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_to_rem_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_to_rem_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_to_upd_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_to_upd_list.pack(bref));
  }
  if (cells_to_be_barred_list_present) {
    HANDLE_CODE(cells_to_be_barred_list.pack(bref));
  }
  if (protected_eutra_res_list_present) {
    HANDLE_CODE(protected_eutra_res_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        cells_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 5: {
        cells_to_be_deactiv_list_present = true;
        cells_to_be_deactiv_list.id      = id;
        HANDLE_CODE(cells_to_be_deactiv_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_deactiv_list.value.unpack(bref));
        break;
      }
      case 121: {
        gnb_cu_tnl_assoc_to_add_list_present = true;
        gnb_cu_tnl_assoc_to_add_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_to_add_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_to_add_list.value.unpack(bref));
        break;
      }
      case 123: {
        gnb_cu_tnl_assoc_to_rem_list_present = true;
        gnb_cu_tnl_assoc_to_rem_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_to_rem_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_to_rem_list.value.unpack(bref));
        break;
      }
      case 125: {
        gnb_cu_tnl_assoc_to_upd_list_present = true;
        gnb_cu_tnl_assoc_to_upd_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_to_upd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_to_upd_list.value.unpack(bref));
        break;
      }
      case 129: {
        cells_to_be_barred_list_present = true;
        cells_to_be_barred_list.id      = id;
        HANDLE_CODE(cells_to_be_barred_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_barred_list.value.unpack(bref));
        break;
      }
      case 105: {
        protected_eutra_res_list_present = true;
        protected_eutra_res_list.id      = id;
        HANDLE_CODE(protected_eutra_res_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(protected_eutra_res_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_to_be_activ_list.to_json(j);
  }
  if (cells_to_be_deactiv_list_present) {
    j.write_fieldname("");
    cells_to_be_deactiv_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_to_add_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_to_add_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_to_rem_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_to_rem_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_to_upd_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_to_upd_list.to_json(j);
  }
  if (cells_to_be_barred_list_present) {
    j.write_fieldname("");
    cells_to_be_barred_list.to_json(j);
  }
  if (protected_eutra_res_list_present) {
    j.write_fieldname("");
    protected_eutra_res_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_cu_cfg_upd_ack_ies_o>;

gnb_cu_cfg_upd_ack_ies_container::gnb_cu_cfg_upd_ack_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_failed_to_be_activ_list(1, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  gnb_cu_tnl_assoc_setup_list(132, crit_e::ignore),
  gnb_cu_tnl_assoc_failed_to_setup_list(134, crit_e::ignore),
  ded_si_delivery_needed_ue_list(189, crit_e::ignore)
{
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_failed_to_be_activ_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_setup_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_failed_to_setup_list_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_failed_to_be_activ_list_present) {
    HANDLE_CODE(cells_failed_to_be_activ_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (gnb_cu_tnl_assoc_setup_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_setup_list.pack(bref));
  }
  if (gnb_cu_tnl_assoc_failed_to_setup_list_present) {
    HANDLE_CODE(gnb_cu_tnl_assoc_failed_to_setup_list.pack(bref));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(ded_si_delivery_needed_ue_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 1: {
        cells_failed_to_be_activ_list_present = true;
        cells_failed_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_failed_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_failed_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 132: {
        gnb_cu_tnl_assoc_setup_list_present = true;
        gnb_cu_tnl_assoc_setup_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_setup_list.value.unpack(bref));
        break;
      }
      case 134: {
        gnb_cu_tnl_assoc_failed_to_setup_list_present = true;
        gnb_cu_tnl_assoc_failed_to_setup_list.id      = id;
        HANDLE_CODE(gnb_cu_tnl_assoc_failed_to_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_tnl_assoc_failed_to_setup_list.value.unpack(bref));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        ded_si_delivery_needed_ue_list.id      = id;
        HANDLE_CODE(ded_si_delivery_needed_ue_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ded_si_delivery_needed_ue_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_failed_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_failed_to_be_activ_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (gnb_cu_tnl_assoc_setup_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_setup_list.to_json(j);
  }
  if (gnb_cu_tnl_assoc_failed_to_setup_list_present) {
    j.write_fieldname("");
    gnb_cu_tnl_assoc_failed_to_setup_list.to_json(j);
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_fieldname("");
    ded_si_delivery_needed_ue_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_cu_cfg_upd_fail_ies_o>;

gnb_cu_cfg_upd_fail_ies_container::gnb_cu_cfg_upd_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_du_cfg_upd_ies_o>;

gnb_du_cfg_upd_ies_container::gnb_du_cfg_upd_ies_container() :
  transaction_id(78, crit_e::reject),
  served_cells_to_add_list(58, crit_e::reject),
  served_cells_to_modify_list(62, crit_e::reject),
  served_cells_to_delete_list(60, crit_e::reject),
  cells_status_list(89, crit_e::reject),
  ded_si_delivery_needed_ue_list(189, crit_e::ignore),
  gnb_du_id(42, crit_e::reject),
  gnb_du_tnl_assoc_to_rem_list(228, crit_e::reject)
{
}
SRSASN_CODE gnb_du_cfg_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += served_cells_to_add_list_present ? 1 : 0;
  nof_ies += served_cells_to_modify_list_present ? 1 : 0;
  nof_ies += served_cells_to_delete_list_present ? 1 : 0;
  nof_ies += cells_status_list_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  nof_ies += gnb_du_id_present ? 1 : 0;
  nof_ies += gnb_du_tnl_assoc_to_rem_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (served_cells_to_add_list_present) {
    HANDLE_CODE(served_cells_to_add_list.pack(bref));
  }
  if (served_cells_to_modify_list_present) {
    HANDLE_CODE(served_cells_to_modify_list.pack(bref));
  }
  if (served_cells_to_delete_list_present) {
    HANDLE_CODE(served_cells_to_delete_list.pack(bref));
  }
  if (cells_status_list_present) {
    HANDLE_CODE(cells_status_list.pack(bref));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(ded_si_delivery_needed_ue_list.pack(bref));
  }
  if (gnb_du_id_present) {
    HANDLE_CODE(gnb_du_id.pack(bref));
  }
  if (gnb_du_tnl_assoc_to_rem_list_present) {
    HANDLE_CODE(gnb_du_tnl_assoc_to_rem_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 58: {
        served_cells_to_add_list_present = true;
        served_cells_to_add_list.id      = id;
        HANDLE_CODE(served_cells_to_add_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(served_cells_to_add_list.value.unpack(bref));
        break;
      }
      case 62: {
        served_cells_to_modify_list_present = true;
        served_cells_to_modify_list.id      = id;
        HANDLE_CODE(served_cells_to_modify_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(served_cells_to_modify_list.value.unpack(bref));
        break;
      }
      case 60: {
        served_cells_to_delete_list_present = true;
        served_cells_to_delete_list.id      = id;
        HANDLE_CODE(served_cells_to_delete_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(served_cells_to_delete_list.value.unpack(bref));
        break;
      }
      case 89: {
        cells_status_list_present = true;
        cells_status_list.id      = id;
        HANDLE_CODE(cells_status_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_status_list.value.unpack(bref));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        ded_si_delivery_needed_ue_list.id      = id;
        HANDLE_CODE(ded_si_delivery_needed_ue_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ded_si_delivery_needed_ue_list.value.unpack(bref));
        break;
      }
      case 42: {
        gnb_du_id_present = true;
        gnb_du_id.id      = id;
        HANDLE_CODE(gnb_du_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_id.value.unpack(bref));
        break;
      }
      case 228: {
        gnb_du_tnl_assoc_to_rem_list_present = true;
        gnb_du_tnl_assoc_to_rem_list.id      = id;
        HANDLE_CODE(gnb_du_tnl_assoc_to_rem_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_tnl_assoc_to_rem_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (served_cells_to_add_list_present) {
    j.write_fieldname("");
    served_cells_to_add_list.to_json(j);
  }
  if (served_cells_to_modify_list_present) {
    j.write_fieldname("");
    served_cells_to_modify_list.to_json(j);
  }
  if (served_cells_to_delete_list_present) {
    j.write_fieldname("");
    served_cells_to_delete_list.to_json(j);
  }
  if (cells_status_list_present) {
    j.write_fieldname("");
    cells_status_list.to_json(j);
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_fieldname("");
    ded_si_delivery_needed_ue_list.to_json(j);
  }
  if (gnb_du_id_present) {
    j.write_fieldname("");
    gnb_du_id.to_json(j);
  }
  if (gnb_du_tnl_assoc_to_rem_list_present) {
    j.write_fieldname("");
    gnb_du_tnl_assoc_to_rem_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_du_cfg_upd_ack_ies_o>;

gnb_du_cfg_upd_ack_ies_container::gnb_du_cfg_upd_ack_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_to_be_activ_list(3, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  cells_to_be_deactiv_list(5, crit_e::reject)
{
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += cells_to_be_deactiv_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(cells_to_be_activ_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (cells_to_be_deactiv_list_present) {
    HANDLE_CODE(cells_to_be_deactiv_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        cells_to_be_activ_list.id      = id;
        HANDLE_CODE(cells_to_be_activ_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_activ_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 5: {
        cells_to_be_deactiv_list_present = true;
        cells_to_be_deactiv_list.id      = id;
        HANDLE_CODE(cells_to_be_deactiv_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_deactiv_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_to_be_activ_list_present) {
    j.write_fieldname("");
    cells_to_be_activ_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (cells_to_be_deactiv_list_present) {
    j.write_fieldname("");
    cells_to_be_deactiv_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_du_cfg_upd_fail_ies_o>;

gnb_du_cfg_upd_fail_ies_container::gnb_du_cfg_upd_fail_ies_container() :
  transaction_id(78, crit_e::reject),
  cause(0, crit_e::ignore),
  time_to_wait(77, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (time_to_wait_present) {
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        time_to_wait.id      = id;
        HANDLE_CODE(time_to_wait.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_fieldname("");
    time_to_wait.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_du_res_coordination_request_ies_o>;

gnb_du_res_coordination_request_ies_container::gnb_du_res_coordination_request_ies_container() :
  transaction_id(78, crit_e::reject),
  request_type(106, crit_e::reject),
  eutra_nr_cell_res_coordination_req_container(101, crit_e::reject),
  ignore_res_coordination_container(213, crit_e::reject)
{
}
SRSASN_CODE gnb_du_res_coordination_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += ignore_res_coordination_container_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(request_type.pack(bref));
  HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.pack(bref));
  if (ignore_res_coordination_container_present) {
    HANDLE_CODE(ignore_res_coordination_container.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 106: {
        nof_mandatory_ies--;
        request_type.id = id;
        HANDLE_CODE(request_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(request_type.value.unpack(bref));
        break;
      }
      case 101: {
        nof_mandatory_ies--;
        eutra_nr_cell_res_coordination_req_container.id = id;
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.value.unpack(bref));
        break;
      }
      case 213: {
        ignore_res_coordination_container_present = true;
        ignore_res_coordination_container.id      = id;
        HANDLE_CODE(ignore_res_coordination_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ignore_res_coordination_container.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_coordination_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  request_type.to_json(j);
  j.write_fieldname("");
  eutra_nr_cell_res_coordination_req_container.to_json(j);
  if (ignore_res_coordination_container_present) {
    j.write_fieldname("");
    ignore_res_coordination_container.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_du_res_coordination_resp_ies_o>;

gnb_du_res_coordination_resp_ies_container::gnb_du_res_coordination_resp_ies_container() :
  transaction_id(78, crit_e::reject), eutra_nr_cell_res_coordination_req_ack_container(102, crit_e::reject)
{
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 102: {
        nof_mandatory_ies--;
        eutra_nr_cell_res_coordination_req_ack_container.id = id;
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_coordination_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  eutra_nr_cell_res_coordination_req_ack_container.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<gnb_du_status_ind_ies_o>;

gnb_du_status_ind_ies_container::gnb_du_status_ind_ies_container() :
  transaction_id(78, crit_e::reject), gnb_du_overload_info(172, crit_e::reject)
{
}
SRSASN_CODE gnb_du_status_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(gnb_du_overload_info.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_status_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 172: {
        nof_mandatory_ies--;
        gnb_du_overload_info.id = id;
        HANDLE_CODE(gnb_du_overload_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_overload_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_status_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  gnb_du_overload_info.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<init_ul_rrc_msg_transfer_ies_o>;

init_ul_rrc_msg_transfer_ies_container::init_ul_rrc_msg_transfer_ies_container() :
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  nr_cgi(111, crit_e::reject),
  c_rnti(95, crit_e::reject),
  rrc_container(50, crit_e::reject),
  du_to_cu_rrc_container(128, crit_e::reject),
  sul_access_ind(178, crit_e::ignore),
  transaction_id(78, crit_e::ignore),
  ran_ue_id(226, crit_e::ignore),
  rrc_container_rrc_setup_complete(241, crit_e::ignore)
{
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += du_to_cu_rrc_container_present ? 1 : 0;
  nof_ies += sul_access_ind_present ? 1 : 0;
  nof_ies += ran_ue_id_present ? 1 : 0;
  nof_ies += rrc_container_rrc_setup_complete_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(c_rnti.pack(bref));
  HANDLE_CODE(rrc_container.pack(bref));
  if (du_to_cu_rrc_container_present) {
    HANDLE_CODE(du_to_cu_rrc_container.pack(bref));
  }
  if (sul_access_ind_present) {
    HANDLE_CODE(sul_access_ind.pack(bref));
  }
  HANDLE_CODE(transaction_id.pack(bref));
  if (ran_ue_id_present) {
    HANDLE_CODE(ran_ue_id.pack(bref));
  }
  if (rrc_container_rrc_setup_complete_present) {
    HANDLE_CODE(rrc_container_rrc_setup_complete.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE init_ul_rrc_msg_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        nr_cgi.id = id;
        HANDLE_CODE(nr_cgi.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.value.unpack(bref));
        break;
      }
      case 95: {
        nof_mandatory_ies--;
        c_rnti.id = id;
        HANDLE_CODE(c_rnti.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(c_rnti.value.unpack(bref));
        break;
      }
      case 50: {
        nof_mandatory_ies--;
        rrc_container.id = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 128: {
        du_to_cu_rrc_container_present = true;
        du_to_cu_rrc_container.id      = id;
        HANDLE_CODE(du_to_cu_rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_container.value.unpack(bref));
        break;
      }
      case 178: {
        sul_access_ind_present = true;
        sul_access_ind.id      = id;
        HANDLE_CODE(sul_access_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sul_access_ind.value.unpack(bref));
        break;
      }
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 226: {
        ran_ue_id_present = true;
        ran_ue_id.id      = id;
        HANDLE_CODE(ran_ue_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_id.value.unpack(bref));
        break;
      }
      case 241: {
        rrc_container_rrc_setup_complete_present = true;
        rrc_container_rrc_setup_complete.id      = id;
        HANDLE_CODE(rrc_container_rrc_setup_complete.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container_rrc_setup_complete.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void init_ul_rrc_msg_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  nr_cgi.to_json(j);
  j.write_fieldname("");
  c_rnti.to_json(j);
  j.write_fieldname("");
  rrc_container.to_json(j);
  if (du_to_cu_rrc_container_present) {
    j.write_fieldname("");
    du_to_cu_rrc_container.to_json(j);
  }
  if (sul_access_ind_present) {
    j.write_fieldname("");
    sul_access_ind.to_json(j);
  }
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (ran_ue_id_present) {
    j.write_fieldname("");
    ran_ue_id.to_json(j);
  }
  if (rrc_container_rrc_setup_complete_present) {
    j.write_fieldname("");
    rrc_container_rrc_setup_complete.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<network_access_rate_reduction_ies_o>;

network_access_rate_reduction_ies_container::network_access_rate_reduction_ies_container() :
  transaction_id(78, crit_e::reject), uac_assist_info(225, crit_e::reject)
{
}
SRSASN_CODE network_access_rate_reduction_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(uac_assist_info.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE network_access_rate_reduction_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 225: {
        nof_mandatory_ies--;
        uac_assist_info.id = id;
        HANDLE_CODE(uac_assist_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uac_assist_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void network_access_rate_reduction_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  uac_assist_info.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<notify_ies_o>;

notify_ies_container::notify_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), drb_notify_list(137, crit_e::reject)
{
}
SRSASN_CODE notify_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(drb_notify_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE notify_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 137: {
        nof_mandatory_ies--;
        drb_notify_list.id = id;
        HANDLE_CODE(drb_notify_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drb_notify_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void notify_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  drb_notify_list.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<pws_cancel_request_ies_o>;

pws_cancel_request_ies_container::pws_cancel_request_ies_container() :
  transaction_id(78, crit_e::reject),
  numof_broadcast_request(142, crit_e::reject),
  broadcast_to_be_cancelled_list(148, crit_e::reject),
  cancel_all_warning_msgs_ind(157, crit_e::reject),
  notif_info(220, crit_e::reject)
{
}
SRSASN_CODE pws_cancel_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += broadcast_to_be_cancelled_list_present ? 1 : 0;
  nof_ies += cancel_all_warning_msgs_ind_present ? 1 : 0;
  nof_ies += notif_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(numof_broadcast_request.pack(bref));
  if (broadcast_to_be_cancelled_list_present) {
    HANDLE_CODE(broadcast_to_be_cancelled_list.pack(bref));
  }
  if (cancel_all_warning_msgs_ind_present) {
    HANDLE_CODE(cancel_all_warning_msgs_ind.pack(bref));
  }
  if (notif_info_present) {
    HANDLE_CODE(notif_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 142: {
        nof_mandatory_ies--;
        numof_broadcast_request.id = id;
        HANDLE_CODE(numof_broadcast_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(numof_broadcast_request.value.unpack(bref));
        break;
      }
      case 148: {
        broadcast_to_be_cancelled_list_present = true;
        broadcast_to_be_cancelled_list.id      = id;
        HANDLE_CODE(broadcast_to_be_cancelled_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_to_be_cancelled_list.value.unpack(bref));
        break;
      }
      case 157: {
        cancel_all_warning_msgs_ind_present = true;
        cancel_all_warning_msgs_ind.id      = id;
        HANDLE_CODE(cancel_all_warning_msgs_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cancel_all_warning_msgs_ind.value.unpack(bref));
        break;
      }
      case 220: {
        notif_info_present = true;
        notif_info.id      = id;
        HANDLE_CODE(notif_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(notif_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_cancel_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  numof_broadcast_request.to_json(j);
  if (broadcast_to_be_cancelled_list_present) {
    j.write_fieldname("");
    broadcast_to_be_cancelled_list.to_json(j);
  }
  if (cancel_all_warning_msgs_ind_present) {
    j.write_fieldname("");
    cancel_all_warning_msgs_ind.to_json(j);
  }
  if (notif_info_present) {
    j.write_fieldname("");
    notif_info.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<pws_cancel_resp_ies_o>;

pws_cancel_resp_ies_container::pws_cancel_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_broadcast_cancelled_list(150, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE pws_cancel_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_broadcast_cancelled_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_broadcast_cancelled_list_present) {
    HANDLE_CODE(cells_broadcast_cancelled_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 150: {
        cells_broadcast_cancelled_list_present = true;
        cells_broadcast_cancelled_list.id      = id;
        HANDLE_CODE(cells_broadcast_cancelled_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_broadcast_cancelled_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_cancel_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_broadcast_cancelled_list_present) {
    j.write_fieldname("");
    cells_broadcast_cancelled_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<pws_fail_ind_ies_o>;

pws_fail_ind_ies_container::pws_fail_ind_ies_container() :
  transaction_id(78, crit_e::reject), pws_failed_nr_cgi_list(154, crit_e::reject)
{
}
SRSASN_CODE pws_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += pws_failed_nr_cgi_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (pws_failed_nr_cgi_list_present) {
    HANDLE_CODE(pws_failed_nr_cgi_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 154: {
        pws_failed_nr_cgi_list_present = true;
        pws_failed_nr_cgi_list.id      = id;
        HANDLE_CODE(pws_failed_nr_cgi_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pws_failed_nr_cgi_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (pws_failed_nr_cgi_list_present) {
    j.write_fieldname("");
    pws_failed_nr_cgi_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<pws_restart_ind_ies_o>;

pws_restart_ind_ies_container::pws_restart_ind_ies_container() :
  transaction_id(78, crit_e::reject), nr_cgi_list_for_restart_list(152, crit_e::reject)
{
}
SRSASN_CODE pws_restart_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(nr_cgi_list_for_restart_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_restart_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 152: {
        nof_mandatory_ies--;
        nr_cgi_list_for_restart_list.id = id;
        HANDLE_CODE(nr_cgi_list_for_restart_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi_list_for_restart_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_restart_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  nr_cgi_list_for_restart_list.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<paging_ies_o>;

paging_ies_container::paging_ies_container() :
  ue_id_idx_value(117, crit_e::reject),
  paging_id(127, crit_e::reject),
  paging_drx(114, crit_e::ignore),
  paging_prio(115, crit_e::ignore),
  paging_cell_list(113, crit_e::ignore),
  paging_origin(216, crit_e::ignore)
{
}
SRSASN_CODE paging_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += paging_drx_present ? 1 : 0;
  nof_ies += paging_prio_present ? 1 : 0;
  nof_ies += paging_origin_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(ue_id_idx_value.pack(bref));
  HANDLE_CODE(paging_id.pack(bref));
  if (paging_drx_present) {
    HANDLE_CODE(paging_drx.pack(bref));
  }
  if (paging_prio_present) {
    HANDLE_CODE(paging_prio.pack(bref));
  }
  HANDLE_CODE(paging_cell_list.pack(bref));
  if (paging_origin_present) {
    HANDLE_CODE(paging_origin.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 117: {
        nof_mandatory_ies--;
        ue_id_idx_value.id = id;
        HANDLE_CODE(ue_id_idx_value.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_id_idx_value.value.unpack(bref));
        break;
      }
      case 127: {
        nof_mandatory_ies--;
        paging_id.id = id;
        HANDLE_CODE(paging_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_id.value.unpack(bref));
        break;
      }
      case 114: {
        paging_drx_present = true;
        paging_drx.id      = id;
        HANDLE_CODE(paging_drx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_drx.value.unpack(bref));
        break;
      }
      case 115: {
        paging_prio_present = true;
        paging_prio.id      = id;
        HANDLE_CODE(paging_prio.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_prio.value.unpack(bref));
        break;
      }
      case 113: {
        nof_mandatory_ies--;
        paging_cell_list.id = id;
        HANDLE_CODE(paging_cell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_cell_list.value.unpack(bref));
        break;
      }
      case 216: {
        paging_origin_present = true;
        paging_origin.id      = id;
        HANDLE_CODE(paging_origin.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_origin.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void paging_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  ue_id_idx_value.to_json(j);
  j.write_fieldname("");
  paging_id.to_json(j);
  if (paging_drx_present) {
    j.write_fieldname("");
    paging_drx.to_json(j);
  }
  if (paging_prio_present) {
    j.write_fieldname("");
    paging_prio.to_json(j);
  }
  j.write_fieldname("");
  paging_cell_list.to_json(j);
  if (paging_origin_present) {
    j.write_fieldname("");
    paging_origin.to_json(j);
  }
  j.end_obj();
}

template <class valueT_>
private_ie_container_item_s<valueT_>::private_ie_container_item_s(private_ie_id_c id_, crit_e crit_) :
  id(id_), crit(crit_)

{
}
template <class valueT_>
SRSASN_CODE private_ie_container_item_s<valueT_>::pack(bit_ref& bref) const
{
  HANDLE_CODE(id.pack(bref));
  HANDLE_CODE(crit.pack(bref));
  {
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(value.pack(bref));
  }
  return SRSASN_SUCCESS;
}
template <class valueT_>
SRSASN_CODE private_ie_container_item_s<valueT_>::unpack(cbit_ref& bref)
{
  HANDLE_CODE(id.unpack(bref));
  HANDLE_CODE(crit.unpack(bref));
  {
    varlength_field_unpack_guard varlen_scope(bref, true);
    HANDLE_CODE(value.unpack(bref));
  }
  return SRSASN_SUCCESS;
}
template <class valueT_>
void private_ie_container_item_s<valueT_>::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("id");
  id.to_json(j);
  j.write_str("criticality", crit.to_string());
  j.end_obj();
}

SRSASN_CODE private_ie_container_empty_l::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  return SRSASN_SUCCESS;
}
SRSASN_CODE private_ie_container_empty_l::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);
  if (nof_ies > 0) {
    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void private_ie_container_empty_l::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}

// PrivateMessage ::= SEQUENCE
SRSASN_CODE private_msg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(private_ies.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE private_msg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(private_ies.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void private_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("PrivateMessage");
  j.write_fieldname("privateIEs");
  private_ies.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

template struct asn1::protocol_ie_field_s<rrc_delivery_report_ies_o>;

rrc_delivery_report_ies_container::rrc_delivery_report_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  rrc_delivery_status(185, crit_e::ignore),
  srb_id(64, crit_e::ignore)
{
}
SRSASN_CODE rrc_delivery_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(rrc_delivery_status.pack(bref));
  HANDLE_CODE(srb_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_delivery_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 185: {
        nof_mandatory_ies--;
        rrc_delivery_status.id = id;
        HANDLE_CODE(rrc_delivery_status.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status.value.unpack(bref));
        break;
      }
      case 64: {
        nof_mandatory_ies--;
        srb_id.id = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void rrc_delivery_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  rrc_delivery_status.to_json(j);
  j.write_fieldname("");
  srb_id.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<reset_ies_o>;

reset_ies_container::reset_ies_container() :
  transaction_id(78, crit_e::reject), cause(0, crit_e::ignore), reset_type(48, crit_e::reject)
{
}
SRSASN_CODE reset_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  HANDLE_CODE(reset_type.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 48: {
        nof_mandatory_ies--;
        reset_type.id = id;
        HANDLE_CODE(reset_type.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(reset_type.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void reset_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.write_fieldname("");
  reset_type.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<reset_ack_ies_o>;

reset_ack_ies_container::reset_ack_ies_container() :
  transaction_id(78, crit_e::reject),
  ue_associated_lc_f1_conn_list_res_ack(81, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE reset_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ue_associated_lc_f1_conn_list_res_ack_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (ue_associated_lc_f1_conn_list_res_ack_present) {
    HANDLE_CODE(ue_associated_lc_f1_conn_list_res_ack.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 81: {
        ue_associated_lc_f1_conn_list_res_ack_present = true;
        ue_associated_lc_f1_conn_list_res_ack.id      = id;
        HANDLE_CODE(ue_associated_lc_f1_conn_list_res_ack.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_associated_lc_f1_conn_list_res_ack.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void reset_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (ue_associated_lc_f1_conn_list_res_ack_present) {
    j.write_fieldname("");
    ue_associated_lc_f1_conn_list_res_ack.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<sys_info_delivery_cmd_ies_o>;

sys_info_delivery_cmd_ies_container::sys_info_delivery_cmd_ies_container() :
  transaction_id(78, crit_e::reject),
  nr_cgi(111, crit_e::reject),
  sitype_list(116, crit_e::reject),
  confirmed_ue_id(156, crit_e::reject)
{
}
SRSASN_CODE sys_info_delivery_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(nr_cgi.pack(bref));
  HANDLE_CODE(sitype_list.pack(bref));
  HANDLE_CODE(confirmed_ue_id.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_delivery_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        nr_cgi.id = id;
        HANDLE_CODE(nr_cgi.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.value.unpack(bref));
        break;
      }
      case 116: {
        nof_mandatory_ies--;
        sitype_list.id = id;
        HANDLE_CODE(sitype_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sitype_list.value.unpack(bref));
        break;
      }
      case 156: {
        nof_mandatory_ies--;
        confirmed_ue_id.id = id;
        HANDLE_CODE(confirmed_ue_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(confirmed_ue_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void sys_info_delivery_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  nr_cgi.to_json(j);
  j.write_fieldname("");
  sitype_list.to_json(j);
  j.write_fieldname("");
  confirmed_ue_id.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_mod_confirm_ies_o>;

ue_context_mod_confirm_ies_container::ue_context_mod_confirm_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  res_coordination_transfer_container(49, crit_e::ignore),
  drbs_modified_conf_list(19, crit_e::ignore),
  rrc_container(50, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore),
  execute_dupl(109, crit_e::ignore),
  res_coordination_transfer_info(195, crit_e::ignore)
{
}
SRSASN_CODE ue_context_mod_confirm_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += drbs_modified_conf_list_present ? 1 : 0;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += res_coordination_transfer_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (drbs_modified_conf_list_present) {
    HANDLE_CODE(drbs_modified_conf_list.pack(bref));
  }
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  if (res_coordination_transfer_info_present) {
    HANDLE_CODE(res_coordination_transfer_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_confirm_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 19: {
        drbs_modified_conf_list_present = true;
        drbs_modified_conf_list.id      = id;
        HANDLE_CODE(drbs_modified_conf_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_modified_conf_list.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 195: {
        res_coordination_transfer_info_present = true;
        res_coordination_transfer_info.id      = id;
        HANDLE_CODE(res_coordination_transfer_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_info.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_confirm_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (drbs_modified_conf_list_present) {
    j.write_fieldname("");
    drbs_modified_conf_list.to_json(j);
  }
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  if (res_coordination_transfer_info_present) {
    j.write_fieldname("");
    res_coordination_transfer_info.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_mod_fail_ies_o>;

ue_context_mod_fail_ies_container::ue_context_mod_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE ue_context_mod_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_mod_refuse_ies_o>;

ue_context_mod_refuse_ies_container::ue_context_mod_refuse_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE ue_context_mod_refuse_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_refuse_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_refuse_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_mod_request_ies_o>;

ue_context_mod_request_ies_container::ue_context_mod_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  sp_cell_id(63, crit_e::ignore),
  serv_cell_idx(107, crit_e::reject),
  sp_cell_ul_cfg(96, crit_e::ignore),
  drx_cycle(38, crit_e::ignore),
  cu_to_du_rrc_info(9, crit_e::reject),
  tx_action_ind(79, crit_e::ignore),
  res_coordination_transfer_container(49, crit_e::ignore),
  rrc_recfg_complete_ind(87, crit_e::ignore),
  rrc_container(50, crit_e::reject),
  scell_to_be_setup_mod_list(56, crit_e::ignore),
  scell_to_be_remd_list(52, crit_e::ignore),
  srbs_to_be_setup_mod_list(76, crit_e::reject),
  drbs_to_be_setup_mod_list(37, crit_e::reject),
  drbs_to_be_modified_list(31, crit_e::reject),
  srbs_to_be_released_list(72, crit_e::reject),
  drbs_to_be_released_list(33, crit_e::reject),
  inactivity_monitoring_request(97, crit_e::reject),
  rat_freq_prio_info(108, crit_e::reject),
  drx_cfg_ind(159, crit_e::ignore),
  rlc_fail_ind(174, crit_e::ignore),
  ul_tx_direct_current_list_info(175, crit_e::ignore),
  gnb_du_cfg_query(162, crit_e::reject),
  gnb_du_ue_ambr_ul(158, crit_e::ignore),
  execute_dupl(109, crit_e::ignore),
  rrc_delivery_status_request(184, crit_e::ignore),
  res_coordination_transfer_info(195, crit_e::ignore),
  serving_cell_mo(182, crit_e::ignore),
  needfor_gap(215, crit_e::ignore),
  full_cfg(94, crit_e::reject)
{
}
SRSASN_CODE ue_context_mod_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += sp_cell_id_present ? 1 : 0;
  nof_ies += serv_cell_idx_present ? 1 : 0;
  nof_ies += sp_cell_ul_cfg_present ? 1 : 0;
  nof_ies += drx_cycle_present ? 1 : 0;
  nof_ies += cu_to_du_rrc_info_present ? 1 : 0;
  nof_ies += tx_action_ind_present ? 1 : 0;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += rrc_recfg_complete_ind_present ? 1 : 0;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += scell_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += scell_to_be_remd_list_present ? 1 : 0;
  nof_ies += srbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_to_be_modified_list_present ? 1 : 0;
  nof_ies += srbs_to_be_released_list_present ? 1 : 0;
  nof_ies += drbs_to_be_released_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_request_present ? 1 : 0;
  nof_ies += rat_freq_prio_info_present ? 1 : 0;
  nof_ies += drx_cfg_ind_present ? 1 : 0;
  nof_ies += rlc_fail_ind_present ? 1 : 0;
  nof_ies += ul_tx_direct_current_list_info_present ? 1 : 0;
  nof_ies += gnb_du_cfg_query_present ? 1 : 0;
  nof_ies += gnb_du_ue_ambr_ul_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  nof_ies += res_coordination_transfer_info_present ? 1 : 0;
  nof_ies += serving_cell_mo_present ? 1 : 0;
  nof_ies += needfor_gap_present ? 1 : 0;
  nof_ies += full_cfg_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (sp_cell_id_present) {
    HANDLE_CODE(sp_cell_id.pack(bref));
  }
  if (serv_cell_idx_present) {
    HANDLE_CODE(serv_cell_idx.pack(bref));
  }
  if (sp_cell_ul_cfg_present) {
    HANDLE_CODE(sp_cell_ul_cfg.pack(bref));
  }
  if (drx_cycle_present) {
    HANDLE_CODE(drx_cycle.pack(bref));
  }
  if (cu_to_du_rrc_info_present) {
    HANDLE_CODE(cu_to_du_rrc_info.pack(bref));
  }
  if (tx_action_ind_present) {
    HANDLE_CODE(tx_action_ind.pack(bref));
  }
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (rrc_recfg_complete_ind_present) {
    HANDLE_CODE(rrc_recfg_complete_ind.pack(bref));
  }
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (scell_to_be_setup_mod_list_present) {
    HANDLE_CODE(scell_to_be_setup_mod_list.pack(bref));
  }
  if (scell_to_be_remd_list_present) {
    HANDLE_CODE(scell_to_be_remd_list.pack(bref));
  }
  if (srbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(srbs_to_be_setup_mod_list.pack(bref));
  }
  if (drbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(drbs_to_be_setup_mod_list.pack(bref));
  }
  if (drbs_to_be_modified_list_present) {
    HANDLE_CODE(drbs_to_be_modified_list.pack(bref));
  }
  if (srbs_to_be_released_list_present) {
    HANDLE_CODE(srbs_to_be_released_list.pack(bref));
  }
  if (drbs_to_be_released_list_present) {
    HANDLE_CODE(drbs_to_be_released_list.pack(bref));
  }
  if (inactivity_monitoring_request_present) {
    HANDLE_CODE(inactivity_monitoring_request.pack(bref));
  }
  if (rat_freq_prio_info_present) {
    HANDLE_CODE(rat_freq_prio_info.pack(bref));
  }
  if (drx_cfg_ind_present) {
    HANDLE_CODE(drx_cfg_ind.pack(bref));
  }
  if (rlc_fail_ind_present) {
    HANDLE_CODE(rlc_fail_ind.pack(bref));
  }
  if (ul_tx_direct_current_list_info_present) {
    HANDLE_CODE(ul_tx_direct_current_list_info.pack(bref));
  }
  if (gnb_du_cfg_query_present) {
    HANDLE_CODE(gnb_du_cfg_query.pack(bref));
  }
  if (gnb_du_ue_ambr_ul_present) {
    HANDLE_CODE(gnb_du_ue_ambr_ul.pack(bref));
  }
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }
  if (res_coordination_transfer_info_present) {
    HANDLE_CODE(res_coordination_transfer_info.pack(bref));
  }
  if (serving_cell_mo_present) {
    HANDLE_CODE(serving_cell_mo.pack(bref));
  }
  if (needfor_gap_present) {
    HANDLE_CODE(needfor_gap.pack(bref));
  }
  if (full_cfg_present) {
    HANDLE_CODE(full_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 63: {
        sp_cell_id_present = true;
        sp_cell_id.id      = id;
        HANDLE_CODE(sp_cell_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_id.value.unpack(bref));
        break;
      }
      case 107: {
        serv_cell_idx_present = true;
        serv_cell_idx.id      = id;
        HANDLE_CODE(serv_cell_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serv_cell_idx.value.unpack(bref));
        break;
      }
      case 96: {
        sp_cell_ul_cfg_present = true;
        sp_cell_ul_cfg.id      = id;
        HANDLE_CODE(sp_cell_ul_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_ul_cfg.value.unpack(bref));
        break;
      }
      case 38: {
        drx_cycle_present = true;
        drx_cycle.id      = id;
        HANDLE_CODE(drx_cycle.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_cycle.value.unpack(bref));
        break;
      }
      case 9: {
        cu_to_du_rrc_info_present = true;
        cu_to_du_rrc_info.id      = id;
        HANDLE_CODE(cu_to_du_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cu_to_du_rrc_info.value.unpack(bref));
        break;
      }
      case 79: {
        tx_action_ind_present = true;
        tx_action_ind.id      = id;
        HANDLE_CODE(tx_action_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(tx_action_ind.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 87: {
        rrc_recfg_complete_ind_present = true;
        rrc_recfg_complete_ind.id      = id;
        HANDLE_CODE(rrc_recfg_complete_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_recfg_complete_ind.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 56: {
        scell_to_be_setup_mod_list_present = true;
        scell_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(scell_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 52: {
        scell_to_be_remd_list_present = true;
        scell_to_be_remd_list.id      = id;
        HANDLE_CODE(scell_to_be_remd_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_to_be_remd_list.value.unpack(bref));
        break;
      }
      case 76: {
        srbs_to_be_setup_mod_list_present = true;
        srbs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(srbs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 37: {
        drbs_to_be_setup_mod_list_present = true;
        drbs_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(drbs_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 31: {
        drbs_to_be_modified_list_present = true;
        drbs_to_be_modified_list.id      = id;
        HANDLE_CODE(drbs_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 72: {
        srbs_to_be_released_list_present = true;
        srbs_to_be_released_list.id      = id;
        HANDLE_CODE(srbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_to_be_released_list.value.unpack(bref));
        break;
      }
      case 33: {
        drbs_to_be_released_list_present = true;
        drbs_to_be_released_list.id      = id;
        HANDLE_CODE(drbs_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_released_list.value.unpack(bref));
        break;
      }
      case 97: {
        inactivity_monitoring_request_present = true;
        inactivity_monitoring_request.id      = id;
        HANDLE_CODE(inactivity_monitoring_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_request.value.unpack(bref));
        break;
      }
      case 108: {
        rat_freq_prio_info_present = true;
        rat_freq_prio_info.id      = id;
        HANDLE_CODE(rat_freq_prio_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rat_freq_prio_info.value.unpack(bref));
        break;
      }
      case 159: {
        drx_cfg_ind_present = true;
        drx_cfg_ind.id      = id;
        HANDLE_CODE(drx_cfg_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_cfg_ind.value.unpack(bref));
        break;
      }
      case 174: {
        rlc_fail_ind_present = true;
        rlc_fail_ind.id      = id;
        HANDLE_CODE(rlc_fail_ind.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rlc_fail_ind.value.unpack(bref));
        break;
      }
      case 175: {
        ul_tx_direct_current_list_info_present = true;
        ul_tx_direct_current_list_info.id      = id;
        HANDLE_CODE(ul_tx_direct_current_list_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_tx_direct_current_list_info.value.unpack(bref));
        break;
      }
      case 162: {
        gnb_du_cfg_query_present = true;
        gnb_du_cfg_query.id      = id;
        HANDLE_CODE(gnb_du_cfg_query.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_cfg_query.value.unpack(bref));
        break;
      }
      case 158: {
        gnb_du_ue_ambr_ul_present = true;
        gnb_du_ue_ambr_ul.id      = id;
        HANDLE_CODE(gnb_du_ue_ambr_ul.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_ambr_ul.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      case 195: {
        res_coordination_transfer_info_present = true;
        res_coordination_transfer_info.id      = id;
        HANDLE_CODE(res_coordination_transfer_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_info.value.unpack(bref));
        break;
      }
      case 182: {
        serving_cell_mo_present = true;
        serving_cell_mo.id      = id;
        HANDLE_CODE(serving_cell_mo.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo.value.unpack(bref));
        break;
      }
      case 215: {
        needfor_gap_present = true;
        needfor_gap.id      = id;
        HANDLE_CODE(needfor_gap.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(needfor_gap.value.unpack(bref));
        break;
      }
      case 94: {
        full_cfg_present = true;
        full_cfg.id      = id;
        HANDLE_CODE(full_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(full_cfg.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (sp_cell_id_present) {
    j.write_fieldname("");
    sp_cell_id.to_json(j);
  }
  if (serv_cell_idx_present) {
    j.write_fieldname("");
    serv_cell_idx.to_json(j);
  }
  if (sp_cell_ul_cfg_present) {
    j.write_fieldname("");
    sp_cell_ul_cfg.to_json(j);
  }
  if (drx_cycle_present) {
    j.write_fieldname("");
    drx_cycle.to_json(j);
  }
  if (cu_to_du_rrc_info_present) {
    j.write_fieldname("");
    cu_to_du_rrc_info.to_json(j);
  }
  if (tx_action_ind_present) {
    j.write_fieldname("");
    tx_action_ind.to_json(j);
  }
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (rrc_recfg_complete_ind_present) {
    j.write_fieldname("");
    rrc_recfg_complete_ind.to_json(j);
  }
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (scell_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    scell_to_be_setup_mod_list.to_json(j);
  }
  if (scell_to_be_remd_list_present) {
    j.write_fieldname("");
    scell_to_be_remd_list.to_json(j);
  }
  if (srbs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    srbs_to_be_setup_mod_list.to_json(j);
  }
  if (drbs_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    drbs_to_be_setup_mod_list.to_json(j);
  }
  if (drbs_to_be_modified_list_present) {
    j.write_fieldname("");
    drbs_to_be_modified_list.to_json(j);
  }
  if (srbs_to_be_released_list_present) {
    j.write_fieldname("");
    srbs_to_be_released_list.to_json(j);
  }
  if (drbs_to_be_released_list_present) {
    j.write_fieldname("");
    drbs_to_be_released_list.to_json(j);
  }
  if (inactivity_monitoring_request_present) {
    j.write_fieldname("");
    inactivity_monitoring_request.to_json(j);
  }
  if (rat_freq_prio_info_present) {
    j.write_fieldname("");
    rat_freq_prio_info.to_json(j);
  }
  if (drx_cfg_ind_present) {
    j.write_fieldname("");
    drx_cfg_ind.to_json(j);
  }
  if (rlc_fail_ind_present) {
    j.write_fieldname("");
    rlc_fail_ind.to_json(j);
  }
  if (ul_tx_direct_current_list_info_present) {
    j.write_fieldname("");
    ul_tx_direct_current_list_info.to_json(j);
  }
  if (gnb_du_cfg_query_present) {
    j.write_fieldname("");
    gnb_du_cfg_query.to_json(j);
  }
  if (gnb_du_ue_ambr_ul_present) {
    j.write_fieldname("");
    gnb_du_ue_ambr_ul.to_json(j);
  }
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  if (res_coordination_transfer_info_present) {
    j.write_fieldname("");
    res_coordination_transfer_info.to_json(j);
  }
  if (serving_cell_mo_present) {
    j.write_fieldname("");
    serving_cell_mo.to_json(j);
  }
  if (needfor_gap_present) {
    j.write_fieldname("");
    needfor_gap.to_json(j);
  }
  if (full_cfg_present) {
    j.write_fieldname("");
    full_cfg.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_mod_required_ies_o>;

ue_context_mod_required_ies_container::ue_context_mod_required_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  res_coordination_transfer_container(49, crit_e::ignore),
  du_to_cu_rrc_info(39, crit_e::reject),
  drbs_required_to_be_modified_list(23, crit_e::reject),
  srbs_required_to_be_released_list(70, crit_e::reject),
  drbs_required_to_be_released_list(25, crit_e::reject),
  cause(0, crit_e::ignore)
{
}
SRSASN_CODE ue_context_mod_required_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += du_to_cu_rrc_info_present ? 1 : 0;
  nof_ies += drbs_required_to_be_modified_list_present ? 1 : 0;
  nof_ies += srbs_required_to_be_released_list_present ? 1 : 0;
  nof_ies += drbs_required_to_be_released_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (du_to_cu_rrc_info_present) {
    HANDLE_CODE(du_to_cu_rrc_info.pack(bref));
  }
  if (drbs_required_to_be_modified_list_present) {
    HANDLE_CODE(drbs_required_to_be_modified_list.pack(bref));
  }
  if (srbs_required_to_be_released_list_present) {
    HANDLE_CODE(srbs_required_to_be_released_list.pack(bref));
  }
  if (drbs_required_to_be_released_list_present) {
    HANDLE_CODE(drbs_required_to_be_released_list.pack(bref));
  }
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_required_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 39: {
        du_to_cu_rrc_info_present = true;
        du_to_cu_rrc_info.id      = id;
        HANDLE_CODE(du_to_cu_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_info.value.unpack(bref));
        break;
      }
      case 23: {
        drbs_required_to_be_modified_list_present = true;
        drbs_required_to_be_modified_list.id      = id;
        HANDLE_CODE(drbs_required_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_required_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 70: {
        srbs_required_to_be_released_list_present = true;
        srbs_required_to_be_released_list.id      = id;
        HANDLE_CODE(srbs_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 25: {
        drbs_required_to_be_released_list_present = true;
        drbs_required_to_be_released_list.id      = id;
        HANDLE_CODE(drbs_required_to_be_released_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_required_to_be_released_list.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_required_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (du_to_cu_rrc_info_present) {
    j.write_fieldname("");
    du_to_cu_rrc_info.to_json(j);
  }
  if (drbs_required_to_be_modified_list_present) {
    j.write_fieldname("");
    drbs_required_to_be_modified_list.to_json(j);
  }
  if (srbs_required_to_be_released_list_present) {
    j.write_fieldname("");
    srbs_required_to_be_released_list.to_json(j);
  }
  if (drbs_required_to_be_released_list_present) {
    j.write_fieldname("");
    drbs_required_to_be_released_list.to_json(j);
  }
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_mod_resp_ies_o>;

ue_context_mod_resp_ies_container::ue_context_mod_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  res_coordination_transfer_container(49, crit_e::ignore),
  du_to_cu_rrc_info(39, crit_e::reject),
  drbs_setup_mod_list(29, crit_e::ignore),
  drbs_modified_list(21, crit_e::ignore),
  srbs_failed_to_be_setup_mod_list(68, crit_e::ignore),
  drbs_failed_to_be_setup_mod_list(17, crit_e::ignore),
  scell_failedto_setup_mod_list(85, crit_e::ignore),
  drbs_failed_to_be_modified_list(13, crit_e::ignore),
  inactivity_monitoring_resp(98, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  c_rnti(95, crit_e::ignore),
  associated_scell_list(198, crit_e::ignore),
  srbs_setup_mod_list(204, crit_e::ignore),
  srbs_modified_list(206, crit_e::ignore),
  full_cfg(94, crit_e::reject)
{
}
SRSASN_CODE ue_context_mod_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += du_to_cu_rrc_info_present ? 1 : 0;
  nof_ies += drbs_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_modified_list_present ? 1 : 0;
  nof_ies += srbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += scell_failedto_setup_mod_list_present ? 1 : 0;
  nof_ies += drbs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_resp_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += c_rnti_present ? 1 : 0;
  nof_ies += associated_scell_list_present ? 1 : 0;
  nof_ies += srbs_setup_mod_list_present ? 1 : 0;
  nof_ies += srbs_modified_list_present ? 1 : 0;
  nof_ies += full_cfg_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (du_to_cu_rrc_info_present) {
    HANDLE_CODE(du_to_cu_rrc_info.pack(bref));
  }
  if (drbs_setup_mod_list_present) {
    HANDLE_CODE(drbs_setup_mod_list.pack(bref));
  }
  if (drbs_modified_list_present) {
    HANDLE_CODE(drbs_modified_list.pack(bref));
  }
  if (srbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(srbs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (drbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(drbs_failed_to_be_setup_mod_list.pack(bref));
  }
  if (scell_failedto_setup_mod_list_present) {
    HANDLE_CODE(scell_failedto_setup_mod_list.pack(bref));
  }
  if (drbs_failed_to_be_modified_list_present) {
    HANDLE_CODE(drbs_failed_to_be_modified_list.pack(bref));
  }
  if (inactivity_monitoring_resp_present) {
    HANDLE_CODE(inactivity_monitoring_resp.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (c_rnti_present) {
    HANDLE_CODE(c_rnti.pack(bref));
  }
  if (associated_scell_list_present) {
    HANDLE_CODE(associated_scell_list.pack(bref));
  }
  if (srbs_setup_mod_list_present) {
    HANDLE_CODE(srbs_setup_mod_list.pack(bref));
  }
  if (srbs_modified_list_present) {
    HANDLE_CODE(srbs_modified_list.pack(bref));
  }
  if (full_cfg_present) {
    HANDLE_CODE(full_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_mod_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 39: {
        du_to_cu_rrc_info_present = true;
        du_to_cu_rrc_info.id      = id;
        HANDLE_CODE(du_to_cu_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_info.value.unpack(bref));
        break;
      }
      case 29: {
        drbs_setup_mod_list_present = true;
        drbs_setup_mod_list.id      = id;
        HANDLE_CODE(drbs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 21: {
        drbs_modified_list_present = true;
        drbs_modified_list.id      = id;
        HANDLE_CODE(drbs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_modified_list.value.unpack(bref));
        break;
      }
      case 68: {
        srbs_failed_to_be_setup_mod_list_present = true;
        srbs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(srbs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 17: {
        drbs_failed_to_be_setup_mod_list_present = true;
        drbs_failed_to_be_setup_mod_list.id      = id;
        HANDLE_CODE(drbs_failed_to_be_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_failed_to_be_setup_mod_list.value.unpack(bref));
        break;
      }
      case 85: {
        scell_failedto_setup_mod_list_present = true;
        scell_failedto_setup_mod_list.id      = id;
        HANDLE_CODE(scell_failedto_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_failedto_setup_mod_list.value.unpack(bref));
        break;
      }
      case 13: {
        drbs_failed_to_be_modified_list_present = true;
        drbs_failed_to_be_modified_list.id      = id;
        HANDLE_CODE(drbs_failed_to_be_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_failed_to_be_modified_list.value.unpack(bref));
        break;
      }
      case 98: {
        inactivity_monitoring_resp_present = true;
        inactivity_monitoring_resp.id      = id;
        HANDLE_CODE(inactivity_monitoring_resp.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_resp.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 95: {
        c_rnti_present = true;
        c_rnti.id      = id;
        HANDLE_CODE(c_rnti.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(c_rnti.value.unpack(bref));
        break;
      }
      case 198: {
        associated_scell_list_present = true;
        associated_scell_list.id      = id;
        HANDLE_CODE(associated_scell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(associated_scell_list.value.unpack(bref));
        break;
      }
      case 204: {
        srbs_setup_mod_list_present = true;
        srbs_setup_mod_list.id      = id;
        HANDLE_CODE(srbs_setup_mod_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_setup_mod_list.value.unpack(bref));
        break;
      }
      case 206: {
        srbs_modified_list_present = true;
        srbs_modified_list.id      = id;
        HANDLE_CODE(srbs_modified_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_modified_list.value.unpack(bref));
        break;
      }
      case 94: {
        full_cfg_present = true;
        full_cfg.id      = id;
        HANDLE_CODE(full_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(full_cfg.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_mod_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (du_to_cu_rrc_info_present) {
    j.write_fieldname("");
    du_to_cu_rrc_info.to_json(j);
  }
  if (drbs_setup_mod_list_present) {
    j.write_fieldname("");
    drbs_setup_mod_list.to_json(j);
  }
  if (drbs_modified_list_present) {
    j.write_fieldname("");
    drbs_modified_list.to_json(j);
  }
  if (srbs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    srbs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (drbs_failed_to_be_setup_mod_list_present) {
    j.write_fieldname("");
    drbs_failed_to_be_setup_mod_list.to_json(j);
  }
  if (scell_failedto_setup_mod_list_present) {
    j.write_fieldname("");
    scell_failedto_setup_mod_list.to_json(j);
  }
  if (drbs_failed_to_be_modified_list_present) {
    j.write_fieldname("");
    drbs_failed_to_be_modified_list.to_json(j);
  }
  if (inactivity_monitoring_resp_present) {
    j.write_fieldname("");
    inactivity_monitoring_resp.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (c_rnti_present) {
    j.write_fieldname("");
    c_rnti.to_json(j);
  }
  if (associated_scell_list_present) {
    j.write_fieldname("");
    associated_scell_list.to_json(j);
  }
  if (srbs_setup_mod_list_present) {
    j.write_fieldname("");
    srbs_setup_mod_list.to_json(j);
  }
  if (srbs_modified_list_present) {
    j.write_fieldname("");
    srbs_modified_list.to_json(j);
  }
  if (full_cfg_present) {
    j.write_fieldname("");
    full_cfg.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_release_cmd_ies_o>;

ue_context_release_cmd_ies_container::ue_context_release_cmd_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  cause(0, crit_e::ignore),
  rrc_container(50, crit_e::ignore),
  srb_id(64, crit_e::ignore),
  old_gnb_du_ue_f1ap_id(47, crit_e::ignore),
  execute_dupl(109, crit_e::ignore),
  rrc_delivery_status_request(184, crit_e::ignore)
{
}
SRSASN_CODE ue_context_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += srb_id_present ? 1 : 0;
  nof_ies += old_gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += execute_dupl_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (srb_id_present) {
    HANDLE_CODE(srb_id.pack(bref));
  }
  if (old_gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(old_gnb_du_ue_f1ap_id.pack(bref));
  }
  if (execute_dupl_present) {
    HANDLE_CODE(execute_dupl.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 64: {
        srb_id_present = true;
        srb_id.id      = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      case 47: {
        old_gnb_du_ue_f1ap_id_present = true;
        old_gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(old_gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 109: {
        execute_dupl_present = true;
        execute_dupl.id      = id;
        HANDLE_CODE(execute_dupl.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(execute_dupl.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (srb_id_present) {
    j.write_fieldname("");
    srb_id.to_json(j);
  }
  if (old_gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    old_gnb_du_ue_f1ap_id.to_json(j);
  }
  if (execute_dupl_present) {
    j.write_fieldname("");
    execute_dupl.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_release_complete_ies_o>;

ue_context_release_complete_ies_container::ue_context_release_complete_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), crit_diagnostics(7, crit_e::ignore)
{
}
SRSASN_CODE ue_context_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_release_request_ies_o>;

ue_context_release_request_ies_container::ue_context_release_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), cause(0, crit_e::ignore)
{
}
SRSASN_CODE ue_context_release_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(cause.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_release_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_release_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  cause.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_setup_fail_ies_o>;

ue_context_setup_fail_ies_container::ue_context_setup_fail_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::ignore),
  cause(0, crit_e::ignore),
  crit_diagnostics(7, crit_e::ignore),
  potential_sp_cell_list(92, crit_e::ignore)
{
}
SRSASN_CODE ue_context_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += potential_sp_cell_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  }
  HANDLE_CODE(cause.pack(bref));
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (potential_sp_cell_list_present) {
    HANDLE_CODE(potential_sp_cell_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        gnb_du_ue_f1ap_id_present = true;
        gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        cause.id = id;
        HANDLE_CODE(cause.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 92: {
        potential_sp_cell_list_present = true;
        potential_sp_cell_list.id      = id;
        HANDLE_CODE(potential_sp_cell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(potential_sp_cell_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  if (gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_ue_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (potential_sp_cell_list_present) {
    j.write_fieldname("");
    potential_sp_cell_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_setup_request_ies_o>;

ue_context_setup_request_ies_container::ue_context_setup_request_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::ignore),
  sp_cell_id(63, crit_e::reject),
  serv_cell_idx(107, crit_e::reject),
  sp_cell_ul_cfg(96, crit_e::ignore),
  cu_to_du_rrc_info(9, crit_e::reject),
  candidate_sp_cell_list(90, crit_e::ignore),
  drx_cycle(38, crit_e::ignore),
  res_coordination_transfer_container(49, crit_e::ignore),
  scell_to_be_setup_list(54, crit_e::ignore),
  srbs_to_be_setup_list(74, crit_e::reject),
  drbs_to_be_setup_list(35, crit_e::reject),
  inactivity_monitoring_request(97, crit_e::reject),
  rat_freq_prio_info(108, crit_e::reject),
  rrc_container(50, crit_e::ignore),
  masked_imeisv(126, crit_e::ignore),
  serving_plmn(165, crit_e::ignore),
  gnb_du_ue_ambr_ul(158, crit_e::ignore),
  rrc_delivery_status_request(184, crit_e::ignore),
  res_coordination_transfer_info(195, crit_e::ignore),
  serving_cell_mo(182, crit_e::ignore),
  new_gnb_cu_ue_f1ap_id(217, crit_e::reject),
  ran_ue_id(226, crit_e::ignore)
{
}
SRSASN_CODE ue_context_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += sp_cell_ul_cfg_present ? 1 : 0;
  nof_ies += candidate_sp_cell_list_present ? 1 : 0;
  nof_ies += drx_cycle_present ? 1 : 0;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += scell_to_be_setup_list_present ? 1 : 0;
  nof_ies += srbs_to_be_setup_list_present ? 1 : 0;
  nof_ies += drbs_to_be_setup_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_request_present ? 1 : 0;
  nof_ies += rat_freq_prio_info_present ? 1 : 0;
  nof_ies += rrc_container_present ? 1 : 0;
  nof_ies += masked_imeisv_present ? 1 : 0;
  nof_ies += serving_plmn_present ? 1 : 0;
  nof_ies += gnb_du_ue_ambr_ul_present ? 1 : 0;
  nof_ies += rrc_delivery_status_request_present ? 1 : 0;
  nof_ies += res_coordination_transfer_info_present ? 1 : 0;
  nof_ies += serving_cell_mo_present ? 1 : 0;
  nof_ies += new_gnb_cu_ue_f1ap_id_present ? 1 : 0;
  nof_ies += ran_ue_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  }
  HANDLE_CODE(sp_cell_id.pack(bref));
  HANDLE_CODE(serv_cell_idx.pack(bref));
  if (sp_cell_ul_cfg_present) {
    HANDLE_CODE(sp_cell_ul_cfg.pack(bref));
  }
  HANDLE_CODE(cu_to_du_rrc_info.pack(bref));
  if (candidate_sp_cell_list_present) {
    HANDLE_CODE(candidate_sp_cell_list.pack(bref));
  }
  if (drx_cycle_present) {
    HANDLE_CODE(drx_cycle.pack(bref));
  }
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (scell_to_be_setup_list_present) {
    HANDLE_CODE(scell_to_be_setup_list.pack(bref));
  }
  if (srbs_to_be_setup_list_present) {
    HANDLE_CODE(srbs_to_be_setup_list.pack(bref));
  }
  if (drbs_to_be_setup_list_present) {
    HANDLE_CODE(drbs_to_be_setup_list.pack(bref));
  }
  if (inactivity_monitoring_request_present) {
    HANDLE_CODE(inactivity_monitoring_request.pack(bref));
  }
  if (rat_freq_prio_info_present) {
    HANDLE_CODE(rat_freq_prio_info.pack(bref));
  }
  if (rrc_container_present) {
    HANDLE_CODE(rrc_container.pack(bref));
  }
  if (masked_imeisv_present) {
    HANDLE_CODE(masked_imeisv.pack(bref));
  }
  if (serving_plmn_present) {
    HANDLE_CODE(serving_plmn.pack(bref));
  }
  if (gnb_du_ue_ambr_ul_present) {
    HANDLE_CODE(gnb_du_ue_ambr_ul.pack(bref));
  }
  if (rrc_delivery_status_request_present) {
    HANDLE_CODE(rrc_delivery_status_request.pack(bref));
  }
  if (res_coordination_transfer_info_present) {
    HANDLE_CODE(res_coordination_transfer_info.pack(bref));
  }
  if (serving_cell_mo_present) {
    HANDLE_CODE(serving_cell_mo.pack(bref));
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(new_gnb_cu_ue_f1ap_id.pack(bref));
  }
  if (ran_ue_id_present) {
    HANDLE_CODE(ran_ue_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        gnb_du_ue_f1ap_id_present = true;
        gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 63: {
        nof_mandatory_ies--;
        sp_cell_id.id = id;
        HANDLE_CODE(sp_cell_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_id.value.unpack(bref));
        break;
      }
      case 107: {
        nof_mandatory_ies--;
        serv_cell_idx.id = id;
        HANDLE_CODE(serv_cell_idx.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serv_cell_idx.value.unpack(bref));
        break;
      }
      case 96: {
        sp_cell_ul_cfg_present = true;
        sp_cell_ul_cfg.id      = id;
        HANDLE_CODE(sp_cell_ul_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sp_cell_ul_cfg.value.unpack(bref));
        break;
      }
      case 9: {
        nof_mandatory_ies--;
        cu_to_du_rrc_info.id = id;
        HANDLE_CODE(cu_to_du_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cu_to_du_rrc_info.value.unpack(bref));
        break;
      }
      case 90: {
        candidate_sp_cell_list_present = true;
        candidate_sp_cell_list.id      = id;
        HANDLE_CODE(candidate_sp_cell_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(candidate_sp_cell_list.value.unpack(bref));
        break;
      }
      case 38: {
        drx_cycle_present = true;
        drx_cycle.id      = id;
        HANDLE_CODE(drx_cycle.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drx_cycle.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 54: {
        scell_to_be_setup_list_present = true;
        scell_to_be_setup_list.id      = id;
        HANDLE_CODE(scell_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 74: {
        srbs_to_be_setup_list_present = true;
        srbs_to_be_setup_list.id      = id;
        HANDLE_CODE(srbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 35: {
        drbs_to_be_setup_list_present = true;
        drbs_to_be_setup_list.id      = id;
        HANDLE_CODE(drbs_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 97: {
        inactivity_monitoring_request_present = true;
        inactivity_monitoring_request.id      = id;
        HANDLE_CODE(inactivity_monitoring_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_request.value.unpack(bref));
        break;
      }
      case 108: {
        rat_freq_prio_info_present = true;
        rat_freq_prio_info.id      = id;
        HANDLE_CODE(rat_freq_prio_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rat_freq_prio_info.value.unpack(bref));
        break;
      }
      case 50: {
        rrc_container_present = true;
        rrc_container.id      = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 126: {
        masked_imeisv_present = true;
        masked_imeisv.id      = id;
        HANDLE_CODE(masked_imeisv.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(masked_imeisv.value.unpack(bref));
        break;
      }
      case 165: {
        serving_plmn_present = true;
        serving_plmn.id      = id;
        HANDLE_CODE(serving_plmn.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_plmn.value.unpack(bref));
        break;
      }
      case 158: {
        gnb_du_ue_ambr_ul_present = true;
        gnb_du_ue_ambr_ul.id      = id;
        HANDLE_CODE(gnb_du_ue_ambr_ul.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_ambr_ul.value.unpack(bref));
        break;
      }
      case 184: {
        rrc_delivery_status_request_present = true;
        rrc_delivery_status_request.id      = id;
        HANDLE_CODE(rrc_delivery_status_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status_request.value.unpack(bref));
        break;
      }
      case 195: {
        res_coordination_transfer_info_present = true;
        res_coordination_transfer_info.id      = id;
        HANDLE_CODE(res_coordination_transfer_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_info.value.unpack(bref));
        break;
      }
      case 182: {
        serving_cell_mo_present = true;
        serving_cell_mo.id      = id;
        HANDLE_CODE(serving_cell_mo.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(serving_cell_mo.value.unpack(bref));
        break;
      }
      case 217: {
        new_gnb_cu_ue_f1ap_id_present = true;
        new_gnb_cu_ue_f1ap_id.id      = id;
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(new_gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 226: {
        ran_ue_id_present = true;
        ran_ue_id.id      = id;
        HANDLE_CODE(ran_ue_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  if (gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    gnb_du_ue_f1ap_id.to_json(j);
  }
  j.write_fieldname("");
  sp_cell_id.to_json(j);
  j.write_fieldname("");
  serv_cell_idx.to_json(j);
  if (sp_cell_ul_cfg_present) {
    j.write_fieldname("");
    sp_cell_ul_cfg.to_json(j);
  }
  j.write_fieldname("");
  cu_to_du_rrc_info.to_json(j);
  if (candidate_sp_cell_list_present) {
    j.write_fieldname("");
    candidate_sp_cell_list.to_json(j);
  }
  if (drx_cycle_present) {
    j.write_fieldname("");
    drx_cycle.to_json(j);
  }
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (scell_to_be_setup_list_present) {
    j.write_fieldname("");
    scell_to_be_setup_list.to_json(j);
  }
  if (srbs_to_be_setup_list_present) {
    j.write_fieldname("");
    srbs_to_be_setup_list.to_json(j);
  }
  if (drbs_to_be_setup_list_present) {
    j.write_fieldname("");
    drbs_to_be_setup_list.to_json(j);
  }
  if (inactivity_monitoring_request_present) {
    j.write_fieldname("");
    inactivity_monitoring_request.to_json(j);
  }
  if (rat_freq_prio_info_present) {
    j.write_fieldname("");
    rat_freq_prio_info.to_json(j);
  }
  if (rrc_container_present) {
    j.write_fieldname("");
    rrc_container.to_json(j);
  }
  if (masked_imeisv_present) {
    j.write_fieldname("");
    masked_imeisv.to_json(j);
  }
  if (serving_plmn_present) {
    j.write_fieldname("");
    serving_plmn.to_json(j);
  }
  if (gnb_du_ue_ambr_ul_present) {
    j.write_fieldname("");
    gnb_du_ue_ambr_ul.to_json(j);
  }
  if (rrc_delivery_status_request_present) {
    j.write_fieldname("");
    rrc_delivery_status_request.to_json(j);
  }
  if (res_coordination_transfer_info_present) {
    j.write_fieldname("");
    res_coordination_transfer_info.to_json(j);
  }
  if (serving_cell_mo_present) {
    j.write_fieldname("");
    serving_cell_mo.to_json(j);
  }
  if (new_gnb_cu_ue_f1ap_id_present) {
    j.write_fieldname("");
    new_gnb_cu_ue_f1ap_id.to_json(j);
  }
  if (ran_ue_id_present) {
    j.write_fieldname("");
    ran_ue_id.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_context_setup_resp_ies_o>;

ue_context_setup_resp_ies_container::ue_context_setup_resp_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  du_to_cu_rrc_info(39, crit_e::reject),
  c_rnti(95, crit_e::ignore),
  res_coordination_transfer_container(49, crit_e::ignore),
  full_cfg(94, crit_e::reject),
  drbs_setup_list(27, crit_e::ignore),
  srbs_failed_to_be_setup_list(66, crit_e::ignore),
  drbs_failed_to_be_setup_list(15, crit_e::ignore),
  scell_failedto_setup_list(83, crit_e::ignore),
  inactivity_monitoring_resp(98, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  srbs_setup_list(202, crit_e::ignore)
{
}
SRSASN_CODE ue_context_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += c_rnti_present ? 1 : 0;
  nof_ies += res_coordination_transfer_container_present ? 1 : 0;
  nof_ies += full_cfg_present ? 1 : 0;
  nof_ies += drbs_setup_list_present ? 1 : 0;
  nof_ies += srbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += drbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += scell_failedto_setup_list_present ? 1 : 0;
  nof_ies += inactivity_monitoring_resp_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += srbs_setup_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(du_to_cu_rrc_info.pack(bref));
  if (c_rnti_present) {
    HANDLE_CODE(c_rnti.pack(bref));
  }
  if (res_coordination_transfer_container_present) {
    HANDLE_CODE(res_coordination_transfer_container.pack(bref));
  }
  if (full_cfg_present) {
    HANDLE_CODE(full_cfg.pack(bref));
  }
  if (drbs_setup_list_present) {
    HANDLE_CODE(drbs_setup_list.pack(bref));
  }
  if (srbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(srbs_failed_to_be_setup_list.pack(bref));
  }
  if (drbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(drbs_failed_to_be_setup_list.pack(bref));
  }
  if (scell_failedto_setup_list_present) {
    HANDLE_CODE(scell_failedto_setup_list.pack(bref));
  }
  if (inactivity_monitoring_resp_present) {
    HANDLE_CODE(inactivity_monitoring_resp.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (srbs_setup_list_present) {
    HANDLE_CODE(srbs_setup_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_context_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 39: {
        nof_mandatory_ies--;
        du_to_cu_rrc_info.id = id;
        HANDLE_CODE(du_to_cu_rrc_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_to_cu_rrc_info.value.unpack(bref));
        break;
      }
      case 95: {
        c_rnti_present = true;
        c_rnti.id      = id;
        HANDLE_CODE(c_rnti.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(c_rnti.value.unpack(bref));
        break;
      }
      case 49: {
        res_coordination_transfer_container_present = true;
        res_coordination_transfer_container.id      = id;
        HANDLE_CODE(res_coordination_transfer_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(res_coordination_transfer_container.value.unpack(bref));
        break;
      }
      case 94: {
        full_cfg_present = true;
        full_cfg.id      = id;
        HANDLE_CODE(full_cfg.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(full_cfg.value.unpack(bref));
        break;
      }
      case 27: {
        drbs_setup_list_present = true;
        drbs_setup_list.id      = id;
        HANDLE_CODE(drbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_setup_list.value.unpack(bref));
        break;
      }
      case 66: {
        srbs_failed_to_be_setup_list_present = true;
        srbs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(srbs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 15: {
        drbs_failed_to_be_setup_list_present = true;
        drbs_failed_to_be_setup_list.id      = id;
        HANDLE_CODE(drbs_failed_to_be_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drbs_failed_to_be_setup_list.value.unpack(bref));
        break;
      }
      case 83: {
        scell_failedto_setup_list_present = true;
        scell_failedto_setup_list.id      = id;
        HANDLE_CODE(scell_failedto_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(scell_failedto_setup_list.value.unpack(bref));
        break;
      }
      case 98: {
        inactivity_monitoring_resp_present = true;
        inactivity_monitoring_resp.id      = id;
        HANDLE_CODE(inactivity_monitoring_resp.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(inactivity_monitoring_resp.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 202: {
        srbs_setup_list_present = true;
        srbs_setup_list.id      = id;
        HANDLE_CODE(srbs_setup_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srbs_setup_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_context_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  du_to_cu_rrc_info.to_json(j);
  if (c_rnti_present) {
    j.write_fieldname("");
    c_rnti.to_json(j);
  }
  if (res_coordination_transfer_container_present) {
    j.write_fieldname("");
    res_coordination_transfer_container.to_json(j);
  }
  if (full_cfg_present) {
    j.write_fieldname("");
    full_cfg.to_json(j);
  }
  if (drbs_setup_list_present) {
    j.write_fieldname("");
    drbs_setup_list.to_json(j);
  }
  if (srbs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    srbs_failed_to_be_setup_list.to_json(j);
  }
  if (drbs_failed_to_be_setup_list_present) {
    j.write_fieldname("");
    drbs_failed_to_be_setup_list.to_json(j);
  }
  if (scell_failedto_setup_list_present) {
    j.write_fieldname("");
    scell_failedto_setup_list.to_json(j);
  }
  if (inactivity_monitoring_resp_present) {
    j.write_fieldname("");
    inactivity_monitoring_resp.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (srbs_setup_list_present) {
    j.write_fieldname("");
    srbs_setup_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ue_inactivity_notif_ies_o>;

ue_inactivity_notif_ies_container::ue_inactivity_notif_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject), gnb_du_ue_f1ap_id(41, crit_e::reject), drb_activity_list(100, crit_e::reject)
{
}
SRSASN_CODE ue_inactivity_notif_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(drb_activity_list.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_inactivity_notif_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 100: {
        nof_mandatory_ies--;
        drb_activity_list.id = id;
        HANDLE_CODE(drb_activity_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(drb_activity_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ue_inactivity_notif_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  drb_activity_list.to_json(j);
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<ul_rrc_msg_transfer_ies_o>;

ul_rrc_msg_transfer_ies_container::ul_rrc_msg_transfer_ies_container() :
  gnb_cu_ue_f1ap_id(40, crit_e::reject),
  gnb_du_ue_f1ap_id(41, crit_e::reject),
  srb_id(64, crit_e::reject),
  rrc_container(50, crit_e::reject),
  sel_plmn_id(224, crit_e::reject),
  new_gnb_du_ue_f1ap_id(219, crit_e::reject)
{
}
SRSASN_CODE ul_rrc_msg_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += sel_plmn_id_present ? 1 : 0;
  nof_ies += new_gnb_du_ue_f1ap_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(gnb_cu_ue_f1ap_id.pack(bref));
  HANDLE_CODE(gnb_du_ue_f1ap_id.pack(bref));
  HANDLE_CODE(srb_id.pack(bref));
  HANDLE_CODE(rrc_container.pack(bref));
  if (sel_plmn_id_present) {
    HANDLE_CODE(sel_plmn_id.pack(bref));
  }
  if (new_gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(new_gnb_du_ue_f1ap_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_rrc_msg_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        gnb_cu_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_cu_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        gnb_du_ue_f1ap_id.id = id;
        HANDLE_CODE(gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      case 64: {
        nof_mandatory_ies--;
        srb_id.id = id;
        HANDLE_CODE(srb_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srb_id.value.unpack(bref));
        break;
      }
      case 50: {
        nof_mandatory_ies--;
        rrc_container.id = id;
        HANDLE_CODE(rrc_container.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_container.value.unpack(bref));
        break;
      }
      case 224: {
        sel_plmn_id_present = true;
        sel_plmn_id.id      = id;
        HANDLE_CODE(sel_plmn_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sel_plmn_id.value.unpack(bref));
        break;
      }
      case 219: {
        new_gnb_du_ue_f1ap_id_present = true;
        new_gnb_du_ue_f1ap_id.id      = id;
        HANDLE_CODE(new_gnb_du_ue_f1ap_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(new_gnb_du_ue_f1ap_id.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ul_rrc_msg_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  gnb_cu_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  gnb_du_ue_f1ap_id.to_json(j);
  j.write_fieldname("");
  srb_id.to_json(j);
  j.write_fieldname("");
  rrc_container.to_json(j);
  if (sel_plmn_id_present) {
    j.write_fieldname("");
    sel_plmn_id.to_json(j);
  }
  if (new_gnb_du_ue_f1ap_id_present) {
    j.write_fieldname("");
    new_gnb_du_ue_f1ap_id.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<write_replace_warning_request_ies_o>;

write_replace_warning_request_ies_container::write_replace_warning_request_ies_container() :
  transaction_id(78, crit_e::reject),
  pws_sys_info(140, crit_e::reject),
  repeat_period(141, crit_e::reject),
  numof_broadcast_request(142, crit_e::reject),
  cells_to_be_broadcast_list(144, crit_e::reject)
{
}
SRSASN_CODE write_replace_warning_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += cells_to_be_broadcast_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  HANDLE_CODE(pws_sys_info.pack(bref));
  HANDLE_CODE(repeat_period.pack(bref));
  HANDLE_CODE(numof_broadcast_request.pack(bref));
  if (cells_to_be_broadcast_list_present) {
    HANDLE_CODE(cells_to_be_broadcast_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 140: {
        nof_mandatory_ies--;
        pws_sys_info.id = id;
        HANDLE_CODE(pws_sys_info.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pws_sys_info.value.unpack(bref));
        break;
      }
      case 141: {
        nof_mandatory_ies--;
        repeat_period.id = id;
        HANDLE_CODE(repeat_period.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(repeat_period.value.unpack(bref));
        break;
      }
      case 142: {
        nof_mandatory_ies--;
        numof_broadcast_request.id = id;
        HANDLE_CODE(numof_broadcast_request.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(numof_broadcast_request.value.unpack(bref));
        break;
      }
      case 144: {
        cells_to_be_broadcast_list_present = true;
        cells_to_be_broadcast_list.id      = id;
        HANDLE_CODE(cells_to_be_broadcast_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_to_be_broadcast_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void write_replace_warning_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  j.write_fieldname("");
  pws_sys_info.to_json(j);
  j.write_fieldname("");
  repeat_period.to_json(j);
  j.write_fieldname("");
  numof_broadcast_request.to_json(j);
  if (cells_to_be_broadcast_list_present) {
    j.write_fieldname("");
    cells_to_be_broadcast_list.to_json(j);
  }
  j.end_obj();
}

template struct asn1::protocol_ie_field_s<write_replace_warning_resp_ies_o>;

write_replace_warning_resp_ies_container::write_replace_warning_resp_ies_container() :
  transaction_id(78, crit_e::reject),
  cells_broadcast_completed_list(146, crit_e::reject),
  crit_diagnostics(7, crit_e::ignore),
  ded_si_delivery_needed_ue_list(189, crit_e::ignore)
{
}
SRSASN_CODE write_replace_warning_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_broadcast_completed_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  HANDLE_CODE(transaction_id.pack(bref));
  if (cells_broadcast_completed_list_present) {
    HANDLE_CODE(cells_broadcast_completed_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(ded_si_delivery_needed_ue_list.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        transaction_id.id = id;
        HANDLE_CODE(transaction_id.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transaction_id.value.unpack(bref));
        break;
      }
      case 146: {
        cells_broadcast_completed_list_present = true;
        cells_broadcast_completed_list.id      = id;
        HANDLE_CODE(cells_broadcast_completed_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cells_broadcast_completed_list.value.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        crit_diagnostics.id      = id;
        HANDLE_CODE(crit_diagnostics.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.value.unpack(bref));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        ded_si_delivery_needed_ue_list.id      = id;
        HANDLE_CODE(ded_si_delivery_needed_ue_list.crit.unpack(bref));
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ded_si_delivery_needed_ue_list.value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void write_replace_warning_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("");
  transaction_id.to_json(j);
  if (cells_broadcast_completed_list_present) {
    j.write_fieldname("");
    cells_broadcast_completed_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_fieldname("");
    crit_diagnostics.to_json(j);
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_fieldname("");
    ded_si_delivery_needed_ue_list.to_json(j);
  }
  j.end_obj();
}

// F1AP-ELEMENTARY-PROCEDURES ::= OBJECT SET OF F1AP-ELEMENTARY-PROCEDURE
uint16_t f1ap_elem_procs_o::idx_to_proc_code(uint32_t idx)
{
  static const uint16_t names[] = {0,  1,  3,  4,  5,  6,  7,  8,  20, 21, 16, 26, 2, 10,
                                   12, 13, 15, 14, 11, 17, 18, 19, 22, 23, 24, 25, 27};
  return map_enum_number(names, 27, idx, "proc_code");
}
bool f1ap_elem_procs_o::is_proc_code_valid(const uint16_t& proc_code)
{
  static const uint16_t names[] = {0,  1,  3,  4,  5,  6,  7,  8,  20, 21, 16, 26, 2, 10,
                                   12, 13, 15, 14, 11, 17, 18, 19, 22, 23, 24, 25, 27};
  for (const auto& o : names) {
    if (o == proc_code) {
      return true;
    }
  }
  return false;
}
f1ap_elem_procs_o::init_msg_c f1ap_elem_procs_o::get_init_msg(const uint16_t& proc_code)
{
  init_msg_c ret{};
  switch (proc_code) {
    case 0:
      ret.set(init_msg_c::types::reset);
      break;
    case 1:
      ret.set(init_msg_c::types::f1_setup_request);
      break;
    case 3:
      ret.set(init_msg_c::types::gnb_du_cfg_upd);
      break;
    case 4:
      ret.set(init_msg_c::types::gnb_cu_cfg_upd);
      break;
    case 5:
      ret.set(init_msg_c::types::ue_context_setup_request);
      break;
    case 6:
      ret.set(init_msg_c::types::ue_context_release_cmd);
      break;
    case 7:
      ret.set(init_msg_c::types::ue_context_mod_request);
      break;
    case 8:
      ret.set(init_msg_c::types::ue_context_mod_required);
      break;
    case 20:
      ret.set(init_msg_c::types::write_replace_warning_request);
      break;
    case 21:
      ret.set(init_msg_c::types::pws_cancel_request);
      break;
    case 16:
      ret.set(init_msg_c::types::gnb_du_res_coordination_request);
      break;
    case 26:
      ret.set(init_msg_c::types::f1_removal_request);
      break;
    case 2:
      ret.set(init_msg_c::types::error_ind);
      break;
    case 10:
      ret.set(init_msg_c::types::ue_context_release_request);
      break;
    case 12:
      ret.set(init_msg_c::types::dl_rrc_msg_transfer);
      break;
    case 13:
      ret.set(init_msg_c::types::ul_rrc_msg_transfer);
      break;
    case 15:
      ret.set(init_msg_c::types::ue_inactivity_notif);
      break;
    case 14:
      ret.set(init_msg_c::types::private_msg);
      break;
    case 11:
      ret.set(init_msg_c::types::init_ul_rrc_msg_transfer);
      break;
    case 17:
      ret.set(init_msg_c::types::sys_info_delivery_cmd);
      break;
    case 18:
      ret.set(init_msg_c::types::paging);
      break;
    case 19:
      ret.set(init_msg_c::types::notify);
      break;
    case 22:
      ret.set(init_msg_c::types::pws_restart_ind);
      break;
    case 23:
      ret.set(init_msg_c::types::pws_fail_ind);
      break;
    case 24:
      ret.set(init_msg_c::types::gnb_du_status_ind);
      break;
    case 25:
      ret.set(init_msg_c::types::rrc_delivery_report);
      break;
    case 27:
      ret.set(init_msg_c::types::network_access_rate_reduction);
      break;
    default:
      asn1::log_error("The proc_code={} is not recognized", proc_code);
  }
  return ret;
}
f1ap_elem_procs_o::successful_outcome_c f1ap_elem_procs_o::get_successful_outcome(const uint16_t& proc_code)
{
  successful_outcome_c ret{};
  switch (proc_code) {
    case 0:
      ret.set(successful_outcome_c::types::reset_ack);
      break;
    case 1:
      ret.set(successful_outcome_c::types::f1_setup_resp);
      break;
    case 3:
      ret.set(successful_outcome_c::types::gnb_du_cfg_upd_ack);
      break;
    case 4:
      ret.set(successful_outcome_c::types::gnb_cu_cfg_upd_ack);
      break;
    case 5:
      ret.set(successful_outcome_c::types::ue_context_setup_resp);
      break;
    case 6:
      ret.set(successful_outcome_c::types::ue_context_release_complete);
      break;
    case 7:
      ret.set(successful_outcome_c::types::ue_context_mod_resp);
      break;
    case 8:
      ret.set(successful_outcome_c::types::ue_context_mod_confirm);
      break;
    case 20:
      ret.set(successful_outcome_c::types::write_replace_warning_resp);
      break;
    case 21:
      ret.set(successful_outcome_c::types::pws_cancel_resp);
      break;
    case 16:
      ret.set(successful_outcome_c::types::gnb_du_res_coordination_resp);
      break;
    case 26:
      ret.set(successful_outcome_c::types::f1_removal_resp);
      break;
    default:
      asn1::log_error("The proc_code={} is not recognized", proc_code);
  }
  return ret;
}
f1ap_elem_procs_o::unsuccessful_outcome_c f1ap_elem_procs_o::get_unsuccessful_outcome(const uint16_t& proc_code)
{
  unsuccessful_outcome_c ret{};
  switch (proc_code) {
    case 1:
      ret.set(unsuccessful_outcome_c::types::f1_setup_fail);
      break;
    case 3:
      ret.set(unsuccessful_outcome_c::types::gnb_du_cfg_upd_fail);
      break;
    case 4:
      ret.set(unsuccessful_outcome_c::types::gnb_cu_cfg_upd_fail);
      break;
    case 5:
      ret.set(unsuccessful_outcome_c::types::ue_context_setup_fail);
      break;
    case 7:
      ret.set(unsuccessful_outcome_c::types::ue_context_mod_fail);
      break;
    case 8:
      ret.set(unsuccessful_outcome_c::types::ue_context_mod_refuse);
      break;
    case 26:
      ret.set(unsuccessful_outcome_c::types::f1_removal_fail);
      break;
    default:
      asn1::log_error("The proc_code={} is not recognized", proc_code);
  }
  return ret;
}
crit_e f1ap_elem_procs_o::get_crit(const uint16_t& proc_code)
{
  switch (proc_code) {
    case 0:
      return crit_e::reject;
    case 1:
      return crit_e::reject;
    case 3:
      return crit_e::reject;
    case 4:
      return crit_e::reject;
    case 5:
      return crit_e::reject;
    case 6:
      return crit_e::reject;
    case 7:
      return crit_e::reject;
    case 8:
      return crit_e::reject;
    case 20:
      return crit_e::reject;
    case 21:
      return crit_e::reject;
    case 16:
      return crit_e::reject;
    case 26:
      return crit_e::reject;
    case 2:
      return crit_e::ignore;
    case 10:
      return crit_e::ignore;
    case 12:
      return crit_e::ignore;
    case 13:
      return crit_e::ignore;
    case 15:
      return crit_e::ignore;
    case 14:
      return crit_e::ignore;
    case 11:
      return crit_e::ignore;
    case 17:
      return crit_e::ignore;
    case 18:
      return crit_e::ignore;
    case 19:
      return crit_e::ignore;
    case 22:
      return crit_e::ignore;
    case 23:
      return crit_e::ignore;
    case 24:
      return crit_e::ignore;
    case 25:
      return crit_e::ignore;
    case 27:
      return crit_e::ignore;
    default:
      asn1::log_error("The proc_code={} is not recognized", proc_code);
  }
  return {};
}

// InitiatingMessage ::= OPEN TYPE
void f1ap_elem_procs_o::init_msg_c::destroy_()
{
  switch (type_) {
    case types::reset:
      c.destroy<reset_s>();
      break;
    case types::f1_setup_request:
      c.destroy<f1_setup_request_s>();
      break;
    case types::gnb_du_cfg_upd:
      c.destroy<gnb_du_cfg_upd_s>();
      break;
    case types::gnb_cu_cfg_upd:
      c.destroy<gnb_cu_cfg_upd_s>();
      break;
    case types::ue_context_setup_request:
      c.destroy<ue_context_setup_request_s>();
      break;
    case types::ue_context_release_cmd:
      c.destroy<ue_context_release_cmd_s>();
      break;
    case types::ue_context_mod_request:
      c.destroy<ue_context_mod_request_s>();
      break;
    case types::ue_context_mod_required:
      c.destroy<ue_context_mod_required_s>();
      break;
    case types::write_replace_warning_request:
      c.destroy<write_replace_warning_request_s>();
      break;
    case types::pws_cancel_request:
      c.destroy<pws_cancel_request_s>();
      break;
    case types::gnb_du_res_coordination_request:
      c.destroy<gnb_du_res_coordination_request_s>();
      break;
    case types::f1_removal_request:
      c.destroy<f1_removal_request_s>();
      break;
    case types::error_ind:
      c.destroy<error_ind_s>();
      break;
    case types::ue_context_release_request:
      c.destroy<ue_context_release_request_s>();
      break;
    case types::dl_rrc_msg_transfer:
      c.destroy<dl_rrc_msg_transfer_s>();
      break;
    case types::ul_rrc_msg_transfer:
      c.destroy<ul_rrc_msg_transfer_s>();
      break;
    case types::ue_inactivity_notif:
      c.destroy<ue_inactivity_notif_s>();
      break;
    case types::private_msg:
      c.destroy<private_msg_s>();
      break;
    case types::init_ul_rrc_msg_transfer:
      c.destroy<init_ul_rrc_msg_transfer_s>();
      break;
    case types::sys_info_delivery_cmd:
      c.destroy<sys_info_delivery_cmd_s>();
      break;
    case types::paging:
      c.destroy<paging_s>();
      break;
    case types::notify:
      c.destroy<notify_s>();
      break;
    case types::pws_restart_ind:
      c.destroy<pws_restart_ind_s>();
      break;
    case types::pws_fail_ind:
      c.destroy<pws_fail_ind_s>();
      break;
    case types::gnb_du_status_ind:
      c.destroy<gnb_du_status_ind_s>();
      break;
    case types::rrc_delivery_report:
      c.destroy<rrc_delivery_report_s>();
      break;
    case types::network_access_rate_reduction:
      c.destroy<network_access_rate_reduction_s>();
      break;
    default:
      break;
  }
}
void f1ap_elem_procs_o::init_msg_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::reset:
      c.init<reset_s>();
      break;
    case types::f1_setup_request:
      c.init<f1_setup_request_s>();
      break;
    case types::gnb_du_cfg_upd:
      c.init<gnb_du_cfg_upd_s>();
      break;
    case types::gnb_cu_cfg_upd:
      c.init<gnb_cu_cfg_upd_s>();
      break;
    case types::ue_context_setup_request:
      c.init<ue_context_setup_request_s>();
      break;
    case types::ue_context_release_cmd:
      c.init<ue_context_release_cmd_s>();
      break;
    case types::ue_context_mod_request:
      c.init<ue_context_mod_request_s>();
      break;
    case types::ue_context_mod_required:
      c.init<ue_context_mod_required_s>();
      break;
    case types::write_replace_warning_request:
      c.init<write_replace_warning_request_s>();
      break;
    case types::pws_cancel_request:
      c.init<pws_cancel_request_s>();
      break;
    case types::gnb_du_res_coordination_request:
      c.init<gnb_du_res_coordination_request_s>();
      break;
    case types::f1_removal_request:
      c.init<f1_removal_request_s>();
      break;
    case types::error_ind:
      c.init<error_ind_s>();
      break;
    case types::ue_context_release_request:
      c.init<ue_context_release_request_s>();
      break;
    case types::dl_rrc_msg_transfer:
      c.init<dl_rrc_msg_transfer_s>();
      break;
    case types::ul_rrc_msg_transfer:
      c.init<ul_rrc_msg_transfer_s>();
      break;
    case types::ue_inactivity_notif:
      c.init<ue_inactivity_notif_s>();
      break;
    case types::private_msg:
      c.init<private_msg_s>();
      break;
    case types::init_ul_rrc_msg_transfer:
      c.init<init_ul_rrc_msg_transfer_s>();
      break;
    case types::sys_info_delivery_cmd:
      c.init<sys_info_delivery_cmd_s>();
      break;
    case types::paging:
      c.init<paging_s>();
      break;
    case types::notify:
      c.init<notify_s>();
      break;
    case types::pws_restart_ind:
      c.init<pws_restart_ind_s>();
      break;
    case types::pws_fail_ind:
      c.init<pws_fail_ind_s>();
      break;
    case types::gnb_du_status_ind:
      c.init<gnb_du_status_ind_s>();
      break;
    case types::rrc_delivery_report:
      c.init<rrc_delivery_report_s>();
      break;
    case types::network_access_rate_reduction:
      c.init<network_access_rate_reduction_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::init_msg_c");
  }
}
f1ap_elem_procs_o::init_msg_c::init_msg_c(const f1ap_elem_procs_o::init_msg_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::reset:
      c.init(other.c.get<reset_s>());
      break;
    case types::f1_setup_request:
      c.init(other.c.get<f1_setup_request_s>());
      break;
    case types::gnb_du_cfg_upd:
      c.init(other.c.get<gnb_du_cfg_upd_s>());
      break;
    case types::gnb_cu_cfg_upd:
      c.init(other.c.get<gnb_cu_cfg_upd_s>());
      break;
    case types::ue_context_setup_request:
      c.init(other.c.get<ue_context_setup_request_s>());
      break;
    case types::ue_context_release_cmd:
      c.init(other.c.get<ue_context_release_cmd_s>());
      break;
    case types::ue_context_mod_request:
      c.init(other.c.get<ue_context_mod_request_s>());
      break;
    case types::ue_context_mod_required:
      c.init(other.c.get<ue_context_mod_required_s>());
      break;
    case types::write_replace_warning_request:
      c.init(other.c.get<write_replace_warning_request_s>());
      break;
    case types::pws_cancel_request:
      c.init(other.c.get<pws_cancel_request_s>());
      break;
    case types::gnb_du_res_coordination_request:
      c.init(other.c.get<gnb_du_res_coordination_request_s>());
      break;
    case types::f1_removal_request:
      c.init(other.c.get<f1_removal_request_s>());
      break;
    case types::error_ind:
      c.init(other.c.get<error_ind_s>());
      break;
    case types::ue_context_release_request:
      c.init(other.c.get<ue_context_release_request_s>());
      break;
    case types::dl_rrc_msg_transfer:
      c.init(other.c.get<dl_rrc_msg_transfer_s>());
      break;
    case types::ul_rrc_msg_transfer:
      c.init(other.c.get<ul_rrc_msg_transfer_s>());
      break;
    case types::ue_inactivity_notif:
      c.init(other.c.get<ue_inactivity_notif_s>());
      break;
    case types::private_msg:
      c.init(other.c.get<private_msg_s>());
      break;
    case types::init_ul_rrc_msg_transfer:
      c.init(other.c.get<init_ul_rrc_msg_transfer_s>());
      break;
    case types::sys_info_delivery_cmd:
      c.init(other.c.get<sys_info_delivery_cmd_s>());
      break;
    case types::paging:
      c.init(other.c.get<paging_s>());
      break;
    case types::notify:
      c.init(other.c.get<notify_s>());
      break;
    case types::pws_restart_ind:
      c.init(other.c.get<pws_restart_ind_s>());
      break;
    case types::pws_fail_ind:
      c.init(other.c.get<pws_fail_ind_s>());
      break;
    case types::gnb_du_status_ind:
      c.init(other.c.get<gnb_du_status_ind_s>());
      break;
    case types::rrc_delivery_report:
      c.init(other.c.get<rrc_delivery_report_s>());
      break;
    case types::network_access_rate_reduction:
      c.init(other.c.get<network_access_rate_reduction_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::init_msg_c");
  }
}
f1ap_elem_procs_o::init_msg_c& f1ap_elem_procs_o::init_msg_c::operator=(const f1ap_elem_procs_o::init_msg_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::reset:
      c.set(other.c.get<reset_s>());
      break;
    case types::f1_setup_request:
      c.set(other.c.get<f1_setup_request_s>());
      break;
    case types::gnb_du_cfg_upd:
      c.set(other.c.get<gnb_du_cfg_upd_s>());
      break;
    case types::gnb_cu_cfg_upd:
      c.set(other.c.get<gnb_cu_cfg_upd_s>());
      break;
    case types::ue_context_setup_request:
      c.set(other.c.get<ue_context_setup_request_s>());
      break;
    case types::ue_context_release_cmd:
      c.set(other.c.get<ue_context_release_cmd_s>());
      break;
    case types::ue_context_mod_request:
      c.set(other.c.get<ue_context_mod_request_s>());
      break;
    case types::ue_context_mod_required:
      c.set(other.c.get<ue_context_mod_required_s>());
      break;
    case types::write_replace_warning_request:
      c.set(other.c.get<write_replace_warning_request_s>());
      break;
    case types::pws_cancel_request:
      c.set(other.c.get<pws_cancel_request_s>());
      break;
    case types::gnb_du_res_coordination_request:
      c.set(other.c.get<gnb_du_res_coordination_request_s>());
      break;
    case types::f1_removal_request:
      c.set(other.c.get<f1_removal_request_s>());
      break;
    case types::error_ind:
      c.set(other.c.get<error_ind_s>());
      break;
    case types::ue_context_release_request:
      c.set(other.c.get<ue_context_release_request_s>());
      break;
    case types::dl_rrc_msg_transfer:
      c.set(other.c.get<dl_rrc_msg_transfer_s>());
      break;
    case types::ul_rrc_msg_transfer:
      c.set(other.c.get<ul_rrc_msg_transfer_s>());
      break;
    case types::ue_inactivity_notif:
      c.set(other.c.get<ue_inactivity_notif_s>());
      break;
    case types::private_msg:
      c.set(other.c.get<private_msg_s>());
      break;
    case types::init_ul_rrc_msg_transfer:
      c.set(other.c.get<init_ul_rrc_msg_transfer_s>());
      break;
    case types::sys_info_delivery_cmd:
      c.set(other.c.get<sys_info_delivery_cmd_s>());
      break;
    case types::paging:
      c.set(other.c.get<paging_s>());
      break;
    case types::notify:
      c.set(other.c.get<notify_s>());
      break;
    case types::pws_restart_ind:
      c.set(other.c.get<pws_restart_ind_s>());
      break;
    case types::pws_fail_ind:
      c.set(other.c.get<pws_fail_ind_s>());
      break;
    case types::gnb_du_status_ind:
      c.set(other.c.get<gnb_du_status_ind_s>());
      break;
    case types::rrc_delivery_report:
      c.set(other.c.get<rrc_delivery_report_s>());
      break;
    case types::network_access_rate_reduction:
      c.set(other.c.get<network_access_rate_reduction_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::init_msg_c");
  }

  return *this;
}
reset_s& f1ap_elem_procs_o::init_msg_c::reset()
{
  assert_choice_type(types::reset, type_, "InitiatingMessage");
  return c.get<reset_s>();
}
f1_setup_request_s& f1ap_elem_procs_o::init_msg_c::f1_setup_request()
{
  assert_choice_type(types::f1_setup_request, type_, "InitiatingMessage");
  return c.get<f1_setup_request_s>();
}
gnb_du_cfg_upd_s& f1ap_elem_procs_o::init_msg_c::gnb_du_cfg_upd()
{
  assert_choice_type(types::gnb_du_cfg_upd, type_, "InitiatingMessage");
  return c.get<gnb_du_cfg_upd_s>();
}
gnb_cu_cfg_upd_s& f1ap_elem_procs_o::init_msg_c::gnb_cu_cfg_upd()
{
  assert_choice_type(types::gnb_cu_cfg_upd, type_, "InitiatingMessage");
  return c.get<gnb_cu_cfg_upd_s>();
}
ue_context_setup_request_s& f1ap_elem_procs_o::init_msg_c::ue_context_setup_request()
{
  assert_choice_type(types::ue_context_setup_request, type_, "InitiatingMessage");
  return c.get<ue_context_setup_request_s>();
}
ue_context_release_cmd_s& f1ap_elem_procs_o::init_msg_c::ue_context_release_cmd()
{
  assert_choice_type(types::ue_context_release_cmd, type_, "InitiatingMessage");
  return c.get<ue_context_release_cmd_s>();
}
ue_context_mod_request_s& f1ap_elem_procs_o::init_msg_c::ue_context_mod_request()
{
  assert_choice_type(types::ue_context_mod_request, type_, "InitiatingMessage");
  return c.get<ue_context_mod_request_s>();
}
ue_context_mod_required_s& f1ap_elem_procs_o::init_msg_c::ue_context_mod_required()
{
  assert_choice_type(types::ue_context_mod_required, type_, "InitiatingMessage");
  return c.get<ue_context_mod_required_s>();
}
write_replace_warning_request_s& f1ap_elem_procs_o::init_msg_c::write_replace_warning_request()
{
  assert_choice_type(types::write_replace_warning_request, type_, "InitiatingMessage");
  return c.get<write_replace_warning_request_s>();
}
pws_cancel_request_s& f1ap_elem_procs_o::init_msg_c::pws_cancel_request()
{
  assert_choice_type(types::pws_cancel_request, type_, "InitiatingMessage");
  return c.get<pws_cancel_request_s>();
}
gnb_du_res_coordination_request_s& f1ap_elem_procs_o::init_msg_c::gnb_du_res_coordination_request()
{
  assert_choice_type(types::gnb_du_res_coordination_request, type_, "InitiatingMessage");
  return c.get<gnb_du_res_coordination_request_s>();
}
f1_removal_request_s& f1ap_elem_procs_o::init_msg_c::f1_removal_request()
{
  assert_choice_type(types::f1_removal_request, type_, "InitiatingMessage");
  return c.get<f1_removal_request_s>();
}
error_ind_s& f1ap_elem_procs_o::init_msg_c::error_ind()
{
  assert_choice_type(types::error_ind, type_, "InitiatingMessage");
  return c.get<error_ind_s>();
}
ue_context_release_request_s& f1ap_elem_procs_o::init_msg_c::ue_context_release_request()
{
  assert_choice_type(types::ue_context_release_request, type_, "InitiatingMessage");
  return c.get<ue_context_release_request_s>();
}
dl_rrc_msg_transfer_s& f1ap_elem_procs_o::init_msg_c::dl_rrc_msg_transfer()
{
  assert_choice_type(types::dl_rrc_msg_transfer, type_, "InitiatingMessage");
  return c.get<dl_rrc_msg_transfer_s>();
}
ul_rrc_msg_transfer_s& f1ap_elem_procs_o::init_msg_c::ul_rrc_msg_transfer()
{
  assert_choice_type(types::ul_rrc_msg_transfer, type_, "InitiatingMessage");
  return c.get<ul_rrc_msg_transfer_s>();
}
ue_inactivity_notif_s& f1ap_elem_procs_o::init_msg_c::ue_inactivity_notif()
{
  assert_choice_type(types::ue_inactivity_notif, type_, "InitiatingMessage");
  return c.get<ue_inactivity_notif_s>();
}
private_msg_s& f1ap_elem_procs_o::init_msg_c::private_msg()
{
  assert_choice_type(types::private_msg, type_, "InitiatingMessage");
  return c.get<private_msg_s>();
}
init_ul_rrc_msg_transfer_s& f1ap_elem_procs_o::init_msg_c::init_ul_rrc_msg_transfer()
{
  assert_choice_type(types::init_ul_rrc_msg_transfer, type_, "InitiatingMessage");
  return c.get<init_ul_rrc_msg_transfer_s>();
}
sys_info_delivery_cmd_s& f1ap_elem_procs_o::init_msg_c::sys_info_delivery_cmd()
{
  assert_choice_type(types::sys_info_delivery_cmd, type_, "InitiatingMessage");
  return c.get<sys_info_delivery_cmd_s>();
}
paging_s& f1ap_elem_procs_o::init_msg_c::paging()
{
  assert_choice_type(types::paging, type_, "InitiatingMessage");
  return c.get<paging_s>();
}
notify_s& f1ap_elem_procs_o::init_msg_c::notify()
{
  assert_choice_type(types::notify, type_, "InitiatingMessage");
  return c.get<notify_s>();
}
pws_restart_ind_s& f1ap_elem_procs_o::init_msg_c::pws_restart_ind()
{
  assert_choice_type(types::pws_restart_ind, type_, "InitiatingMessage");
  return c.get<pws_restart_ind_s>();
}
pws_fail_ind_s& f1ap_elem_procs_o::init_msg_c::pws_fail_ind()
{
  assert_choice_type(types::pws_fail_ind, type_, "InitiatingMessage");
  return c.get<pws_fail_ind_s>();
}
gnb_du_status_ind_s& f1ap_elem_procs_o::init_msg_c::gnb_du_status_ind()
{
  assert_choice_type(types::gnb_du_status_ind, type_, "InitiatingMessage");
  return c.get<gnb_du_status_ind_s>();
}
rrc_delivery_report_s& f1ap_elem_procs_o::init_msg_c::rrc_delivery_report()
{
  assert_choice_type(types::rrc_delivery_report, type_, "InitiatingMessage");
  return c.get<rrc_delivery_report_s>();
}
network_access_rate_reduction_s& f1ap_elem_procs_o::init_msg_c::network_access_rate_reduction()
{
  assert_choice_type(types::network_access_rate_reduction, type_, "InitiatingMessage");
  return c.get<network_access_rate_reduction_s>();
}
const reset_s& f1ap_elem_procs_o::init_msg_c::reset() const
{
  assert_choice_type(types::reset, type_, "InitiatingMessage");
  return c.get<reset_s>();
}
const f1_setup_request_s& f1ap_elem_procs_o::init_msg_c::f1_setup_request() const
{
  assert_choice_type(types::f1_setup_request, type_, "InitiatingMessage");
  return c.get<f1_setup_request_s>();
}
const gnb_du_cfg_upd_s& f1ap_elem_procs_o::init_msg_c::gnb_du_cfg_upd() const
{
  assert_choice_type(types::gnb_du_cfg_upd, type_, "InitiatingMessage");
  return c.get<gnb_du_cfg_upd_s>();
}
const gnb_cu_cfg_upd_s& f1ap_elem_procs_o::init_msg_c::gnb_cu_cfg_upd() const
{
  assert_choice_type(types::gnb_cu_cfg_upd, type_, "InitiatingMessage");
  return c.get<gnb_cu_cfg_upd_s>();
}
const ue_context_setup_request_s& f1ap_elem_procs_o::init_msg_c::ue_context_setup_request() const
{
  assert_choice_type(types::ue_context_setup_request, type_, "InitiatingMessage");
  return c.get<ue_context_setup_request_s>();
}
const ue_context_release_cmd_s& f1ap_elem_procs_o::init_msg_c::ue_context_release_cmd() const
{
  assert_choice_type(types::ue_context_release_cmd, type_, "InitiatingMessage");
  return c.get<ue_context_release_cmd_s>();
}
const ue_context_mod_request_s& f1ap_elem_procs_o::init_msg_c::ue_context_mod_request() const
{
  assert_choice_type(types::ue_context_mod_request, type_, "InitiatingMessage");
  return c.get<ue_context_mod_request_s>();
}
const ue_context_mod_required_s& f1ap_elem_procs_o::init_msg_c::ue_context_mod_required() const
{
  assert_choice_type(types::ue_context_mod_required, type_, "InitiatingMessage");
  return c.get<ue_context_mod_required_s>();
}
const write_replace_warning_request_s& f1ap_elem_procs_o::init_msg_c::write_replace_warning_request() const
{
  assert_choice_type(types::write_replace_warning_request, type_, "InitiatingMessage");
  return c.get<write_replace_warning_request_s>();
}
const pws_cancel_request_s& f1ap_elem_procs_o::init_msg_c::pws_cancel_request() const
{
  assert_choice_type(types::pws_cancel_request, type_, "InitiatingMessage");
  return c.get<pws_cancel_request_s>();
}
const gnb_du_res_coordination_request_s& f1ap_elem_procs_o::init_msg_c::gnb_du_res_coordination_request() const
{
  assert_choice_type(types::gnb_du_res_coordination_request, type_, "InitiatingMessage");
  return c.get<gnb_du_res_coordination_request_s>();
}
const f1_removal_request_s& f1ap_elem_procs_o::init_msg_c::f1_removal_request() const
{
  assert_choice_type(types::f1_removal_request, type_, "InitiatingMessage");
  return c.get<f1_removal_request_s>();
}
const error_ind_s& f1ap_elem_procs_o::init_msg_c::error_ind() const
{
  assert_choice_type(types::error_ind, type_, "InitiatingMessage");
  return c.get<error_ind_s>();
}
const ue_context_release_request_s& f1ap_elem_procs_o::init_msg_c::ue_context_release_request() const
{
  assert_choice_type(types::ue_context_release_request, type_, "InitiatingMessage");
  return c.get<ue_context_release_request_s>();
}
const dl_rrc_msg_transfer_s& f1ap_elem_procs_o::init_msg_c::dl_rrc_msg_transfer() const
{
  assert_choice_type(types::dl_rrc_msg_transfer, type_, "InitiatingMessage");
  return c.get<dl_rrc_msg_transfer_s>();
}
const ul_rrc_msg_transfer_s& f1ap_elem_procs_o::init_msg_c::ul_rrc_msg_transfer() const
{
  assert_choice_type(types::ul_rrc_msg_transfer, type_, "InitiatingMessage");
  return c.get<ul_rrc_msg_transfer_s>();
}
const ue_inactivity_notif_s& f1ap_elem_procs_o::init_msg_c::ue_inactivity_notif() const
{
  assert_choice_type(types::ue_inactivity_notif, type_, "InitiatingMessage");
  return c.get<ue_inactivity_notif_s>();
}
const private_msg_s& f1ap_elem_procs_o::init_msg_c::private_msg() const
{
  assert_choice_type(types::private_msg, type_, "InitiatingMessage");
  return c.get<private_msg_s>();
}
const init_ul_rrc_msg_transfer_s& f1ap_elem_procs_o::init_msg_c::init_ul_rrc_msg_transfer() const
{
  assert_choice_type(types::init_ul_rrc_msg_transfer, type_, "InitiatingMessage");
  return c.get<init_ul_rrc_msg_transfer_s>();
}
const sys_info_delivery_cmd_s& f1ap_elem_procs_o::init_msg_c::sys_info_delivery_cmd() const
{
  assert_choice_type(types::sys_info_delivery_cmd, type_, "InitiatingMessage");
  return c.get<sys_info_delivery_cmd_s>();
}
const paging_s& f1ap_elem_procs_o::init_msg_c::paging() const
{
  assert_choice_type(types::paging, type_, "InitiatingMessage");
  return c.get<paging_s>();
}
const notify_s& f1ap_elem_procs_o::init_msg_c::notify() const
{
  assert_choice_type(types::notify, type_, "InitiatingMessage");
  return c.get<notify_s>();
}
const pws_restart_ind_s& f1ap_elem_procs_o::init_msg_c::pws_restart_ind() const
{
  assert_choice_type(types::pws_restart_ind, type_, "InitiatingMessage");
  return c.get<pws_restart_ind_s>();
}
const pws_fail_ind_s& f1ap_elem_procs_o::init_msg_c::pws_fail_ind() const
{
  assert_choice_type(types::pws_fail_ind, type_, "InitiatingMessage");
  return c.get<pws_fail_ind_s>();
}
const gnb_du_status_ind_s& f1ap_elem_procs_o::init_msg_c::gnb_du_status_ind() const
{
  assert_choice_type(types::gnb_du_status_ind, type_, "InitiatingMessage");
  return c.get<gnb_du_status_ind_s>();
}
const rrc_delivery_report_s& f1ap_elem_procs_o::init_msg_c::rrc_delivery_report() const
{
  assert_choice_type(types::rrc_delivery_report, type_, "InitiatingMessage");
  return c.get<rrc_delivery_report_s>();
}
const network_access_rate_reduction_s& f1ap_elem_procs_o::init_msg_c::network_access_rate_reduction() const
{
  assert_choice_type(types::network_access_rate_reduction, type_, "InitiatingMessage");
  return c.get<network_access_rate_reduction_s>();
}
void f1ap_elem_procs_o::init_msg_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::reset:
      j.write_fieldname("Reset");
      c.get<reset_s>().to_json(j);
      break;
    case types::f1_setup_request:
      j.write_fieldname("F1SetupRequest");
      c.get<f1_setup_request_s>().to_json(j);
      break;
    case types::gnb_du_cfg_upd:
      j.write_fieldname("GNBDUConfigurationUpdate");
      c.get<gnb_du_cfg_upd_s>().to_json(j);
      break;
    case types::gnb_cu_cfg_upd:
      j.write_fieldname("GNBCUConfigurationUpdate");
      c.get<gnb_cu_cfg_upd_s>().to_json(j);
      break;
    case types::ue_context_setup_request:
      j.write_fieldname("UEContextSetupRequest");
      c.get<ue_context_setup_request_s>().to_json(j);
      break;
    case types::ue_context_release_cmd:
      j.write_fieldname("UEContextReleaseCommand");
      c.get<ue_context_release_cmd_s>().to_json(j);
      break;
    case types::ue_context_mod_request:
      j.write_fieldname("UEContextModificationRequest");
      c.get<ue_context_mod_request_s>().to_json(j);
      break;
    case types::ue_context_mod_required:
      j.write_fieldname("UEContextModificationRequired");
      c.get<ue_context_mod_required_s>().to_json(j);
      break;
    case types::write_replace_warning_request:
      j.write_fieldname("WriteReplaceWarningRequest");
      c.get<write_replace_warning_request_s>().to_json(j);
      break;
    case types::pws_cancel_request:
      j.write_fieldname("PWSCancelRequest");
      c.get<pws_cancel_request_s>().to_json(j);
      break;
    case types::gnb_du_res_coordination_request:
      j.write_fieldname("GNBDUResourceCoordinationRequest");
      c.get<gnb_du_res_coordination_request_s>().to_json(j);
      break;
    case types::f1_removal_request:
      j.write_fieldname("F1RemovalRequest");
      c.get<f1_removal_request_s>().to_json(j);
      break;
    case types::error_ind:
      j.write_fieldname("ErrorIndication");
      c.get<error_ind_s>().to_json(j);
      break;
    case types::ue_context_release_request:
      j.write_fieldname("UEContextReleaseRequest");
      c.get<ue_context_release_request_s>().to_json(j);
      break;
    case types::dl_rrc_msg_transfer:
      j.write_fieldname("DLRRCMessageTransfer");
      c.get<dl_rrc_msg_transfer_s>().to_json(j);
      break;
    case types::ul_rrc_msg_transfer:
      j.write_fieldname("ULRRCMessageTransfer");
      c.get<ul_rrc_msg_transfer_s>().to_json(j);
      break;
    case types::ue_inactivity_notif:
      j.write_fieldname("UEInactivityNotification");
      c.get<ue_inactivity_notif_s>().to_json(j);
      break;
    case types::private_msg:
      j.write_fieldname("PrivateMessage");
      c.get<private_msg_s>().to_json(j);
      break;
    case types::init_ul_rrc_msg_transfer:
      j.write_fieldname("InitialULRRCMessageTransfer");
      c.get<init_ul_rrc_msg_transfer_s>().to_json(j);
      break;
    case types::sys_info_delivery_cmd:
      j.write_fieldname("SystemInformationDeliveryCommand");
      c.get<sys_info_delivery_cmd_s>().to_json(j);
      break;
    case types::paging:
      j.write_fieldname("Paging");
      c.get<paging_s>().to_json(j);
      break;
    case types::notify:
      j.write_fieldname("Notify");
      c.get<notify_s>().to_json(j);
      break;
    case types::pws_restart_ind:
      j.write_fieldname("PWSRestartIndication");
      c.get<pws_restart_ind_s>().to_json(j);
      break;
    case types::pws_fail_ind:
      j.write_fieldname("PWSFailureIndication");
      c.get<pws_fail_ind_s>().to_json(j);
      break;
    case types::gnb_du_status_ind:
      j.write_fieldname("GNBDUStatusIndication");
      c.get<gnb_du_status_ind_s>().to_json(j);
      break;
    case types::rrc_delivery_report:
      j.write_fieldname("RRCDeliveryReport");
      c.get<rrc_delivery_report_s>().to_json(j);
      break;
    case types::network_access_rate_reduction:
      j.write_fieldname("NetworkAccessRateReduction");
      c.get<network_access_rate_reduction_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::init_msg_c");
  }
  j.end_obj();
}
SRSASN_CODE f1ap_elem_procs_o::init_msg_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::reset:
      HANDLE_CODE(c.get<reset_s>().pack(bref));
      break;
    case types::f1_setup_request:
      HANDLE_CODE(c.get<f1_setup_request_s>().pack(bref));
      break;
    case types::gnb_du_cfg_upd:
      HANDLE_CODE(c.get<gnb_du_cfg_upd_s>().pack(bref));
      break;
    case types::gnb_cu_cfg_upd:
      HANDLE_CODE(c.get<gnb_cu_cfg_upd_s>().pack(bref));
      break;
    case types::ue_context_setup_request:
      HANDLE_CODE(c.get<ue_context_setup_request_s>().pack(bref));
      break;
    case types::ue_context_release_cmd:
      HANDLE_CODE(c.get<ue_context_release_cmd_s>().pack(bref));
      break;
    case types::ue_context_mod_request:
      HANDLE_CODE(c.get<ue_context_mod_request_s>().pack(bref));
      break;
    case types::ue_context_mod_required:
      HANDLE_CODE(c.get<ue_context_mod_required_s>().pack(bref));
      break;
    case types::write_replace_warning_request:
      HANDLE_CODE(c.get<write_replace_warning_request_s>().pack(bref));
      break;
    case types::pws_cancel_request:
      HANDLE_CODE(c.get<pws_cancel_request_s>().pack(bref));
      break;
    case types::gnb_du_res_coordination_request:
      HANDLE_CODE(c.get<gnb_du_res_coordination_request_s>().pack(bref));
      break;
    case types::f1_removal_request:
      HANDLE_CODE(c.get<f1_removal_request_s>().pack(bref));
      break;
    case types::error_ind:
      HANDLE_CODE(c.get<error_ind_s>().pack(bref));
      break;
    case types::ue_context_release_request:
      HANDLE_CODE(c.get<ue_context_release_request_s>().pack(bref));
      break;
    case types::dl_rrc_msg_transfer:
      HANDLE_CODE(c.get<dl_rrc_msg_transfer_s>().pack(bref));
      break;
    case types::ul_rrc_msg_transfer:
      HANDLE_CODE(c.get<ul_rrc_msg_transfer_s>().pack(bref));
      break;
    case types::ue_inactivity_notif:
      HANDLE_CODE(c.get<ue_inactivity_notif_s>().pack(bref));
      break;
    case types::private_msg:
      HANDLE_CODE(c.get<private_msg_s>().pack(bref));
      break;
    case types::init_ul_rrc_msg_transfer:
      HANDLE_CODE(c.get<init_ul_rrc_msg_transfer_s>().pack(bref));
      break;
    case types::sys_info_delivery_cmd:
      HANDLE_CODE(c.get<sys_info_delivery_cmd_s>().pack(bref));
      break;
    case types::paging:
      HANDLE_CODE(c.get<paging_s>().pack(bref));
      break;
    case types::notify:
      HANDLE_CODE(c.get<notify_s>().pack(bref));
      break;
    case types::pws_restart_ind:
      HANDLE_CODE(c.get<pws_restart_ind_s>().pack(bref));
      break;
    case types::pws_fail_ind:
      HANDLE_CODE(c.get<pws_fail_ind_s>().pack(bref));
      break;
    case types::gnb_du_status_ind:
      HANDLE_CODE(c.get<gnb_du_status_ind_s>().pack(bref));
      break;
    case types::rrc_delivery_report:
      HANDLE_CODE(c.get<rrc_delivery_report_s>().pack(bref));
      break;
    case types::network_access_rate_reduction:
      HANDLE_CODE(c.get<network_access_rate_reduction_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::init_msg_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1ap_elem_procs_o::init_msg_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::reset:
      HANDLE_CODE(c.get<reset_s>().unpack(bref));
      break;
    case types::f1_setup_request:
      HANDLE_CODE(c.get<f1_setup_request_s>().unpack(bref));
      break;
    case types::gnb_du_cfg_upd:
      HANDLE_CODE(c.get<gnb_du_cfg_upd_s>().unpack(bref));
      break;
    case types::gnb_cu_cfg_upd:
      HANDLE_CODE(c.get<gnb_cu_cfg_upd_s>().unpack(bref));
      break;
    case types::ue_context_setup_request:
      HANDLE_CODE(c.get<ue_context_setup_request_s>().unpack(bref));
      break;
    case types::ue_context_release_cmd:
      HANDLE_CODE(c.get<ue_context_release_cmd_s>().unpack(bref));
      break;
    case types::ue_context_mod_request:
      HANDLE_CODE(c.get<ue_context_mod_request_s>().unpack(bref));
      break;
    case types::ue_context_mod_required:
      HANDLE_CODE(c.get<ue_context_mod_required_s>().unpack(bref));
      break;
    case types::write_replace_warning_request:
      HANDLE_CODE(c.get<write_replace_warning_request_s>().unpack(bref));
      break;
    case types::pws_cancel_request:
      HANDLE_CODE(c.get<pws_cancel_request_s>().unpack(bref));
      break;
    case types::gnb_du_res_coordination_request:
      HANDLE_CODE(c.get<gnb_du_res_coordination_request_s>().unpack(bref));
      break;
    case types::f1_removal_request:
      HANDLE_CODE(c.get<f1_removal_request_s>().unpack(bref));
      break;
    case types::error_ind:
      HANDLE_CODE(c.get<error_ind_s>().unpack(bref));
      break;
    case types::ue_context_release_request:
      HANDLE_CODE(c.get<ue_context_release_request_s>().unpack(bref));
      break;
    case types::dl_rrc_msg_transfer:
      HANDLE_CODE(c.get<dl_rrc_msg_transfer_s>().unpack(bref));
      break;
    case types::ul_rrc_msg_transfer:
      HANDLE_CODE(c.get<ul_rrc_msg_transfer_s>().unpack(bref));
      break;
    case types::ue_inactivity_notif:
      HANDLE_CODE(c.get<ue_inactivity_notif_s>().unpack(bref));
      break;
    case types::private_msg:
      HANDLE_CODE(c.get<private_msg_s>().unpack(bref));
      break;
    case types::init_ul_rrc_msg_transfer:
      HANDLE_CODE(c.get<init_ul_rrc_msg_transfer_s>().unpack(bref));
      break;
    case types::sys_info_delivery_cmd:
      HANDLE_CODE(c.get<sys_info_delivery_cmd_s>().unpack(bref));
      break;
    case types::paging:
      HANDLE_CODE(c.get<paging_s>().unpack(bref));
      break;
    case types::notify:
      HANDLE_CODE(c.get<notify_s>().unpack(bref));
      break;
    case types::pws_restart_ind:
      HANDLE_CODE(c.get<pws_restart_ind_s>().unpack(bref));
      break;
    case types::pws_fail_ind:
      HANDLE_CODE(c.get<pws_fail_ind_s>().unpack(bref));
      break;
    case types::gnb_du_status_ind:
      HANDLE_CODE(c.get<gnb_du_status_ind_s>().unpack(bref));
      break;
    case types::rrc_delivery_report:
      HANDLE_CODE(c.get<rrc_delivery_report_s>().unpack(bref));
      break;
    case types::network_access_rate_reduction:
      HANDLE_CODE(c.get<network_access_rate_reduction_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::init_msg_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1ap_elem_procs_o::init_msg_c::types_opts::to_string() const
{
  static const char* names[] = {"Reset",
                                "F1SetupRequest",
                                "GNBDUConfigurationUpdate",
                                "GNBCUConfigurationUpdate",
                                "UEContextSetupRequest",
                                "UEContextReleaseCommand",
                                "UEContextModificationRequest",
                                "UEContextModificationRequired",
                                "WriteReplaceWarningRequest",
                                "PWSCancelRequest",
                                "GNBDUResourceCoordinationRequest",
                                "F1RemovalRequest",
                                "ErrorIndication",
                                "UEContextReleaseRequest",
                                "DLRRCMessageTransfer",
                                "ULRRCMessageTransfer",
                                "UEInactivityNotification",
                                "PrivateMessage",
                                "InitialULRRCMessageTransfer",
                                "SystemInformationDeliveryCommand",
                                "Paging",
                                "Notify",
                                "PWSRestartIndication",
                                "PWSFailureIndication",
                                "GNBDUStatusIndication",
                                "RRCDeliveryReport",
                                "NetworkAccessRateReduction"};
  return convert_enum_idx(names, 27, value, "f1ap_elem_procs_o::init_msg_c::types");
}

// SuccessfulOutcome ::= OPEN TYPE
void f1ap_elem_procs_o::successful_outcome_c::destroy_()
{
  switch (type_) {
    case types::reset_ack:
      c.destroy<reset_ack_s>();
      break;
    case types::f1_setup_resp:
      c.destroy<f1_setup_resp_s>();
      break;
    case types::gnb_du_cfg_upd_ack:
      c.destroy<gnb_du_cfg_upd_ack_s>();
      break;
    case types::gnb_cu_cfg_upd_ack:
      c.destroy<gnb_cu_cfg_upd_ack_s>();
      break;
    case types::ue_context_setup_resp:
      c.destroy<ue_context_setup_resp_s>();
      break;
    case types::ue_context_release_complete:
      c.destroy<ue_context_release_complete_s>();
      break;
    case types::ue_context_mod_resp:
      c.destroy<ue_context_mod_resp_s>();
      break;
    case types::ue_context_mod_confirm:
      c.destroy<ue_context_mod_confirm_s>();
      break;
    case types::write_replace_warning_resp:
      c.destroy<write_replace_warning_resp_s>();
      break;
    case types::pws_cancel_resp:
      c.destroy<pws_cancel_resp_s>();
      break;
    case types::gnb_du_res_coordination_resp:
      c.destroy<gnb_du_res_coordination_resp_s>();
      break;
    case types::f1_removal_resp:
      c.destroy<f1_removal_resp_s>();
      break;
    default:
      break;
  }
}
void f1ap_elem_procs_o::successful_outcome_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::reset_ack:
      c.init<reset_ack_s>();
      break;
    case types::f1_setup_resp:
      c.init<f1_setup_resp_s>();
      break;
    case types::gnb_du_cfg_upd_ack:
      c.init<gnb_du_cfg_upd_ack_s>();
      break;
    case types::gnb_cu_cfg_upd_ack:
      c.init<gnb_cu_cfg_upd_ack_s>();
      break;
    case types::ue_context_setup_resp:
      c.init<ue_context_setup_resp_s>();
      break;
    case types::ue_context_release_complete:
      c.init<ue_context_release_complete_s>();
      break;
    case types::ue_context_mod_resp:
      c.init<ue_context_mod_resp_s>();
      break;
    case types::ue_context_mod_confirm:
      c.init<ue_context_mod_confirm_s>();
      break;
    case types::write_replace_warning_resp:
      c.init<write_replace_warning_resp_s>();
      break;
    case types::pws_cancel_resp:
      c.init<pws_cancel_resp_s>();
      break;
    case types::gnb_du_res_coordination_resp:
      c.init<gnb_du_res_coordination_resp_s>();
      break;
    case types::f1_removal_resp:
      c.init<f1_removal_resp_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::successful_outcome_c");
  }
}
f1ap_elem_procs_o::successful_outcome_c::successful_outcome_c(const f1ap_elem_procs_o::successful_outcome_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::reset_ack:
      c.init(other.c.get<reset_ack_s>());
      break;
    case types::f1_setup_resp:
      c.init(other.c.get<f1_setup_resp_s>());
      break;
    case types::gnb_du_cfg_upd_ack:
      c.init(other.c.get<gnb_du_cfg_upd_ack_s>());
      break;
    case types::gnb_cu_cfg_upd_ack:
      c.init(other.c.get<gnb_cu_cfg_upd_ack_s>());
      break;
    case types::ue_context_setup_resp:
      c.init(other.c.get<ue_context_setup_resp_s>());
      break;
    case types::ue_context_release_complete:
      c.init(other.c.get<ue_context_release_complete_s>());
      break;
    case types::ue_context_mod_resp:
      c.init(other.c.get<ue_context_mod_resp_s>());
      break;
    case types::ue_context_mod_confirm:
      c.init(other.c.get<ue_context_mod_confirm_s>());
      break;
    case types::write_replace_warning_resp:
      c.init(other.c.get<write_replace_warning_resp_s>());
      break;
    case types::pws_cancel_resp:
      c.init(other.c.get<pws_cancel_resp_s>());
      break;
    case types::gnb_du_res_coordination_resp:
      c.init(other.c.get<gnb_du_res_coordination_resp_s>());
      break;
    case types::f1_removal_resp:
      c.init(other.c.get<f1_removal_resp_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::successful_outcome_c");
  }
}
f1ap_elem_procs_o::successful_outcome_c&
f1ap_elem_procs_o::successful_outcome_c::operator=(const f1ap_elem_procs_o::successful_outcome_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::reset_ack:
      c.set(other.c.get<reset_ack_s>());
      break;
    case types::f1_setup_resp:
      c.set(other.c.get<f1_setup_resp_s>());
      break;
    case types::gnb_du_cfg_upd_ack:
      c.set(other.c.get<gnb_du_cfg_upd_ack_s>());
      break;
    case types::gnb_cu_cfg_upd_ack:
      c.set(other.c.get<gnb_cu_cfg_upd_ack_s>());
      break;
    case types::ue_context_setup_resp:
      c.set(other.c.get<ue_context_setup_resp_s>());
      break;
    case types::ue_context_release_complete:
      c.set(other.c.get<ue_context_release_complete_s>());
      break;
    case types::ue_context_mod_resp:
      c.set(other.c.get<ue_context_mod_resp_s>());
      break;
    case types::ue_context_mod_confirm:
      c.set(other.c.get<ue_context_mod_confirm_s>());
      break;
    case types::write_replace_warning_resp:
      c.set(other.c.get<write_replace_warning_resp_s>());
      break;
    case types::pws_cancel_resp:
      c.set(other.c.get<pws_cancel_resp_s>());
      break;
    case types::gnb_du_res_coordination_resp:
      c.set(other.c.get<gnb_du_res_coordination_resp_s>());
      break;
    case types::f1_removal_resp:
      c.set(other.c.get<f1_removal_resp_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::successful_outcome_c");
  }

  return *this;
}
reset_ack_s& f1ap_elem_procs_o::successful_outcome_c::reset_ack()
{
  assert_choice_type(types::reset_ack, type_, "SuccessfulOutcome");
  return c.get<reset_ack_s>();
}
f1_setup_resp_s& f1ap_elem_procs_o::successful_outcome_c::f1_setup_resp()
{
  assert_choice_type(types::f1_setup_resp, type_, "SuccessfulOutcome");
  return c.get<f1_setup_resp_s>();
}
gnb_du_cfg_upd_ack_s& f1ap_elem_procs_o::successful_outcome_c::gnb_du_cfg_upd_ack()
{
  assert_choice_type(types::gnb_du_cfg_upd_ack, type_, "SuccessfulOutcome");
  return c.get<gnb_du_cfg_upd_ack_s>();
}
gnb_cu_cfg_upd_ack_s& f1ap_elem_procs_o::successful_outcome_c::gnb_cu_cfg_upd_ack()
{
  assert_choice_type(types::gnb_cu_cfg_upd_ack, type_, "SuccessfulOutcome");
  return c.get<gnb_cu_cfg_upd_ack_s>();
}
ue_context_setup_resp_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_setup_resp()
{
  assert_choice_type(types::ue_context_setup_resp, type_, "SuccessfulOutcome");
  return c.get<ue_context_setup_resp_s>();
}
ue_context_release_complete_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_release_complete()
{
  assert_choice_type(types::ue_context_release_complete, type_, "SuccessfulOutcome");
  return c.get<ue_context_release_complete_s>();
}
ue_context_mod_resp_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_mod_resp()
{
  assert_choice_type(types::ue_context_mod_resp, type_, "SuccessfulOutcome");
  return c.get<ue_context_mod_resp_s>();
}
ue_context_mod_confirm_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_mod_confirm()
{
  assert_choice_type(types::ue_context_mod_confirm, type_, "SuccessfulOutcome");
  return c.get<ue_context_mod_confirm_s>();
}
write_replace_warning_resp_s& f1ap_elem_procs_o::successful_outcome_c::write_replace_warning_resp()
{
  assert_choice_type(types::write_replace_warning_resp, type_, "SuccessfulOutcome");
  return c.get<write_replace_warning_resp_s>();
}
pws_cancel_resp_s& f1ap_elem_procs_o::successful_outcome_c::pws_cancel_resp()
{
  assert_choice_type(types::pws_cancel_resp, type_, "SuccessfulOutcome");
  return c.get<pws_cancel_resp_s>();
}
gnb_du_res_coordination_resp_s& f1ap_elem_procs_o::successful_outcome_c::gnb_du_res_coordination_resp()
{
  assert_choice_type(types::gnb_du_res_coordination_resp, type_, "SuccessfulOutcome");
  return c.get<gnb_du_res_coordination_resp_s>();
}
f1_removal_resp_s& f1ap_elem_procs_o::successful_outcome_c::f1_removal_resp()
{
  assert_choice_type(types::f1_removal_resp, type_, "SuccessfulOutcome");
  return c.get<f1_removal_resp_s>();
}
const reset_ack_s& f1ap_elem_procs_o::successful_outcome_c::reset_ack() const
{
  assert_choice_type(types::reset_ack, type_, "SuccessfulOutcome");
  return c.get<reset_ack_s>();
}
const f1_setup_resp_s& f1ap_elem_procs_o::successful_outcome_c::f1_setup_resp() const
{
  assert_choice_type(types::f1_setup_resp, type_, "SuccessfulOutcome");
  return c.get<f1_setup_resp_s>();
}
const gnb_du_cfg_upd_ack_s& f1ap_elem_procs_o::successful_outcome_c::gnb_du_cfg_upd_ack() const
{
  assert_choice_type(types::gnb_du_cfg_upd_ack, type_, "SuccessfulOutcome");
  return c.get<gnb_du_cfg_upd_ack_s>();
}
const gnb_cu_cfg_upd_ack_s& f1ap_elem_procs_o::successful_outcome_c::gnb_cu_cfg_upd_ack() const
{
  assert_choice_type(types::gnb_cu_cfg_upd_ack, type_, "SuccessfulOutcome");
  return c.get<gnb_cu_cfg_upd_ack_s>();
}
const ue_context_setup_resp_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_setup_resp() const
{
  assert_choice_type(types::ue_context_setup_resp, type_, "SuccessfulOutcome");
  return c.get<ue_context_setup_resp_s>();
}
const ue_context_release_complete_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_release_complete() const
{
  assert_choice_type(types::ue_context_release_complete, type_, "SuccessfulOutcome");
  return c.get<ue_context_release_complete_s>();
}
const ue_context_mod_resp_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_mod_resp() const
{
  assert_choice_type(types::ue_context_mod_resp, type_, "SuccessfulOutcome");
  return c.get<ue_context_mod_resp_s>();
}
const ue_context_mod_confirm_s& f1ap_elem_procs_o::successful_outcome_c::ue_context_mod_confirm() const
{
  assert_choice_type(types::ue_context_mod_confirm, type_, "SuccessfulOutcome");
  return c.get<ue_context_mod_confirm_s>();
}
const write_replace_warning_resp_s& f1ap_elem_procs_o::successful_outcome_c::write_replace_warning_resp() const
{
  assert_choice_type(types::write_replace_warning_resp, type_, "SuccessfulOutcome");
  return c.get<write_replace_warning_resp_s>();
}
const pws_cancel_resp_s& f1ap_elem_procs_o::successful_outcome_c::pws_cancel_resp() const
{
  assert_choice_type(types::pws_cancel_resp, type_, "SuccessfulOutcome");
  return c.get<pws_cancel_resp_s>();
}
const gnb_du_res_coordination_resp_s& f1ap_elem_procs_o::successful_outcome_c::gnb_du_res_coordination_resp() const
{
  assert_choice_type(types::gnb_du_res_coordination_resp, type_, "SuccessfulOutcome");
  return c.get<gnb_du_res_coordination_resp_s>();
}
const f1_removal_resp_s& f1ap_elem_procs_o::successful_outcome_c::f1_removal_resp() const
{
  assert_choice_type(types::f1_removal_resp, type_, "SuccessfulOutcome");
  return c.get<f1_removal_resp_s>();
}
void f1ap_elem_procs_o::successful_outcome_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::reset_ack:
      j.write_fieldname("ResetAcknowledge");
      c.get<reset_ack_s>().to_json(j);
      break;
    case types::f1_setup_resp:
      j.write_fieldname("F1SetupResponse");
      c.get<f1_setup_resp_s>().to_json(j);
      break;
    case types::gnb_du_cfg_upd_ack:
      j.write_fieldname("GNBDUConfigurationUpdateAcknowledge");
      c.get<gnb_du_cfg_upd_ack_s>().to_json(j);
      break;
    case types::gnb_cu_cfg_upd_ack:
      j.write_fieldname("GNBCUConfigurationUpdateAcknowledge");
      c.get<gnb_cu_cfg_upd_ack_s>().to_json(j);
      break;
    case types::ue_context_setup_resp:
      j.write_fieldname("UEContextSetupResponse");
      c.get<ue_context_setup_resp_s>().to_json(j);
      break;
    case types::ue_context_release_complete:
      j.write_fieldname("UEContextReleaseComplete");
      c.get<ue_context_release_complete_s>().to_json(j);
      break;
    case types::ue_context_mod_resp:
      j.write_fieldname("UEContextModificationResponse");
      c.get<ue_context_mod_resp_s>().to_json(j);
      break;
    case types::ue_context_mod_confirm:
      j.write_fieldname("UEContextModificationConfirm");
      c.get<ue_context_mod_confirm_s>().to_json(j);
      break;
    case types::write_replace_warning_resp:
      j.write_fieldname("WriteReplaceWarningResponse");
      c.get<write_replace_warning_resp_s>().to_json(j);
      break;
    case types::pws_cancel_resp:
      j.write_fieldname("PWSCancelResponse");
      c.get<pws_cancel_resp_s>().to_json(j);
      break;
    case types::gnb_du_res_coordination_resp:
      j.write_fieldname("GNBDUResourceCoordinationResponse");
      c.get<gnb_du_res_coordination_resp_s>().to_json(j);
      break;
    case types::f1_removal_resp:
      j.write_fieldname("F1RemovalResponse");
      c.get<f1_removal_resp_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::successful_outcome_c");
  }
  j.end_obj();
}
SRSASN_CODE f1ap_elem_procs_o::successful_outcome_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::reset_ack:
      HANDLE_CODE(c.get<reset_ack_s>().pack(bref));
      break;
    case types::f1_setup_resp:
      HANDLE_CODE(c.get<f1_setup_resp_s>().pack(bref));
      break;
    case types::gnb_du_cfg_upd_ack:
      HANDLE_CODE(c.get<gnb_du_cfg_upd_ack_s>().pack(bref));
      break;
    case types::gnb_cu_cfg_upd_ack:
      HANDLE_CODE(c.get<gnb_cu_cfg_upd_ack_s>().pack(bref));
      break;
    case types::ue_context_setup_resp:
      HANDLE_CODE(c.get<ue_context_setup_resp_s>().pack(bref));
      break;
    case types::ue_context_release_complete:
      HANDLE_CODE(c.get<ue_context_release_complete_s>().pack(bref));
      break;
    case types::ue_context_mod_resp:
      HANDLE_CODE(c.get<ue_context_mod_resp_s>().pack(bref));
      break;
    case types::ue_context_mod_confirm:
      HANDLE_CODE(c.get<ue_context_mod_confirm_s>().pack(bref));
      break;
    case types::write_replace_warning_resp:
      HANDLE_CODE(c.get<write_replace_warning_resp_s>().pack(bref));
      break;
    case types::pws_cancel_resp:
      HANDLE_CODE(c.get<pws_cancel_resp_s>().pack(bref));
      break;
    case types::gnb_du_res_coordination_resp:
      HANDLE_CODE(c.get<gnb_du_res_coordination_resp_s>().pack(bref));
      break;
    case types::f1_removal_resp:
      HANDLE_CODE(c.get<f1_removal_resp_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::successful_outcome_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1ap_elem_procs_o::successful_outcome_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::reset_ack:
      HANDLE_CODE(c.get<reset_ack_s>().unpack(bref));
      break;
    case types::f1_setup_resp:
      HANDLE_CODE(c.get<f1_setup_resp_s>().unpack(bref));
      break;
    case types::gnb_du_cfg_upd_ack:
      HANDLE_CODE(c.get<gnb_du_cfg_upd_ack_s>().unpack(bref));
      break;
    case types::gnb_cu_cfg_upd_ack:
      HANDLE_CODE(c.get<gnb_cu_cfg_upd_ack_s>().unpack(bref));
      break;
    case types::ue_context_setup_resp:
      HANDLE_CODE(c.get<ue_context_setup_resp_s>().unpack(bref));
      break;
    case types::ue_context_release_complete:
      HANDLE_CODE(c.get<ue_context_release_complete_s>().unpack(bref));
      break;
    case types::ue_context_mod_resp:
      HANDLE_CODE(c.get<ue_context_mod_resp_s>().unpack(bref));
      break;
    case types::ue_context_mod_confirm:
      HANDLE_CODE(c.get<ue_context_mod_confirm_s>().unpack(bref));
      break;
    case types::write_replace_warning_resp:
      HANDLE_CODE(c.get<write_replace_warning_resp_s>().unpack(bref));
      break;
    case types::pws_cancel_resp:
      HANDLE_CODE(c.get<pws_cancel_resp_s>().unpack(bref));
      break;
    case types::gnb_du_res_coordination_resp:
      HANDLE_CODE(c.get<gnb_du_res_coordination_resp_s>().unpack(bref));
      break;
    case types::f1_removal_resp:
      HANDLE_CODE(c.get<f1_removal_resp_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::successful_outcome_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1ap_elem_procs_o::successful_outcome_c::types_opts::to_string() const
{
  static const char* names[] = {"ResetAcknowledge",
                                "F1SetupResponse",
                                "GNBDUConfigurationUpdateAcknowledge",
                                "GNBCUConfigurationUpdateAcknowledge",
                                "UEContextSetupResponse",
                                "UEContextReleaseComplete",
                                "UEContextModificationResponse",
                                "UEContextModificationConfirm",
                                "WriteReplaceWarningResponse",
                                "PWSCancelResponse",
                                "GNBDUResourceCoordinationResponse",
                                "F1RemovalResponse"};
  return convert_enum_idx(names, 12, value, "f1ap_elem_procs_o::successful_outcome_c::types");
}

// UnsuccessfulOutcome ::= OPEN TYPE
void f1ap_elem_procs_o::unsuccessful_outcome_c::destroy_()
{
  switch (type_) {
    case types::f1_setup_fail:
      c.destroy<f1_setup_fail_s>();
      break;
    case types::gnb_du_cfg_upd_fail:
      c.destroy<gnb_du_cfg_upd_fail_s>();
      break;
    case types::gnb_cu_cfg_upd_fail:
      c.destroy<gnb_cu_cfg_upd_fail_s>();
      break;
    case types::ue_context_setup_fail:
      c.destroy<ue_context_setup_fail_s>();
      break;
    case types::ue_context_mod_fail:
      c.destroy<ue_context_mod_fail_s>();
      break;
    case types::ue_context_mod_refuse:
      c.destroy<ue_context_mod_refuse_s>();
      break;
    case types::f1_removal_fail:
      c.destroy<f1_removal_fail_s>();
      break;
    default:
      break;
  }
}
void f1ap_elem_procs_o::unsuccessful_outcome_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::f1_setup_fail:
      c.init<f1_setup_fail_s>();
      break;
    case types::gnb_du_cfg_upd_fail:
      c.init<gnb_du_cfg_upd_fail_s>();
      break;
    case types::gnb_cu_cfg_upd_fail:
      c.init<gnb_cu_cfg_upd_fail_s>();
      break;
    case types::ue_context_setup_fail:
      c.init<ue_context_setup_fail_s>();
      break;
    case types::ue_context_mod_fail:
      c.init<ue_context_mod_fail_s>();
      break;
    case types::ue_context_mod_refuse:
      c.init<ue_context_mod_refuse_s>();
      break;
    case types::f1_removal_fail:
      c.init<f1_removal_fail_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::unsuccessful_outcome_c");
  }
}
f1ap_elem_procs_o::unsuccessful_outcome_c::unsuccessful_outcome_c(
    const f1ap_elem_procs_o::unsuccessful_outcome_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::f1_setup_fail:
      c.init(other.c.get<f1_setup_fail_s>());
      break;
    case types::gnb_du_cfg_upd_fail:
      c.init(other.c.get<gnb_du_cfg_upd_fail_s>());
      break;
    case types::gnb_cu_cfg_upd_fail:
      c.init(other.c.get<gnb_cu_cfg_upd_fail_s>());
      break;
    case types::ue_context_setup_fail:
      c.init(other.c.get<ue_context_setup_fail_s>());
      break;
    case types::ue_context_mod_fail:
      c.init(other.c.get<ue_context_mod_fail_s>());
      break;
    case types::ue_context_mod_refuse:
      c.init(other.c.get<ue_context_mod_refuse_s>());
      break;
    case types::f1_removal_fail:
      c.init(other.c.get<f1_removal_fail_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::unsuccessful_outcome_c");
  }
}
f1ap_elem_procs_o::unsuccessful_outcome_c&
f1ap_elem_procs_o::unsuccessful_outcome_c::operator=(const f1ap_elem_procs_o::unsuccessful_outcome_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::f1_setup_fail:
      c.set(other.c.get<f1_setup_fail_s>());
      break;
    case types::gnb_du_cfg_upd_fail:
      c.set(other.c.get<gnb_du_cfg_upd_fail_s>());
      break;
    case types::gnb_cu_cfg_upd_fail:
      c.set(other.c.get<gnb_cu_cfg_upd_fail_s>());
      break;
    case types::ue_context_setup_fail:
      c.set(other.c.get<ue_context_setup_fail_s>());
      break;
    case types::ue_context_mod_fail:
      c.set(other.c.get<ue_context_mod_fail_s>());
      break;
    case types::ue_context_mod_refuse:
      c.set(other.c.get<ue_context_mod_refuse_s>());
      break;
    case types::f1_removal_fail:
      c.set(other.c.get<f1_removal_fail_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::unsuccessful_outcome_c");
  }

  return *this;
}
f1_setup_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::f1_setup_fail()
{
  assert_choice_type(types::f1_setup_fail, type_, "UnsuccessfulOutcome");
  return c.get<f1_setup_fail_s>();
}
gnb_du_cfg_upd_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::gnb_du_cfg_upd_fail()
{
  assert_choice_type(types::gnb_du_cfg_upd_fail, type_, "UnsuccessfulOutcome");
  return c.get<gnb_du_cfg_upd_fail_s>();
}
gnb_cu_cfg_upd_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::gnb_cu_cfg_upd_fail()
{
  assert_choice_type(types::gnb_cu_cfg_upd_fail, type_, "UnsuccessfulOutcome");
  return c.get<gnb_cu_cfg_upd_fail_s>();
}
ue_context_setup_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::ue_context_setup_fail()
{
  assert_choice_type(types::ue_context_setup_fail, type_, "UnsuccessfulOutcome");
  return c.get<ue_context_setup_fail_s>();
}
ue_context_mod_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::ue_context_mod_fail()
{
  assert_choice_type(types::ue_context_mod_fail, type_, "UnsuccessfulOutcome");
  return c.get<ue_context_mod_fail_s>();
}
ue_context_mod_refuse_s& f1ap_elem_procs_o::unsuccessful_outcome_c::ue_context_mod_refuse()
{
  assert_choice_type(types::ue_context_mod_refuse, type_, "UnsuccessfulOutcome");
  return c.get<ue_context_mod_refuse_s>();
}
f1_removal_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::f1_removal_fail()
{
  assert_choice_type(types::f1_removal_fail, type_, "UnsuccessfulOutcome");
  return c.get<f1_removal_fail_s>();
}
const f1_setup_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::f1_setup_fail() const
{
  assert_choice_type(types::f1_setup_fail, type_, "UnsuccessfulOutcome");
  return c.get<f1_setup_fail_s>();
}
const gnb_du_cfg_upd_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::gnb_du_cfg_upd_fail() const
{
  assert_choice_type(types::gnb_du_cfg_upd_fail, type_, "UnsuccessfulOutcome");
  return c.get<gnb_du_cfg_upd_fail_s>();
}
const gnb_cu_cfg_upd_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::gnb_cu_cfg_upd_fail() const
{
  assert_choice_type(types::gnb_cu_cfg_upd_fail, type_, "UnsuccessfulOutcome");
  return c.get<gnb_cu_cfg_upd_fail_s>();
}
const ue_context_setup_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::ue_context_setup_fail() const
{
  assert_choice_type(types::ue_context_setup_fail, type_, "UnsuccessfulOutcome");
  return c.get<ue_context_setup_fail_s>();
}
const ue_context_mod_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::ue_context_mod_fail() const
{
  assert_choice_type(types::ue_context_mod_fail, type_, "UnsuccessfulOutcome");
  return c.get<ue_context_mod_fail_s>();
}
const ue_context_mod_refuse_s& f1ap_elem_procs_o::unsuccessful_outcome_c::ue_context_mod_refuse() const
{
  assert_choice_type(types::ue_context_mod_refuse, type_, "UnsuccessfulOutcome");
  return c.get<ue_context_mod_refuse_s>();
}
const f1_removal_fail_s& f1ap_elem_procs_o::unsuccessful_outcome_c::f1_removal_fail() const
{
  assert_choice_type(types::f1_removal_fail, type_, "UnsuccessfulOutcome");
  return c.get<f1_removal_fail_s>();
}
void f1ap_elem_procs_o::unsuccessful_outcome_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::f1_setup_fail:
      j.write_fieldname("F1SetupFailure");
      c.get<f1_setup_fail_s>().to_json(j);
      break;
    case types::gnb_du_cfg_upd_fail:
      j.write_fieldname("GNBDUConfigurationUpdateFailure");
      c.get<gnb_du_cfg_upd_fail_s>().to_json(j);
      break;
    case types::gnb_cu_cfg_upd_fail:
      j.write_fieldname("GNBCUConfigurationUpdateFailure");
      c.get<gnb_cu_cfg_upd_fail_s>().to_json(j);
      break;
    case types::ue_context_setup_fail:
      j.write_fieldname("UEContextSetupFailure");
      c.get<ue_context_setup_fail_s>().to_json(j);
      break;
    case types::ue_context_mod_fail:
      j.write_fieldname("UEContextModificationFailure");
      c.get<ue_context_mod_fail_s>().to_json(j);
      break;
    case types::ue_context_mod_refuse:
      j.write_fieldname("UEContextModificationRefuse");
      c.get<ue_context_mod_refuse_s>().to_json(j);
      break;
    case types::f1_removal_fail:
      j.write_fieldname("F1RemovalFailure");
      c.get<f1_removal_fail_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::unsuccessful_outcome_c");
  }
  j.end_obj();
}
SRSASN_CODE f1ap_elem_procs_o::unsuccessful_outcome_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::f1_setup_fail:
      HANDLE_CODE(c.get<f1_setup_fail_s>().pack(bref));
      break;
    case types::gnb_du_cfg_upd_fail:
      HANDLE_CODE(c.get<gnb_du_cfg_upd_fail_s>().pack(bref));
      break;
    case types::gnb_cu_cfg_upd_fail:
      HANDLE_CODE(c.get<gnb_cu_cfg_upd_fail_s>().pack(bref));
      break;
    case types::ue_context_setup_fail:
      HANDLE_CODE(c.get<ue_context_setup_fail_s>().pack(bref));
      break;
    case types::ue_context_mod_fail:
      HANDLE_CODE(c.get<ue_context_mod_fail_s>().pack(bref));
      break;
    case types::ue_context_mod_refuse:
      HANDLE_CODE(c.get<ue_context_mod_refuse_s>().pack(bref));
      break;
    case types::f1_removal_fail:
      HANDLE_CODE(c.get<f1_removal_fail_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::unsuccessful_outcome_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1ap_elem_procs_o::unsuccessful_outcome_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::f1_setup_fail:
      HANDLE_CODE(c.get<f1_setup_fail_s>().unpack(bref));
      break;
    case types::gnb_du_cfg_upd_fail:
      HANDLE_CODE(c.get<gnb_du_cfg_upd_fail_s>().unpack(bref));
      break;
    case types::gnb_cu_cfg_upd_fail:
      HANDLE_CODE(c.get<gnb_cu_cfg_upd_fail_s>().unpack(bref));
      break;
    case types::ue_context_setup_fail:
      HANDLE_CODE(c.get<ue_context_setup_fail_s>().unpack(bref));
      break;
    case types::ue_context_mod_fail:
      HANDLE_CODE(c.get<ue_context_mod_fail_s>().unpack(bref));
      break;
    case types::ue_context_mod_refuse:
      HANDLE_CODE(c.get<ue_context_mod_refuse_s>().unpack(bref));
      break;
    case types::f1_removal_fail:
      HANDLE_CODE(c.get<f1_removal_fail_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_elem_procs_o::unsuccessful_outcome_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1ap_elem_procs_o::unsuccessful_outcome_c::types_opts::to_string() const
{
  static const char* names[] = {"F1SetupFailure",
                                "GNBDUConfigurationUpdateFailure",
                                "GNBCUConfigurationUpdateFailure",
                                "UEContextSetupFailure",
                                "UEContextModificationFailure",
                                "UEContextModificationRefuse",
                                "F1RemovalFailure"};
  return convert_enum_idx(names, 7, value, "f1ap_elem_procs_o::unsuccessful_outcome_c::types");
}

// InitiatingMessage ::= SEQUENCE{{F1AP-ELEMENTARY-PROCEDURE}}
SRSASN_CODE init_msg_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, proc_code, (uint16_t)0u, (uint16_t)255u, false, true));
  warn_assert(crit != f1ap_elem_procs_o::get_crit(proc_code), __func__, __LINE__);
  HANDLE_CODE(crit.pack(bref));
  HANDLE_CODE(value.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE init_msg_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(proc_code, bref, (uint16_t)0u, (uint16_t)255u, false, true));
  HANDLE_CODE(crit.unpack(bref));
  value = f1ap_elem_procs_o::get_init_msg(proc_code);
  HANDLE_CODE(value.unpack(bref));

  return SRSASN_SUCCESS;
}
void init_msg_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("procedureCode", proc_code);
  j.write_str("criticality", crit.to_string());
  j.write_fieldname("value");
  value.to_json(j);
  j.end_obj();
}
bool init_msg_s::load_info_obj(const uint16_t& proc_code_)
{
  if (not f1ap_elem_procs_o::is_proc_code_valid(proc_code_)) {
    return false;
  }
  proc_code = proc_code_;
  crit      = f1ap_elem_procs_o::get_crit(proc_code);
  value     = f1ap_elem_procs_o::get_init_msg(proc_code);
  return value.type().value != f1ap_elem_procs_o::init_msg_c::types_opts::nulltype;
}

// SuccessfulOutcome ::= SEQUENCE{{F1AP-ELEMENTARY-PROCEDURE}}
SRSASN_CODE successful_outcome_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, proc_code, (uint16_t)0u, (uint16_t)255u, false, true));
  warn_assert(crit != f1ap_elem_procs_o::get_crit(proc_code), __func__, __LINE__);
  HANDLE_CODE(crit.pack(bref));
  HANDLE_CODE(value.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE successful_outcome_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(proc_code, bref, (uint16_t)0u, (uint16_t)255u, false, true));
  HANDLE_CODE(crit.unpack(bref));
  value = f1ap_elem_procs_o::get_successful_outcome(proc_code);
  HANDLE_CODE(value.unpack(bref));

  return SRSASN_SUCCESS;
}
void successful_outcome_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("procedureCode", proc_code);
  j.write_str("criticality", crit.to_string());
  j.write_fieldname("value");
  value.to_json(j);
  j.end_obj();
}
bool successful_outcome_s::load_info_obj(const uint16_t& proc_code_)
{
  if (not f1ap_elem_procs_o::is_proc_code_valid(proc_code_)) {
    return false;
  }
  proc_code = proc_code_;
  crit      = f1ap_elem_procs_o::get_crit(proc_code);
  value     = f1ap_elem_procs_o::get_successful_outcome(proc_code);
  return value.type().value != f1ap_elem_procs_o::successful_outcome_c::types_opts::nulltype;
}

// UnsuccessfulOutcome ::= SEQUENCE{{F1AP-ELEMENTARY-PROCEDURE}}
SRSASN_CODE unsuccessful_outcome_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, proc_code, (uint16_t)0u, (uint16_t)255u, false, true));
  warn_assert(crit != f1ap_elem_procs_o::get_crit(proc_code), __func__, __LINE__);
  HANDLE_CODE(crit.pack(bref));
  HANDLE_CODE(value.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE unsuccessful_outcome_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(proc_code, bref, (uint16_t)0u, (uint16_t)255u, false, true));
  HANDLE_CODE(crit.unpack(bref));
  value = f1ap_elem_procs_o::get_unsuccessful_outcome(proc_code);
  HANDLE_CODE(value.unpack(bref));

  return SRSASN_SUCCESS;
}
void unsuccessful_outcome_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("procedureCode", proc_code);
  j.write_str("criticality", crit.to_string());
  j.write_fieldname("value");
  value.to_json(j);
  j.end_obj();
}
bool unsuccessful_outcome_s::load_info_obj(const uint16_t& proc_code_)
{
  if (not f1ap_elem_procs_o::is_proc_code_valid(proc_code_)) {
    return false;
  }
  proc_code = proc_code_;
  crit      = f1ap_elem_procs_o::get_crit(proc_code);
  value     = f1ap_elem_procs_o::get_unsuccessful_outcome(proc_code);
  return value.type().value != f1ap_elem_procs_o::unsuccessful_outcome_c::types_opts::nulltype;
}

// F1AP-PDU ::= CHOICE
void f1ap_pdu_c::destroy_()
{
  switch (type_) {
    case types::init_msg:
      c.destroy<init_msg_s>();
      break;
    case types::successful_outcome:
      c.destroy<successful_outcome_s>();
      break;
    case types::unsuccessful_outcome:
      c.destroy<unsuccessful_outcome_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void f1ap_pdu_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::init_msg:
      c.init<init_msg_s>();
      break;
    case types::successful_outcome:
      c.init<successful_outcome_s>();
      break;
    case types::unsuccessful_outcome:
      c.init<unsuccessful_outcome_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_pdu_c");
  }
}
f1ap_pdu_c::f1ap_pdu_c(const f1ap_pdu_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::init_msg:
      c.init(other.c.get<init_msg_s>());
      break;
    case types::successful_outcome:
      c.init(other.c.get<successful_outcome_s>());
      break;
    case types::unsuccessful_outcome:
      c.init(other.c.get<unsuccessful_outcome_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_pdu_c");
  }
}
f1ap_pdu_c& f1ap_pdu_c::operator=(const f1ap_pdu_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::init_msg:
      c.set(other.c.get<init_msg_s>());
      break;
    case types::successful_outcome:
      c.set(other.c.get<successful_outcome_s>());
      break;
    case types::unsuccessful_outcome:
      c.set(other.c.get<unsuccessful_outcome_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_pdu_c");
  }

  return *this;
}
init_msg_s& f1ap_pdu_c::set_init_msg()
{
  set(types::init_msg);
  return c.get<init_msg_s>();
}
successful_outcome_s& f1ap_pdu_c::set_successful_outcome()
{
  set(types::successful_outcome);
  return c.get<successful_outcome_s>();
}
unsuccessful_outcome_s& f1ap_pdu_c::set_unsuccessful_outcome()
{
  set(types::unsuccessful_outcome);
  return c.get<unsuccessful_outcome_s>();
}
protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>& f1ap_pdu_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>();
}
void f1ap_pdu_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::init_msg:
      j.write_fieldname("initiatingMessage");
      c.get<init_msg_s>().to_json(j);
      break;
    case types::successful_outcome:
      j.write_fieldname("successfulOutcome");
      c.get<successful_outcome_s>().to_json(j);
      break;
    case types::unsuccessful_outcome:
      j.write_fieldname("unsuccessfulOutcome");
      c.get<unsuccessful_outcome_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_pdu_c");
  }
  j.end_obj();
}
SRSASN_CODE f1ap_pdu_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::init_msg:
      HANDLE_CODE(c.get<init_msg_s>().pack(bref));
      break;
    case types::successful_outcome:
      HANDLE_CODE(c.get<successful_outcome_s>().pack(bref));
      break;
    case types::unsuccessful_outcome:
      HANDLE_CODE(c.get<unsuccessful_outcome_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_pdu_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1ap_pdu_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::init_msg:
      HANDLE_CODE(c.get<init_msg_s>().unpack(bref));
      break;
    case types::successful_outcome:
      HANDLE_CODE(c.get<successful_outcome_s>().unpack(bref));
      break;
    case types::unsuccessful_outcome:
      HANDLE_CODE(c.get<unsuccessful_outcome_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<f1ap_pdu_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1ap_pdu_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* f1ap_pdu_c::types_opts::to_string() const
{
  static const char* names[] = {"initiatingMessage", "successfulOutcome", "unsuccessfulOutcome", "choice-extension"};
  return convert_enum_idx(names, 4, value, "f1ap_pdu_c::types");
}

// ProtocolIE-FieldPair{F1AP-PROTOCOL-IES-PAIR : IEsSetParam} ::= SEQUENCE{{F1AP-PROTOCOL-IES-PAIR}}
template <class ies_set_paramT_>
SRSASN_CODE protocol_ie_field_pair_s<ies_set_paramT_>::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, id, (uint32_t)0u, (uint32_t)65535u, false, true));
  warn_assert(first_crit != ies_set_paramT_::get_first_crit(id), __func__, __LINE__);
  HANDLE_CODE(first_crit.pack(bref));
  HANDLE_CODE(first_value.pack(bref));
  warn_assert(second_crit != ies_set_paramT_::get_second_crit(id), __func__, __LINE__);
  HANDLE_CODE(second_crit.pack(bref));
  HANDLE_CODE(second_value.pack(bref));

  return SRSASN_SUCCESS;
}
template <class ies_set_paramT_>
SRSASN_CODE protocol_ie_field_pair_s<ies_set_paramT_>::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
  HANDLE_CODE(first_crit.unpack(bref));
  first_value = ies_set_paramT_::get_first_value(id);
  HANDLE_CODE(first_value.unpack(bref));
  HANDLE_CODE(second_crit.unpack(bref));
  second_value = ies_set_paramT_::get_second_value(id);
  HANDLE_CODE(second_value.unpack(bref));

  return SRSASN_SUCCESS;
}
template <class ies_set_paramT_>
void protocol_ie_field_pair_s<ies_set_paramT_>::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", id);
  j.write_str("firstCriticality", first_crit.to_string());
  j.write_str("secondCriticality", second_crit.to_string());
  j.end_obj();
}
template <class ies_set_paramT_>
bool protocol_ie_field_pair_s<ies_set_paramT_>::load_info_obj(const uint32_t& id_)
{
  if (not ies_set_paramT_::is_id_valid(id_)) {
    return false;
  }
  id           = id_;
  first_crit   = ies_set_paramT_::get_first_crit(id);
  first_value  = ies_set_paramT_::get_first_value(id);
  second_crit  = ies_set_paramT_::get_second_crit(id);
  second_value = ies_set_paramT_::get_second_value(id);
  return first_value.type().value != ies_set_paramT_::first_value_c::types_opts::nulltype and
         second_value.type().value != ies_set_paramT_::second_value_c::types_opts::nulltype;
}
